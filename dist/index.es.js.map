{"version":3,"file":"index.es.js","sources":["../node_modules/@mapbox/point-geometry/index.js","../node_modules/@mapbox/vector-tile/lib/vectortilefeature.js","../node_modules/@mapbox/vector-tile/lib/vectortilelayer.js","../node_modules/@mapbox/vector-tile/lib/vectortile.js","../node_modules/@mapbox/vector-tile/index.js","../node_modules/ieee754/index.js","../node_modules/pbf/index.js","../node_modules/@turf/helpers/dist/es/index.js","../node_modules/@turf/invariant/dist/es/index.js","../node_modules/@turf/boolean-point-in-polygon/dist/es/index.js","../node_modules/@turf/meta/dist/es/index.js","../node_modules/@turf/line-segment/dist/es/index.js","../node_modules/quickselect/index.js","../node_modules/rbush/index.js","../node_modules/@turf/helpers/dist/js/index.js","../node_modules/@turf/meta/dist/js/index.js","../node_modules/@turf/bbox/dist/js/index.js","../node_modules/geojson-rbush/index.js","../node_modules/@turf/line-intersect/dist/es/index.js","../node_modules/@turf/polygon-to-line/dist/es/index.js","../node_modules/@turf/boolean-disjoint/dist/es/index.js","../node_modules/@turf/boolean-intersects/dist/es/index.js","../src/index.ts"],"sourcesContent":["'use strict';\n\nmodule.exports = Point;\n\n/**\n * A standalone point geometry with useful accessor, comparison, and\n * modification methods.\n *\n * @class Point\n * @param {Number} x the x-coordinate. this could be longitude or screen\n * pixels, or any other sort of unit.\n * @param {Number} y the y-coordinate. this could be latitude or screen\n * pixels, or any other sort of unit.\n * @example\n * var point = new Point(-77, 38);\n */\nfunction Point(x, y) {\n    this.x = x;\n    this.y = y;\n}\n\nPoint.prototype = {\n\n    /**\n     * Clone this point, returning a new point that can be modified\n     * without affecting the old one.\n     * @return {Point} the clone\n     */\n    clone: function() { return new Point(this.x, this.y); },\n\n    /**\n     * Add this point's x & y coordinates to another point,\n     * yielding a new point.\n     * @param {Point} p the other point\n     * @return {Point} output point\n     */\n    add:     function(p) { return this.clone()._add(p); },\n\n    /**\n     * Subtract this point's x & y coordinates to from point,\n     * yielding a new point.\n     * @param {Point} p the other point\n     * @return {Point} output point\n     */\n    sub:     function(p) { return this.clone()._sub(p); },\n\n    /**\n     * Multiply this point's x & y coordinates by point,\n     * yielding a new point.\n     * @param {Point} p the other point\n     * @return {Point} output point\n     */\n    multByPoint:    function(p) { return this.clone()._multByPoint(p); },\n\n    /**\n     * Divide this point's x & y coordinates by point,\n     * yielding a new point.\n     * @param {Point} p the other point\n     * @return {Point} output point\n     */\n    divByPoint:     function(p) { return this.clone()._divByPoint(p); },\n\n    /**\n     * Multiply this point's x & y coordinates by a factor,\n     * yielding a new point.\n     * @param {Point} k factor\n     * @return {Point} output point\n     */\n    mult:    function(k) { return this.clone()._mult(k); },\n\n    /**\n     * Divide this point's x & y coordinates by a factor,\n     * yielding a new point.\n     * @param {Point} k factor\n     * @return {Point} output point\n     */\n    div:     function(k) { return this.clone()._div(k); },\n\n    /**\n     * Rotate this point around the 0, 0 origin by an angle a,\n     * given in radians\n     * @param {Number} a angle to rotate around, in radians\n     * @return {Point} output point\n     */\n    rotate:  function(a) { return this.clone()._rotate(a); },\n\n    /**\n     * Rotate this point around p point by an angle a,\n     * given in radians\n     * @param {Number} a angle to rotate around, in radians\n     * @param {Point} p Point to rotate around\n     * @return {Point} output point\n     */\n    rotateAround:  function(a,p) { return this.clone()._rotateAround(a,p); },\n\n    /**\n     * Multiply this point by a 4x1 transformation matrix\n     * @param {Array<Number>} m transformation matrix\n     * @return {Point} output point\n     */\n    matMult: function(m) { return this.clone()._matMult(m); },\n\n    /**\n     * Calculate this point but as a unit vector from 0, 0, meaning\n     * that the distance from the resulting point to the 0, 0\n     * coordinate will be equal to 1 and the angle from the resulting\n     * point to the 0, 0 coordinate will be the same as before.\n     * @return {Point} unit vector point\n     */\n    unit:    function() { return this.clone()._unit(); },\n\n    /**\n     * Compute a perpendicular point, where the new y coordinate\n     * is the old x coordinate and the new x coordinate is the old y\n     * coordinate multiplied by -1\n     * @return {Point} perpendicular point\n     */\n    perp:    function() { return this.clone()._perp(); },\n\n    /**\n     * Return a version of this point with the x & y coordinates\n     * rounded to integers.\n     * @return {Point} rounded point\n     */\n    round:   function() { return this.clone()._round(); },\n\n    /**\n     * Return the magitude of this point: this is the Euclidean\n     * distance from the 0, 0 coordinate to this point's x and y\n     * coordinates.\n     * @return {Number} magnitude\n     */\n    mag: function() {\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n    },\n\n    /**\n     * Judge whether this point is equal to another point, returning\n     * true or false.\n     * @param {Point} other the other point\n     * @return {boolean} whether the points are equal\n     */\n    equals: function(other) {\n        return this.x === other.x &&\n               this.y === other.y;\n    },\n\n    /**\n     * Calculate the distance from this point to another point\n     * @param {Point} p the other point\n     * @return {Number} distance\n     */\n    dist: function(p) {\n        return Math.sqrt(this.distSqr(p));\n    },\n\n    /**\n     * Calculate the distance from this point to another point,\n     * without the square root step. Useful if you're comparing\n     * relative distances.\n     * @param {Point} p the other point\n     * @return {Number} distance\n     */\n    distSqr: function(p) {\n        var dx = p.x - this.x,\n            dy = p.y - this.y;\n        return dx * dx + dy * dy;\n    },\n\n    /**\n     * Get the angle from the 0, 0 coordinate to this point, in radians\n     * coordinates.\n     * @return {Number} angle\n     */\n    angle: function() {\n        return Math.atan2(this.y, this.x);\n    },\n\n    /**\n     * Get the angle from this point to another point, in radians\n     * @param {Point} b the other point\n     * @return {Number} angle\n     */\n    angleTo: function(b) {\n        return Math.atan2(this.y - b.y, this.x - b.x);\n    },\n\n    /**\n     * Get the angle between this point and another point, in radians\n     * @param {Point} b the other point\n     * @return {Number} angle\n     */\n    angleWith: function(b) {\n        return this.angleWithSep(b.x, b.y);\n    },\n\n    /*\n     * Find the angle of the two vectors, solving the formula for\n     * the cross product a x b = |a||b|sin(θ) for θ.\n     * @param {Number} x the x-coordinate\n     * @param {Number} y the y-coordinate\n     * @return {Number} the angle in radians\n     */\n    angleWithSep: function(x, y) {\n        return Math.atan2(\n            this.x * y - this.y * x,\n            this.x * x + this.y * y);\n    },\n\n    _matMult: function(m) {\n        var x = m[0] * this.x + m[1] * this.y,\n            y = m[2] * this.x + m[3] * this.y;\n        this.x = x;\n        this.y = y;\n        return this;\n    },\n\n    _add: function(p) {\n        this.x += p.x;\n        this.y += p.y;\n        return this;\n    },\n\n    _sub: function(p) {\n        this.x -= p.x;\n        this.y -= p.y;\n        return this;\n    },\n\n    _mult: function(k) {\n        this.x *= k;\n        this.y *= k;\n        return this;\n    },\n\n    _div: function(k) {\n        this.x /= k;\n        this.y /= k;\n        return this;\n    },\n\n    _multByPoint: function(p) {\n        this.x *= p.x;\n        this.y *= p.y;\n        return this;\n    },\n\n    _divByPoint: function(p) {\n        this.x /= p.x;\n        this.y /= p.y;\n        return this;\n    },\n\n    _unit: function() {\n        this._div(this.mag());\n        return this;\n    },\n\n    _perp: function() {\n        var y = this.y;\n        this.y = this.x;\n        this.x = -y;\n        return this;\n    },\n\n    _rotate: function(angle) {\n        var cos = Math.cos(angle),\n            sin = Math.sin(angle),\n            x = cos * this.x - sin * this.y,\n            y = sin * this.x + cos * this.y;\n        this.x = x;\n        this.y = y;\n        return this;\n    },\n\n    _rotateAround: function(angle, p) {\n        var cos = Math.cos(angle),\n            sin = Math.sin(angle),\n            x = p.x + cos * (this.x - p.x) - sin * (this.y - p.y),\n            y = p.y + sin * (this.x - p.x) + cos * (this.y - p.y);\n        this.x = x;\n        this.y = y;\n        return this;\n    },\n\n    _round: function() {\n        this.x = Math.round(this.x);\n        this.y = Math.round(this.y);\n        return this;\n    }\n};\n\n/**\n * Construct a point from an array if necessary, otherwise if the input\n * is already a Point, or an unknown type, return it unchanged\n * @param {Array<Number>|Point|*} a any kind of input value\n * @return {Point} constructed point, or passed-through value.\n * @example\n * // this\n * var point = Point.convert([0, 1]);\n * // is equivalent to\n * var point = new Point(0, 1);\n */\nPoint.convert = function (a) {\n    if (a instanceof Point) {\n        return a;\n    }\n    if (Array.isArray(a)) {\n        return new Point(a[0], a[1]);\n    }\n    return a;\n};\n","'use strict';\n\nvar Point = require('@mapbox/point-geometry');\n\nmodule.exports = VectorTileFeature;\n\nfunction VectorTileFeature(pbf, end, extent, keys, values) {\n    // Public\n    this.properties = {};\n    this.extent = extent;\n    this.type = 0;\n\n    // Private\n    this._pbf = pbf;\n    this._geometry = -1;\n    this._keys = keys;\n    this._values = values;\n\n    pbf.readFields(readFeature, this, end);\n}\n\nfunction readFeature(tag, feature, pbf) {\n    if (tag == 1) feature.id = pbf.readVarint();\n    else if (tag == 2) readTag(pbf, feature);\n    else if (tag == 3) feature.type = pbf.readVarint();\n    else if (tag == 4) feature._geometry = pbf.pos;\n}\n\nfunction readTag(pbf, feature) {\n    var end = pbf.readVarint() + pbf.pos;\n\n    while (pbf.pos < end) {\n        var key = feature._keys[pbf.readVarint()],\n            value = feature._values[pbf.readVarint()];\n        feature.properties[key] = value;\n    }\n}\n\nVectorTileFeature.types = ['Unknown', 'Point', 'LineString', 'Polygon'];\n\nVectorTileFeature.prototype.loadGeometry = function() {\n    var pbf = this._pbf;\n    pbf.pos = this._geometry;\n\n    var end = pbf.readVarint() + pbf.pos,\n        cmd = 1,\n        length = 0,\n        x = 0,\n        y = 0,\n        lines = [],\n        line;\n\n    while (pbf.pos < end) {\n        if (length <= 0) {\n            var cmdLen = pbf.readVarint();\n            cmd = cmdLen & 0x7;\n            length = cmdLen >> 3;\n        }\n\n        length--;\n\n        if (cmd === 1 || cmd === 2) {\n            x += pbf.readSVarint();\n            y += pbf.readSVarint();\n\n            if (cmd === 1) { // moveTo\n                if (line) lines.push(line);\n                line = [];\n            }\n\n            line.push(new Point(x, y));\n\n        } else if (cmd === 7) {\n\n            // Workaround for https://github.com/mapbox/mapnik-vector-tile/issues/90\n            if (line) {\n                line.push(line[0].clone()); // closePolygon\n            }\n\n        } else {\n            throw new Error('unknown command ' + cmd);\n        }\n    }\n\n    if (line) lines.push(line);\n\n    return lines;\n};\n\nVectorTileFeature.prototype.bbox = function() {\n    var pbf = this._pbf;\n    pbf.pos = this._geometry;\n\n    var end = pbf.readVarint() + pbf.pos,\n        cmd = 1,\n        length = 0,\n        x = 0,\n        y = 0,\n        x1 = Infinity,\n        x2 = -Infinity,\n        y1 = Infinity,\n        y2 = -Infinity;\n\n    while (pbf.pos < end) {\n        if (length <= 0) {\n            var cmdLen = pbf.readVarint();\n            cmd = cmdLen & 0x7;\n            length = cmdLen >> 3;\n        }\n\n        length--;\n\n        if (cmd === 1 || cmd === 2) {\n            x += pbf.readSVarint();\n            y += pbf.readSVarint();\n            if (x < x1) x1 = x;\n            if (x > x2) x2 = x;\n            if (y < y1) y1 = y;\n            if (y > y2) y2 = y;\n\n        } else if (cmd !== 7) {\n            throw new Error('unknown command ' + cmd);\n        }\n    }\n\n    return [x1, y1, x2, y2];\n};\n\nVectorTileFeature.prototype.toGeoJSON = function(x, y, z) {\n    var size = this.extent * Math.pow(2, z),\n        x0 = this.extent * x,\n        y0 = this.extent * y,\n        coords = this.loadGeometry(),\n        type = VectorTileFeature.types[this.type],\n        i, j;\n\n    function project(line) {\n        for (var j = 0; j < line.length; j++) {\n            var p = line[j], y2 = 180 - (p.y + y0) * 360 / size;\n            line[j] = [\n                (p.x + x0) * 360 / size - 180,\n                360 / Math.PI * Math.atan(Math.exp(y2 * Math.PI / 180)) - 90\n            ];\n        }\n    }\n\n    switch (this.type) {\n    case 1:\n        var points = [];\n        for (i = 0; i < coords.length; i++) {\n            points[i] = coords[i][0];\n        }\n        coords = points;\n        project(coords);\n        break;\n\n    case 2:\n        for (i = 0; i < coords.length; i++) {\n            project(coords[i]);\n        }\n        break;\n\n    case 3:\n        coords = classifyRings(coords);\n        for (i = 0; i < coords.length; i++) {\n            for (j = 0; j < coords[i].length; j++) {\n                project(coords[i][j]);\n            }\n        }\n        break;\n    }\n\n    if (coords.length === 1) {\n        coords = coords[0];\n    } else {\n        type = 'Multi' + type;\n    }\n\n    var result = {\n        type: \"Feature\",\n        geometry: {\n            type: type,\n            coordinates: coords\n        },\n        properties: this.properties\n    };\n\n    if ('id' in this) {\n        result.id = this.id;\n    }\n\n    return result;\n};\n\n// classifies an array of rings into polygons with outer rings and holes\n\nfunction classifyRings(rings) {\n    var len = rings.length;\n\n    if (len <= 1) return [rings];\n\n    var polygons = [],\n        polygon,\n        ccw;\n\n    for (var i = 0; i < len; i++) {\n        var area = signedArea(rings[i]);\n        if (area === 0) continue;\n\n        if (ccw === undefined) ccw = area < 0;\n\n        if (ccw === area < 0) {\n            if (polygon) polygons.push(polygon);\n            polygon = [rings[i]];\n\n        } else {\n            polygon.push(rings[i]);\n        }\n    }\n    if (polygon) polygons.push(polygon);\n\n    return polygons;\n}\n\nfunction signedArea(ring) {\n    var sum = 0;\n    for (var i = 0, len = ring.length, j = len - 1, p1, p2; i < len; j = i++) {\n        p1 = ring[i];\n        p2 = ring[j];\n        sum += (p2.x - p1.x) * (p1.y + p2.y);\n    }\n    return sum;\n}\n","'use strict';\n\nvar VectorTileFeature = require('./vectortilefeature.js');\n\nmodule.exports = VectorTileLayer;\n\nfunction VectorTileLayer(pbf, end) {\n    // Public\n    this.version = 1;\n    this.name = null;\n    this.extent = 4096;\n    this.length = 0;\n\n    // Private\n    this._pbf = pbf;\n    this._keys = [];\n    this._values = [];\n    this._features = [];\n\n    pbf.readFields(readLayer, this, end);\n\n    this.length = this._features.length;\n}\n\nfunction readLayer(tag, layer, pbf) {\n    if (tag === 15) layer.version = pbf.readVarint();\n    else if (tag === 1) layer.name = pbf.readString();\n    else if (tag === 5) layer.extent = pbf.readVarint();\n    else if (tag === 2) layer._features.push(pbf.pos);\n    else if (tag === 3) layer._keys.push(pbf.readString());\n    else if (tag === 4) layer._values.push(readValueMessage(pbf));\n}\n\nfunction readValueMessage(pbf) {\n    var value = null,\n        end = pbf.readVarint() + pbf.pos;\n\n    while (pbf.pos < end) {\n        var tag = pbf.readVarint() >> 3;\n\n        value = tag === 1 ? pbf.readString() :\n            tag === 2 ? pbf.readFloat() :\n            tag === 3 ? pbf.readDouble() :\n            tag === 4 ? pbf.readVarint64() :\n            tag === 5 ? pbf.readVarint() :\n            tag === 6 ? pbf.readSVarint() :\n            tag === 7 ? pbf.readBoolean() : null;\n    }\n\n    return value;\n}\n\n// return feature `i` from this layer as a `VectorTileFeature`\nVectorTileLayer.prototype.feature = function(i) {\n    if (i < 0 || i >= this._features.length) throw new Error('feature index out of bounds');\n\n    this._pbf.pos = this._features[i];\n\n    var end = this._pbf.readVarint() + this._pbf.pos;\n    return new VectorTileFeature(this._pbf, end, this.extent, this._keys, this._values);\n};\n","'use strict';\n\nvar VectorTileLayer = require('./vectortilelayer');\n\nmodule.exports = VectorTile;\n\nfunction VectorTile(pbf, end) {\n    this.layers = pbf.readFields(readTile, {}, end);\n}\n\nfunction readTile(tag, layers, pbf) {\n    if (tag === 3) {\n        var layer = new VectorTileLayer(pbf, pbf.readVarint() + pbf.pos);\n        if (layer.length) layers[layer.name] = layer;\n    }\n}\n\n","module.exports.VectorTile = require('./lib/vectortile.js');\nmodule.exports.VectorTileFeature = require('./lib/vectortilefeature.js');\nmodule.exports.VectorTileLayer = require('./lib/vectortilelayer.js');\n","/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","'use strict';\n\nmodule.exports = Pbf;\n\nvar ieee754 = require('ieee754');\n\nfunction Pbf(buf) {\n    this.buf = ArrayBuffer.isView && ArrayBuffer.isView(buf) ? buf : new Uint8Array(buf || 0);\n    this.pos = 0;\n    this.type = 0;\n    this.length = this.buf.length;\n}\n\nPbf.Varint  = 0; // varint: int32, int64, uint32, uint64, sint32, sint64, bool, enum\nPbf.Fixed64 = 1; // 64-bit: double, fixed64, sfixed64\nPbf.Bytes   = 2; // length-delimited: string, bytes, embedded messages, packed repeated fields\nPbf.Fixed32 = 5; // 32-bit: float, fixed32, sfixed32\n\nvar SHIFT_LEFT_32 = (1 << 16) * (1 << 16),\n    SHIFT_RIGHT_32 = 1 / SHIFT_LEFT_32;\n\n// Threshold chosen based on both benchmarking and knowledge about browser string\n// data structures (which currently switch structure types at 12 bytes or more)\nvar TEXT_DECODER_MIN_LENGTH = 12;\nvar utf8TextDecoder = typeof TextDecoder === 'undefined' ? null : new TextDecoder('utf8');\n\nPbf.prototype = {\n\n    destroy: function() {\n        this.buf = null;\n    },\n\n    // === READING =================================================================\n\n    readFields: function(readField, result, end) {\n        end = end || this.length;\n\n        while (this.pos < end) {\n            var val = this.readVarint(),\n                tag = val >> 3,\n                startPos = this.pos;\n\n            this.type = val & 0x7;\n            readField(tag, result, this);\n\n            if (this.pos === startPos) this.skip(val);\n        }\n        return result;\n    },\n\n    readMessage: function(readField, result) {\n        return this.readFields(readField, result, this.readVarint() + this.pos);\n    },\n\n    readFixed32: function() {\n        var val = readUInt32(this.buf, this.pos);\n        this.pos += 4;\n        return val;\n    },\n\n    readSFixed32: function() {\n        var val = readInt32(this.buf, this.pos);\n        this.pos += 4;\n        return val;\n    },\n\n    // 64-bit int handling is based on github.com/dpw/node-buffer-more-ints (MIT-licensed)\n\n    readFixed64: function() {\n        var val = readUInt32(this.buf, this.pos) + readUInt32(this.buf, this.pos + 4) * SHIFT_LEFT_32;\n        this.pos += 8;\n        return val;\n    },\n\n    readSFixed64: function() {\n        var val = readUInt32(this.buf, this.pos) + readInt32(this.buf, this.pos + 4) * SHIFT_LEFT_32;\n        this.pos += 8;\n        return val;\n    },\n\n    readFloat: function() {\n        var val = ieee754.read(this.buf, this.pos, true, 23, 4);\n        this.pos += 4;\n        return val;\n    },\n\n    readDouble: function() {\n        var val = ieee754.read(this.buf, this.pos, true, 52, 8);\n        this.pos += 8;\n        return val;\n    },\n\n    readVarint: function(isSigned) {\n        var buf = this.buf,\n            val, b;\n\n        b = buf[this.pos++]; val  =  b & 0x7f;        if (b < 0x80) return val;\n        b = buf[this.pos++]; val |= (b & 0x7f) << 7;  if (b < 0x80) return val;\n        b = buf[this.pos++]; val |= (b & 0x7f) << 14; if (b < 0x80) return val;\n        b = buf[this.pos++]; val |= (b & 0x7f) << 21; if (b < 0x80) return val;\n        b = buf[this.pos];   val |= (b & 0x0f) << 28;\n\n        return readVarintRemainder(val, isSigned, this);\n    },\n\n    readVarint64: function() { // for compatibility with v2.0.1\n        return this.readVarint(true);\n    },\n\n    readSVarint: function() {\n        var num = this.readVarint();\n        return num % 2 === 1 ? (num + 1) / -2 : num / 2; // zigzag encoding\n    },\n\n    readBoolean: function() {\n        return Boolean(this.readVarint());\n    },\n\n    readString: function() {\n        var end = this.readVarint() + this.pos;\n        var pos = this.pos;\n        this.pos = end;\n\n        if (end - pos >= TEXT_DECODER_MIN_LENGTH && utf8TextDecoder) {\n            // longer strings are fast with the built-in browser TextDecoder API\n            return readUtf8TextDecoder(this.buf, pos, end);\n        }\n        // short strings are fast with our custom implementation\n        return readUtf8(this.buf, pos, end);\n    },\n\n    readBytes: function() {\n        var end = this.readVarint() + this.pos,\n            buffer = this.buf.subarray(this.pos, end);\n        this.pos = end;\n        return buffer;\n    },\n\n    // verbose for performance reasons; doesn't affect gzipped size\n\n    readPackedVarint: function(arr, isSigned) {\n        if (this.type !== Pbf.Bytes) return arr.push(this.readVarint(isSigned));\n        var end = readPackedEnd(this);\n        arr = arr || [];\n        while (this.pos < end) arr.push(this.readVarint(isSigned));\n        return arr;\n    },\n    readPackedSVarint: function(arr) {\n        if (this.type !== Pbf.Bytes) return arr.push(this.readSVarint());\n        var end = readPackedEnd(this);\n        arr = arr || [];\n        while (this.pos < end) arr.push(this.readSVarint());\n        return arr;\n    },\n    readPackedBoolean: function(arr) {\n        if (this.type !== Pbf.Bytes) return arr.push(this.readBoolean());\n        var end = readPackedEnd(this);\n        arr = arr || [];\n        while (this.pos < end) arr.push(this.readBoolean());\n        return arr;\n    },\n    readPackedFloat: function(arr) {\n        if (this.type !== Pbf.Bytes) return arr.push(this.readFloat());\n        var end = readPackedEnd(this);\n        arr = arr || [];\n        while (this.pos < end) arr.push(this.readFloat());\n        return arr;\n    },\n    readPackedDouble: function(arr) {\n        if (this.type !== Pbf.Bytes) return arr.push(this.readDouble());\n        var end = readPackedEnd(this);\n        arr = arr || [];\n        while (this.pos < end) arr.push(this.readDouble());\n        return arr;\n    },\n    readPackedFixed32: function(arr) {\n        if (this.type !== Pbf.Bytes) return arr.push(this.readFixed32());\n        var end = readPackedEnd(this);\n        arr = arr || [];\n        while (this.pos < end) arr.push(this.readFixed32());\n        return arr;\n    },\n    readPackedSFixed32: function(arr) {\n        if (this.type !== Pbf.Bytes) return arr.push(this.readSFixed32());\n        var end = readPackedEnd(this);\n        arr = arr || [];\n        while (this.pos < end) arr.push(this.readSFixed32());\n        return arr;\n    },\n    readPackedFixed64: function(arr) {\n        if (this.type !== Pbf.Bytes) return arr.push(this.readFixed64());\n        var end = readPackedEnd(this);\n        arr = arr || [];\n        while (this.pos < end) arr.push(this.readFixed64());\n        return arr;\n    },\n    readPackedSFixed64: function(arr) {\n        if (this.type !== Pbf.Bytes) return arr.push(this.readSFixed64());\n        var end = readPackedEnd(this);\n        arr = arr || [];\n        while (this.pos < end) arr.push(this.readSFixed64());\n        return arr;\n    },\n\n    skip: function(val) {\n        var type = val & 0x7;\n        if (type === Pbf.Varint) while (this.buf[this.pos++] > 0x7f) {}\n        else if (type === Pbf.Bytes) this.pos = this.readVarint() + this.pos;\n        else if (type === Pbf.Fixed32) this.pos += 4;\n        else if (type === Pbf.Fixed64) this.pos += 8;\n        else throw new Error('Unimplemented type: ' + type);\n    },\n\n    // === WRITING =================================================================\n\n    writeTag: function(tag, type) {\n        this.writeVarint((tag << 3) | type);\n    },\n\n    realloc: function(min) {\n        var length = this.length || 16;\n\n        while (length < this.pos + min) length *= 2;\n\n        if (length !== this.length) {\n            var buf = new Uint8Array(length);\n            buf.set(this.buf);\n            this.buf = buf;\n            this.length = length;\n        }\n    },\n\n    finish: function() {\n        this.length = this.pos;\n        this.pos = 0;\n        return this.buf.subarray(0, this.length);\n    },\n\n    writeFixed32: function(val) {\n        this.realloc(4);\n        writeInt32(this.buf, val, this.pos);\n        this.pos += 4;\n    },\n\n    writeSFixed32: function(val) {\n        this.realloc(4);\n        writeInt32(this.buf, val, this.pos);\n        this.pos += 4;\n    },\n\n    writeFixed64: function(val) {\n        this.realloc(8);\n        writeInt32(this.buf, val & -1, this.pos);\n        writeInt32(this.buf, Math.floor(val * SHIFT_RIGHT_32), this.pos + 4);\n        this.pos += 8;\n    },\n\n    writeSFixed64: function(val) {\n        this.realloc(8);\n        writeInt32(this.buf, val & -1, this.pos);\n        writeInt32(this.buf, Math.floor(val * SHIFT_RIGHT_32), this.pos + 4);\n        this.pos += 8;\n    },\n\n    writeVarint: function(val) {\n        val = +val || 0;\n\n        if (val > 0xfffffff || val < 0) {\n            writeBigVarint(val, this);\n            return;\n        }\n\n        this.realloc(4);\n\n        this.buf[this.pos++] =           val & 0x7f  | (val > 0x7f ? 0x80 : 0); if (val <= 0x7f) return;\n        this.buf[this.pos++] = ((val >>>= 7) & 0x7f) | (val > 0x7f ? 0x80 : 0); if (val <= 0x7f) return;\n        this.buf[this.pos++] = ((val >>>= 7) & 0x7f) | (val > 0x7f ? 0x80 : 0); if (val <= 0x7f) return;\n        this.buf[this.pos++] =   (val >>> 7) & 0x7f;\n    },\n\n    writeSVarint: function(val) {\n        this.writeVarint(val < 0 ? -val * 2 - 1 : val * 2);\n    },\n\n    writeBoolean: function(val) {\n        this.writeVarint(Boolean(val));\n    },\n\n    writeString: function(str) {\n        str = String(str);\n        this.realloc(str.length * 4);\n\n        this.pos++; // reserve 1 byte for short string length\n\n        var startPos = this.pos;\n        // write the string directly to the buffer and see how much was written\n        this.pos = writeUtf8(this.buf, str, this.pos);\n        var len = this.pos - startPos;\n\n        if (len >= 0x80) makeRoomForExtraLength(startPos, len, this);\n\n        // finally, write the message length in the reserved place and restore the position\n        this.pos = startPos - 1;\n        this.writeVarint(len);\n        this.pos += len;\n    },\n\n    writeFloat: function(val) {\n        this.realloc(4);\n        ieee754.write(this.buf, val, this.pos, true, 23, 4);\n        this.pos += 4;\n    },\n\n    writeDouble: function(val) {\n        this.realloc(8);\n        ieee754.write(this.buf, val, this.pos, true, 52, 8);\n        this.pos += 8;\n    },\n\n    writeBytes: function(buffer) {\n        var len = buffer.length;\n        this.writeVarint(len);\n        this.realloc(len);\n        for (var i = 0; i < len; i++) this.buf[this.pos++] = buffer[i];\n    },\n\n    writeRawMessage: function(fn, obj) {\n        this.pos++; // reserve 1 byte for short message length\n\n        // write the message directly to the buffer and see how much was written\n        var startPos = this.pos;\n        fn(obj, this);\n        var len = this.pos - startPos;\n\n        if (len >= 0x80) makeRoomForExtraLength(startPos, len, this);\n\n        // finally, write the message length in the reserved place and restore the position\n        this.pos = startPos - 1;\n        this.writeVarint(len);\n        this.pos += len;\n    },\n\n    writeMessage: function(tag, fn, obj) {\n        this.writeTag(tag, Pbf.Bytes);\n        this.writeRawMessage(fn, obj);\n    },\n\n    writePackedVarint:   function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedVarint, arr);   },\n    writePackedSVarint:  function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedSVarint, arr);  },\n    writePackedBoolean:  function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedBoolean, arr);  },\n    writePackedFloat:    function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedFloat, arr);    },\n    writePackedDouble:   function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedDouble, arr);   },\n    writePackedFixed32:  function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedFixed32, arr);  },\n    writePackedSFixed32: function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedSFixed32, arr); },\n    writePackedFixed64:  function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedFixed64, arr);  },\n    writePackedSFixed64: function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedSFixed64, arr); },\n\n    writeBytesField: function(tag, buffer) {\n        this.writeTag(tag, Pbf.Bytes);\n        this.writeBytes(buffer);\n    },\n    writeFixed32Field: function(tag, val) {\n        this.writeTag(tag, Pbf.Fixed32);\n        this.writeFixed32(val);\n    },\n    writeSFixed32Field: function(tag, val) {\n        this.writeTag(tag, Pbf.Fixed32);\n        this.writeSFixed32(val);\n    },\n    writeFixed64Field: function(tag, val) {\n        this.writeTag(tag, Pbf.Fixed64);\n        this.writeFixed64(val);\n    },\n    writeSFixed64Field: function(tag, val) {\n        this.writeTag(tag, Pbf.Fixed64);\n        this.writeSFixed64(val);\n    },\n    writeVarintField: function(tag, val) {\n        this.writeTag(tag, Pbf.Varint);\n        this.writeVarint(val);\n    },\n    writeSVarintField: function(tag, val) {\n        this.writeTag(tag, Pbf.Varint);\n        this.writeSVarint(val);\n    },\n    writeStringField: function(tag, str) {\n        this.writeTag(tag, Pbf.Bytes);\n        this.writeString(str);\n    },\n    writeFloatField: function(tag, val) {\n        this.writeTag(tag, Pbf.Fixed32);\n        this.writeFloat(val);\n    },\n    writeDoubleField: function(tag, val) {\n        this.writeTag(tag, Pbf.Fixed64);\n        this.writeDouble(val);\n    },\n    writeBooleanField: function(tag, val) {\n        this.writeVarintField(tag, Boolean(val));\n    }\n};\n\nfunction readVarintRemainder(l, s, p) {\n    var buf = p.buf,\n        h, b;\n\n    b = buf[p.pos++]; h  = (b & 0x70) >> 4;  if (b < 0x80) return toNum(l, h, s);\n    b = buf[p.pos++]; h |= (b & 0x7f) << 3;  if (b < 0x80) return toNum(l, h, s);\n    b = buf[p.pos++]; h |= (b & 0x7f) << 10; if (b < 0x80) return toNum(l, h, s);\n    b = buf[p.pos++]; h |= (b & 0x7f) << 17; if (b < 0x80) return toNum(l, h, s);\n    b = buf[p.pos++]; h |= (b & 0x7f) << 24; if (b < 0x80) return toNum(l, h, s);\n    b = buf[p.pos++]; h |= (b & 0x01) << 31; if (b < 0x80) return toNum(l, h, s);\n\n    throw new Error('Expected varint not more than 10 bytes');\n}\n\nfunction readPackedEnd(pbf) {\n    return pbf.type === Pbf.Bytes ?\n        pbf.readVarint() + pbf.pos : pbf.pos + 1;\n}\n\nfunction toNum(low, high, isSigned) {\n    if (isSigned) {\n        return high * 0x100000000 + (low >>> 0);\n    }\n\n    return ((high >>> 0) * 0x100000000) + (low >>> 0);\n}\n\nfunction writeBigVarint(val, pbf) {\n    var low, high;\n\n    if (val >= 0) {\n        low  = (val % 0x100000000) | 0;\n        high = (val / 0x100000000) | 0;\n    } else {\n        low  = ~(-val % 0x100000000);\n        high = ~(-val / 0x100000000);\n\n        if (low ^ 0xffffffff) {\n            low = (low + 1) | 0;\n        } else {\n            low = 0;\n            high = (high + 1) | 0;\n        }\n    }\n\n    if (val >= 0x10000000000000000 || val < -0x10000000000000000) {\n        throw new Error('Given varint doesn\\'t fit into 10 bytes');\n    }\n\n    pbf.realloc(10);\n\n    writeBigVarintLow(low, high, pbf);\n    writeBigVarintHigh(high, pbf);\n}\n\nfunction writeBigVarintLow(low, high, pbf) {\n    pbf.buf[pbf.pos++] = low & 0x7f | 0x80; low >>>= 7;\n    pbf.buf[pbf.pos++] = low & 0x7f | 0x80; low >>>= 7;\n    pbf.buf[pbf.pos++] = low & 0x7f | 0x80; low >>>= 7;\n    pbf.buf[pbf.pos++] = low & 0x7f | 0x80; low >>>= 7;\n    pbf.buf[pbf.pos]   = low & 0x7f;\n}\n\nfunction writeBigVarintHigh(high, pbf) {\n    var lsb = (high & 0x07) << 4;\n\n    pbf.buf[pbf.pos++] |= lsb         | ((high >>>= 3) ? 0x80 : 0); if (!high) return;\n    pbf.buf[pbf.pos++]  = high & 0x7f | ((high >>>= 7) ? 0x80 : 0); if (!high) return;\n    pbf.buf[pbf.pos++]  = high & 0x7f | ((high >>>= 7) ? 0x80 : 0); if (!high) return;\n    pbf.buf[pbf.pos++]  = high & 0x7f | ((high >>>= 7) ? 0x80 : 0); if (!high) return;\n    pbf.buf[pbf.pos++]  = high & 0x7f | ((high >>>= 7) ? 0x80 : 0); if (!high) return;\n    pbf.buf[pbf.pos++]  = high & 0x7f;\n}\n\nfunction makeRoomForExtraLength(startPos, len, pbf) {\n    var extraLen =\n        len <= 0x3fff ? 1 :\n        len <= 0x1fffff ? 2 :\n        len <= 0xfffffff ? 3 : Math.floor(Math.log(len) / (Math.LN2 * 7));\n\n    // if 1 byte isn't enough for encoding message length, shift the data to the right\n    pbf.realloc(extraLen);\n    for (var i = pbf.pos - 1; i >= startPos; i--) pbf.buf[i + extraLen] = pbf.buf[i];\n}\n\nfunction writePackedVarint(arr, pbf)   { for (var i = 0; i < arr.length; i++) pbf.writeVarint(arr[i]);   }\nfunction writePackedSVarint(arr, pbf)  { for (var i = 0; i < arr.length; i++) pbf.writeSVarint(arr[i]);  }\nfunction writePackedFloat(arr, pbf)    { for (var i = 0; i < arr.length; i++) pbf.writeFloat(arr[i]);    }\nfunction writePackedDouble(arr, pbf)   { for (var i = 0; i < arr.length; i++) pbf.writeDouble(arr[i]);   }\nfunction writePackedBoolean(arr, pbf)  { for (var i = 0; i < arr.length; i++) pbf.writeBoolean(arr[i]);  }\nfunction writePackedFixed32(arr, pbf)  { for (var i = 0; i < arr.length; i++) pbf.writeFixed32(arr[i]);  }\nfunction writePackedSFixed32(arr, pbf) { for (var i = 0; i < arr.length; i++) pbf.writeSFixed32(arr[i]); }\nfunction writePackedFixed64(arr, pbf)  { for (var i = 0; i < arr.length; i++) pbf.writeFixed64(arr[i]);  }\nfunction writePackedSFixed64(arr, pbf) { for (var i = 0; i < arr.length; i++) pbf.writeSFixed64(arr[i]); }\n\n// Buffer code below from https://github.com/feross/buffer, MIT-licensed\n\nfunction readUInt32(buf, pos) {\n    return ((buf[pos]) |\n        (buf[pos + 1] << 8) |\n        (buf[pos + 2] << 16)) +\n        (buf[pos + 3] * 0x1000000);\n}\n\nfunction writeInt32(buf, val, pos) {\n    buf[pos] = val;\n    buf[pos + 1] = (val >>> 8);\n    buf[pos + 2] = (val >>> 16);\n    buf[pos + 3] = (val >>> 24);\n}\n\nfunction readInt32(buf, pos) {\n    return ((buf[pos]) |\n        (buf[pos + 1] << 8) |\n        (buf[pos + 2] << 16)) +\n        (buf[pos + 3] << 24);\n}\n\nfunction readUtf8(buf, pos, end) {\n    var str = '';\n    var i = pos;\n\n    while (i < end) {\n        var b0 = buf[i];\n        var c = null; // codepoint\n        var bytesPerSequence =\n            b0 > 0xEF ? 4 :\n            b0 > 0xDF ? 3 :\n            b0 > 0xBF ? 2 : 1;\n\n        if (i + bytesPerSequence > end) break;\n\n        var b1, b2, b3;\n\n        if (bytesPerSequence === 1) {\n            if (b0 < 0x80) {\n                c = b0;\n            }\n        } else if (bytesPerSequence === 2) {\n            b1 = buf[i + 1];\n            if ((b1 & 0xC0) === 0x80) {\n                c = (b0 & 0x1F) << 0x6 | (b1 & 0x3F);\n                if (c <= 0x7F) {\n                    c = null;\n                }\n            }\n        } else if (bytesPerSequence === 3) {\n            b1 = buf[i + 1];\n            b2 = buf[i + 2];\n            if ((b1 & 0xC0) === 0x80 && (b2 & 0xC0) === 0x80) {\n                c = (b0 & 0xF) << 0xC | (b1 & 0x3F) << 0x6 | (b2 & 0x3F);\n                if (c <= 0x7FF || (c >= 0xD800 && c <= 0xDFFF)) {\n                    c = null;\n                }\n            }\n        } else if (bytesPerSequence === 4) {\n            b1 = buf[i + 1];\n            b2 = buf[i + 2];\n            b3 = buf[i + 3];\n            if ((b1 & 0xC0) === 0x80 && (b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80) {\n                c = (b0 & 0xF) << 0x12 | (b1 & 0x3F) << 0xC | (b2 & 0x3F) << 0x6 | (b3 & 0x3F);\n                if (c <= 0xFFFF || c >= 0x110000) {\n                    c = null;\n                }\n            }\n        }\n\n        if (c === null) {\n            c = 0xFFFD;\n            bytesPerSequence = 1;\n\n        } else if (c > 0xFFFF) {\n            c -= 0x10000;\n            str += String.fromCharCode(c >>> 10 & 0x3FF | 0xD800);\n            c = 0xDC00 | c & 0x3FF;\n        }\n\n        str += String.fromCharCode(c);\n        i += bytesPerSequence;\n    }\n\n    return str;\n}\n\nfunction readUtf8TextDecoder(buf, pos, end) {\n    return utf8TextDecoder.decode(buf.subarray(pos, end));\n}\n\nfunction writeUtf8(buf, str, pos) {\n    for (var i = 0, c, lead; i < str.length; i++) {\n        c = str.charCodeAt(i); // code point\n\n        if (c > 0xD7FF && c < 0xE000) {\n            if (lead) {\n                if (c < 0xDC00) {\n                    buf[pos++] = 0xEF;\n                    buf[pos++] = 0xBF;\n                    buf[pos++] = 0xBD;\n                    lead = c;\n                    continue;\n                } else {\n                    c = lead - 0xD800 << 10 | c - 0xDC00 | 0x10000;\n                    lead = null;\n                }\n            } else {\n                if (c > 0xDBFF || (i + 1 === str.length)) {\n                    buf[pos++] = 0xEF;\n                    buf[pos++] = 0xBF;\n                    buf[pos++] = 0xBD;\n                } else {\n                    lead = c;\n                }\n                continue;\n            }\n        } else if (lead) {\n            buf[pos++] = 0xEF;\n            buf[pos++] = 0xBF;\n            buf[pos++] = 0xBD;\n            lead = null;\n        }\n\n        if (c < 0x80) {\n            buf[pos++] = c;\n        } else {\n            if (c < 0x800) {\n                buf[pos++] = c >> 0x6 | 0xC0;\n            } else {\n                if (c < 0x10000) {\n                    buf[pos++] = c >> 0xC | 0xE0;\n                } else {\n                    buf[pos++] = c >> 0x12 | 0xF0;\n                    buf[pos++] = c >> 0xC & 0x3F | 0x80;\n                }\n                buf[pos++] = c >> 0x6 & 0x3F | 0x80;\n            }\n            buf[pos++] = c & 0x3F | 0x80;\n        }\n    }\n    return pos;\n}\n","/**\n * @module helpers\n */\n/**\n * Earth Radius used with the Harvesine formula and approximates using a spherical (non-ellipsoid) Earth.\n *\n * @memberof helpers\n * @type {number}\n */\nexport var earthRadius = 6371008.8;\n/**\n * Unit of measurement factors using a spherical (non-ellipsoid) earth radius.\n *\n * @memberof helpers\n * @type {Object}\n */\nexport var factors = {\n    centimeters: earthRadius * 100,\n    centimetres: earthRadius * 100,\n    degrees: earthRadius / 111325,\n    feet: earthRadius * 3.28084,\n    inches: earthRadius * 39.37,\n    kilometers: earthRadius / 1000,\n    kilometres: earthRadius / 1000,\n    meters: earthRadius,\n    metres: earthRadius,\n    miles: earthRadius / 1609.344,\n    millimeters: earthRadius * 1000,\n    millimetres: earthRadius * 1000,\n    nauticalmiles: earthRadius / 1852,\n    radians: 1,\n    yards: earthRadius * 1.0936,\n};\n/**\n * Units of measurement factors based on 1 meter.\n *\n * @memberof helpers\n * @type {Object}\n */\nexport var unitsFactors = {\n    centimeters: 100,\n    centimetres: 100,\n    degrees: 1 / 111325,\n    feet: 3.28084,\n    inches: 39.37,\n    kilometers: 1 / 1000,\n    kilometres: 1 / 1000,\n    meters: 1,\n    metres: 1,\n    miles: 1 / 1609.344,\n    millimeters: 1000,\n    millimetres: 1000,\n    nauticalmiles: 1 / 1852,\n    radians: 1 / earthRadius,\n    yards: 1.0936133,\n};\n/**\n * Area of measurement factors based on 1 square meter.\n *\n * @memberof helpers\n * @type {Object}\n */\nexport var areaFactors = {\n    acres: 0.000247105,\n    centimeters: 10000,\n    centimetres: 10000,\n    feet: 10.763910417,\n    hectares: 0.0001,\n    inches: 1550.003100006,\n    kilometers: 0.000001,\n    kilometres: 0.000001,\n    meters: 1,\n    metres: 1,\n    miles: 3.86e-7,\n    millimeters: 1000000,\n    millimetres: 1000000,\n    yards: 1.195990046,\n};\n/**\n * Wraps a GeoJSON {@link Geometry} in a GeoJSON {@link Feature}.\n *\n * @name feature\n * @param {Geometry} geometry input geometry\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature} a GeoJSON Feature\n * @example\n * var geometry = {\n *   \"type\": \"Point\",\n *   \"coordinates\": [110, 50]\n * };\n *\n * var feature = turf.feature(geometry);\n *\n * //=feature\n */\nexport function feature(geom, properties, options) {\n    if (options === void 0) { options = {}; }\n    var feat = { type: \"Feature\" };\n    if (options.id === 0 || options.id) {\n        feat.id = options.id;\n    }\n    if (options.bbox) {\n        feat.bbox = options.bbox;\n    }\n    feat.properties = properties || {};\n    feat.geometry = geom;\n    return feat;\n}\n/**\n * Creates a GeoJSON {@link Geometry} from a Geometry string type & coordinates.\n * For GeometryCollection type use `helpers.geometryCollection`\n *\n * @name geometry\n * @param {string} type Geometry Type\n * @param {Array<any>} coordinates Coordinates\n * @param {Object} [options={}] Optional Parameters\n * @returns {Geometry} a GeoJSON Geometry\n * @example\n * var type = \"Point\";\n * var coordinates = [110, 50];\n * var geometry = turf.geometry(type, coordinates);\n * // => geometry\n */\nexport function geometry(type, coordinates, _options) {\n    if (_options === void 0) { _options = {}; }\n    switch (type) {\n        case \"Point\":\n            return point(coordinates).geometry;\n        case \"LineString\":\n            return lineString(coordinates).geometry;\n        case \"Polygon\":\n            return polygon(coordinates).geometry;\n        case \"MultiPoint\":\n            return multiPoint(coordinates).geometry;\n        case \"MultiLineString\":\n            return multiLineString(coordinates).geometry;\n        case \"MultiPolygon\":\n            return multiPolygon(coordinates).geometry;\n        default:\n            throw new Error(type + \" is invalid\");\n    }\n}\n/**\n * Creates a {@link Point} {@link Feature} from a Position.\n *\n * @name point\n * @param {Array<number>} coordinates longitude, latitude position (each in decimal degrees)\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Point>} a Point feature\n * @example\n * var point = turf.point([-75.343, 39.984]);\n *\n * //=point\n */\nexport function point(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    if (!coordinates) {\n        throw new Error(\"coordinates is required\");\n    }\n    if (!Array.isArray(coordinates)) {\n        throw new Error(\"coordinates must be an Array\");\n    }\n    if (coordinates.length < 2) {\n        throw new Error(\"coordinates must be at least 2 numbers long\");\n    }\n    if (!isNumber(coordinates[0]) || !isNumber(coordinates[1])) {\n        throw new Error(\"coordinates must contain numbers\");\n    }\n    var geom = {\n        type: \"Point\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Creates a {@link Point} {@link FeatureCollection} from an Array of Point coordinates.\n *\n * @name points\n * @param {Array<Array<number>>} coordinates an array of Points\n * @param {Object} [properties={}] Translate these properties to each Feature\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\n * associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Point>} Point Feature\n * @example\n * var points = turf.points([\n *   [-75, 39],\n *   [-80, 45],\n *   [-78, 50]\n * ]);\n *\n * //=points\n */\nexport function points(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return point(coords, properties);\n    }), options);\n}\n/**\n * Creates a {@link Polygon} {@link Feature} from an Array of LinearRings.\n *\n * @name polygon\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Polygon>} Polygon Feature\n * @example\n * var polygon = turf.polygon([[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]], { name: 'poly1' });\n *\n * //=polygon\n */\nexport function polygon(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    for (var _i = 0, coordinates_1 = coordinates; _i < coordinates_1.length; _i++) {\n        var ring = coordinates_1[_i];\n        if (ring.length < 4) {\n            throw new Error(\"Each LinearRing of a Polygon must have 4 or more Positions.\");\n        }\n        for (var j = 0; j < ring[ring.length - 1].length; j++) {\n            // Check if first point of Polygon contains two numbers\n            if (ring[ring.length - 1][j] !== ring[0][j]) {\n                throw new Error(\"First and last Position are not equivalent.\");\n            }\n        }\n    }\n    var geom = {\n        type: \"Polygon\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Creates a {@link Polygon} {@link FeatureCollection} from an Array of Polygon coordinates.\n *\n * @name polygons\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygon coordinates\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Polygon>} Polygon FeatureCollection\n * @example\n * var polygons = turf.polygons([\n *   [[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]],\n *   [[[-15, 42], [-14, 46], [-12, 41], [-17, 44], [-15, 42]]],\n * ]);\n *\n * //=polygons\n */\nexport function polygons(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return polygon(coords, properties);\n    }), options);\n}\n/**\n * Creates a {@link LineString} {@link Feature} from an Array of Positions.\n *\n * @name lineString\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<LineString>} LineString Feature\n * @example\n * var linestring1 = turf.lineString([[-24, 63], [-23, 60], [-25, 65], [-20, 69]], {name: 'line 1'});\n * var linestring2 = turf.lineString([[-14, 43], [-13, 40], [-15, 45], [-10, 49]], {name: 'line 2'});\n *\n * //=linestring1\n * //=linestring2\n */\nexport function lineString(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    if (coordinates.length < 2) {\n        throw new Error(\"coordinates must be an array of two or more positions\");\n    }\n    var geom = {\n        type: \"LineString\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Creates a {@link LineString} {@link FeatureCollection} from an Array of LineString coordinates.\n *\n * @name lineStrings\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\n * associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<LineString>} LineString FeatureCollection\n * @example\n * var linestrings = turf.lineStrings([\n *   [[-24, 63], [-23, 60], [-25, 65], [-20, 69]],\n *   [[-14, 43], [-13, 40], [-15, 45], [-10, 49]]\n * ]);\n *\n * //=linestrings\n */\nexport function lineStrings(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return lineString(coords, properties);\n    }), options);\n}\n/**\n * Takes one or more {@link Feature|Features} and creates a {@link FeatureCollection}.\n *\n * @name featureCollection\n * @param {Feature[]} features input features\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {FeatureCollection} FeatureCollection of Features\n * @example\n * var locationA = turf.point([-75.343, 39.984], {name: 'Location A'});\n * var locationB = turf.point([-75.833, 39.284], {name: 'Location B'});\n * var locationC = turf.point([-75.534, 39.123], {name: 'Location C'});\n *\n * var collection = turf.featureCollection([\n *   locationA,\n *   locationB,\n *   locationC\n * ]);\n *\n * //=collection\n */\nexport function featureCollection(features, options) {\n    if (options === void 0) { options = {}; }\n    var fc = { type: \"FeatureCollection\" };\n    if (options.id) {\n        fc.id = options.id;\n    }\n    if (options.bbox) {\n        fc.bbox = options.bbox;\n    }\n    fc.features = features;\n    return fc;\n}\n/**\n * Creates a {@link Feature<MultiLineString>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiLineString\n * @param {Array<Array<Array<number>>>} coordinates an array of LineStrings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiLineString>} a MultiLineString feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiLine = turf.multiLineString([[[0,0],[10,10]]]);\n *\n * //=multiLine\n */\nexport function multiLineString(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiLineString\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Creates a {@link Feature<MultiPoint>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPoint\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPoint>} a MultiPoint feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPt = turf.multiPoint([[0,0],[10,10]]);\n *\n * //=multiPt\n */\nexport function multiPoint(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiPoint\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Creates a {@link Feature<MultiPolygon>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPolygon\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygons\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPolygon>} a multipolygon feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPoly = turf.multiPolygon([[[[0,0],[0,10],[10,10],[10,0],[0,0]]]]);\n *\n * //=multiPoly\n *\n */\nexport function multiPolygon(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiPolygon\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Creates a {@link Feature<GeometryCollection>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name geometryCollection\n * @param {Array<Geometry>} geometries an array of GeoJSON Geometries\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<GeometryCollection>} a GeoJSON GeometryCollection Feature\n * @example\n * var pt = turf.geometry(\"Point\", [100, 0]);\n * var line = turf.geometry(\"LineString\", [[101, 0], [102, 1]]);\n * var collection = turf.geometryCollection([pt, line]);\n *\n * // => collection\n */\nexport function geometryCollection(geometries, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"GeometryCollection\",\n        geometries: geometries,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Round number to precision\n *\n * @param {number} num Number\n * @param {number} [precision=0] Precision\n * @returns {number} rounded number\n * @example\n * turf.round(120.4321)\n * //=120\n *\n * turf.round(120.4321, 2)\n * //=120.43\n */\nexport function round(num, precision) {\n    if (precision === void 0) { precision = 0; }\n    if (precision && !(precision >= 0)) {\n        throw new Error(\"precision must be a positive number\");\n    }\n    var multiplier = Math.pow(10, precision || 0);\n    return Math.round(num * multiplier) / multiplier;\n}\n/**\n * Convert a distance measurement (assuming a spherical Earth) from radians to a more friendly unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name radiansToLength\n * @param {number} radians in radians across the sphere\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} distance\n */\nexport function radiansToLength(radians, units) {\n    if (units === void 0) { units = \"kilometers\"; }\n    var factor = factors[units];\n    if (!factor) {\n        throw new Error(units + \" units is invalid\");\n    }\n    return radians * factor;\n}\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into radians\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name lengthToRadians\n * @param {number} distance in real units\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} radians\n */\nexport function lengthToRadians(distance, units) {\n    if (units === void 0) { units = \"kilometers\"; }\n    var factor = factors[units];\n    if (!factor) {\n        throw new Error(units + \" units is invalid\");\n    }\n    return distance / factor;\n}\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into degrees\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, centimeters, kilometres, feet\n *\n * @name lengthToDegrees\n * @param {number} distance in real units\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} degrees\n */\nexport function lengthToDegrees(distance, units) {\n    return radiansToDegrees(lengthToRadians(distance, units));\n}\n/**\n * Converts any bearing angle from the north line direction (positive clockwise)\n * and returns an angle between 0-360 degrees (positive clockwise), 0 being the north line\n *\n * @name bearingToAzimuth\n * @param {number} bearing angle, between -180 and +180 degrees\n * @returns {number} angle between 0 and 360 degrees\n */\nexport function bearingToAzimuth(bearing) {\n    var angle = bearing % 360;\n    if (angle < 0) {\n        angle += 360;\n    }\n    return angle;\n}\n/**\n * Converts an angle in radians to degrees\n *\n * @name radiansToDegrees\n * @param {number} radians angle in radians\n * @returns {number} degrees between 0 and 360 degrees\n */\nexport function radiansToDegrees(radians) {\n    var degrees = radians % (2 * Math.PI);\n    return (degrees * 180) / Math.PI;\n}\n/**\n * Converts an angle in degrees to radians\n *\n * @name degreesToRadians\n * @param {number} degrees angle between 0 and 360 degrees\n * @returns {number} angle in radians\n */\nexport function degreesToRadians(degrees) {\n    var radians = degrees % 360;\n    return (radians * Math.PI) / 180;\n}\n/**\n * Converts a length to the requested unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @param {number} length to be converted\n * @param {Units} [originalUnit=\"kilometers\"] of the length\n * @param {Units} [finalUnit=\"kilometers\"] returned unit\n * @returns {number} the converted length\n */\nexport function convertLength(length, originalUnit, finalUnit) {\n    if (originalUnit === void 0) { originalUnit = \"kilometers\"; }\n    if (finalUnit === void 0) { finalUnit = \"kilometers\"; }\n    if (!(length >= 0)) {\n        throw new Error(\"length must be a positive number\");\n    }\n    return radiansToLength(lengthToRadians(length, originalUnit), finalUnit);\n}\n/**\n * Converts a area to the requested unit.\n * Valid units: kilometers, kilometres, meters, metres, centimetres, millimeters, acres, miles, yards, feet, inches, hectares\n * @param {number} area to be converted\n * @param {Units} [originalUnit=\"meters\"] of the distance\n * @param {Units} [finalUnit=\"kilometers\"] returned unit\n * @returns {number} the converted area\n */\nexport function convertArea(area, originalUnit, finalUnit) {\n    if (originalUnit === void 0) { originalUnit = \"meters\"; }\n    if (finalUnit === void 0) { finalUnit = \"kilometers\"; }\n    if (!(area >= 0)) {\n        throw new Error(\"area must be a positive number\");\n    }\n    var startFactor = areaFactors[originalUnit];\n    if (!startFactor) {\n        throw new Error(\"invalid original units\");\n    }\n    var finalFactor = areaFactors[finalUnit];\n    if (!finalFactor) {\n        throw new Error(\"invalid final units\");\n    }\n    return (area / startFactor) * finalFactor;\n}\n/**\n * isNumber\n *\n * @param {*} num Number to validate\n * @returns {boolean} true/false\n * @example\n * turf.isNumber(123)\n * //=true\n * turf.isNumber('foo')\n * //=false\n */\nexport function isNumber(num) {\n    return !isNaN(num) && num !== null && !Array.isArray(num);\n}\n/**\n * isObject\n *\n * @param {*} input variable to validate\n * @returns {boolean} true/false\n * @example\n * turf.isObject({elevation: 10})\n * //=true\n * turf.isObject('foo')\n * //=false\n */\nexport function isObject(input) {\n    return !!input && input.constructor === Object;\n}\n/**\n * Validate BBox\n *\n * @private\n * @param {Array<number>} bbox BBox to validate\n * @returns {void}\n * @throws Error if BBox is not valid\n * @example\n * validateBBox([-180, -40, 110, 50])\n * //=OK\n * validateBBox([-180, -40])\n * //=Error\n * validateBBox('Foo')\n * //=Error\n * validateBBox(5)\n * //=Error\n * validateBBox(null)\n * //=Error\n * validateBBox(undefined)\n * //=Error\n */\nexport function validateBBox(bbox) {\n    if (!bbox) {\n        throw new Error(\"bbox is required\");\n    }\n    if (!Array.isArray(bbox)) {\n        throw new Error(\"bbox must be an Array\");\n    }\n    if (bbox.length !== 4 && bbox.length !== 6) {\n        throw new Error(\"bbox must be an Array of 4 or 6 numbers\");\n    }\n    bbox.forEach(function (num) {\n        if (!isNumber(num)) {\n            throw new Error(\"bbox must only contain numbers\");\n        }\n    });\n}\n/**\n * Validate Id\n *\n * @private\n * @param {string|number} id Id to validate\n * @returns {void}\n * @throws Error if Id is not valid\n * @example\n * validateId([-180, -40, 110, 50])\n * //=Error\n * validateId([-180, -40])\n * //=Error\n * validateId('Foo')\n * //=OK\n * validateId(5)\n * //=OK\n * validateId(null)\n * //=Error\n * validateId(undefined)\n * //=Error\n */\nexport function validateId(id) {\n    if (!id) {\n        throw new Error(\"id is required\");\n    }\n    if ([\"string\", \"number\"].indexOf(typeof id) === -1) {\n        throw new Error(\"id must be a number or a string\");\n    }\n}\n","import { isNumber, } from \"@turf/helpers\";\n/**\n * Unwrap a coordinate from a Point Feature, Geometry or a single coordinate.\n *\n * @name getCoord\n * @param {Array<number>|Geometry<Point>|Feature<Point>} coord GeoJSON Point or an Array of numbers\n * @returns {Array<number>} coordinates\n * @example\n * var pt = turf.point([10, 10]);\n *\n * var coord = turf.getCoord(pt);\n * //= [10, 10]\n */\nexport function getCoord(coord) {\n    if (!coord) {\n        throw new Error(\"coord is required\");\n    }\n    if (!Array.isArray(coord)) {\n        if (coord.type === \"Feature\" &&\n            coord.geometry !== null &&\n            coord.geometry.type === \"Point\") {\n            return coord.geometry.coordinates;\n        }\n        if (coord.type === \"Point\") {\n            return coord.coordinates;\n        }\n    }\n    if (Array.isArray(coord) &&\n        coord.length >= 2 &&\n        !Array.isArray(coord[0]) &&\n        !Array.isArray(coord[1])) {\n        return coord;\n    }\n    throw new Error(\"coord must be GeoJSON Point or an Array of numbers\");\n}\n/**\n * Unwrap coordinates from a Feature, Geometry Object or an Array\n *\n * @name getCoords\n * @param {Array<any>|Geometry|Feature} coords Feature, Geometry Object or an Array\n * @returns {Array<any>} coordinates\n * @example\n * var poly = turf.polygon([[[119.32, -8.7], [119.55, -8.69], [119.51, -8.54], [119.32, -8.7]]]);\n *\n * var coords = turf.getCoords(poly);\n * //= [[[119.32, -8.7], [119.55, -8.69], [119.51, -8.54], [119.32, -8.7]]]\n */\nexport function getCoords(coords) {\n    if (Array.isArray(coords)) {\n        return coords;\n    }\n    // Feature\n    if (coords.type === \"Feature\") {\n        if (coords.geometry !== null) {\n            return coords.geometry.coordinates;\n        }\n    }\n    else {\n        // Geometry\n        if (coords.coordinates) {\n            return coords.coordinates;\n        }\n    }\n    throw new Error(\"coords must be GeoJSON Feature, Geometry Object or an Array\");\n}\n/**\n * Checks if coordinates contains a number\n *\n * @name containsNumber\n * @param {Array<any>} coordinates GeoJSON Coordinates\n * @returns {boolean} true if Array contains a number\n */\nexport function containsNumber(coordinates) {\n    if (coordinates.length > 1 &&\n        isNumber(coordinates[0]) &&\n        isNumber(coordinates[1])) {\n        return true;\n    }\n    if (Array.isArray(coordinates[0]) && coordinates[0].length) {\n        return containsNumber(coordinates[0]);\n    }\n    throw new Error(\"coordinates must only contain numbers\");\n}\n/**\n * Enforce expectations about types of GeoJSON objects for Turf.\n *\n * @name geojsonType\n * @param {GeoJSON} value any GeoJSON object\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} if value is not the expected type.\n */\nexport function geojsonType(value, type, name) {\n    if (!type || !name) {\n        throw new Error(\"type and name required\");\n    }\n    if (!value || value.type !== type) {\n        throw new Error(\"Invalid input to \" +\n            name +\n            \": must be a \" +\n            type +\n            \", given \" +\n            value.type);\n    }\n}\n/**\n * Enforce expectations about types of {@link Feature} inputs for Turf.\n * Internally this uses {@link geojsonType} to judge geometry types.\n *\n * @name featureOf\n * @param {Feature} feature a feature with an expected geometry type\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} error if value is not the expected type.\n */\nexport function featureOf(feature, type, name) {\n    if (!feature) {\n        throw new Error(\"No feature passed\");\n    }\n    if (!name) {\n        throw new Error(\".featureOf() requires a name\");\n    }\n    if (!feature || feature.type !== \"Feature\" || !feature.geometry) {\n        throw new Error(\"Invalid input to \" + name + \", Feature with geometry required\");\n    }\n    if (!feature.geometry || feature.geometry.type !== type) {\n        throw new Error(\"Invalid input to \" +\n            name +\n            \": must be a \" +\n            type +\n            \", given \" +\n            feature.geometry.type);\n    }\n}\n/**\n * Enforce expectations about types of {@link FeatureCollection} inputs for Turf.\n * Internally this uses {@link geojsonType} to judge geometry types.\n *\n * @name collectionOf\n * @param {FeatureCollection} featureCollection a FeatureCollection for which features will be judged\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} if value is not the expected type.\n */\nexport function collectionOf(featureCollection, type, name) {\n    if (!featureCollection) {\n        throw new Error(\"No featureCollection passed\");\n    }\n    if (!name) {\n        throw new Error(\".collectionOf() requires a name\");\n    }\n    if (!featureCollection || featureCollection.type !== \"FeatureCollection\") {\n        throw new Error(\"Invalid input to \" + name + \", FeatureCollection required\");\n    }\n    for (var _i = 0, _a = featureCollection.features; _i < _a.length; _i++) {\n        var feature = _a[_i];\n        if (!feature || feature.type !== \"Feature\" || !feature.geometry) {\n            throw new Error(\"Invalid input to \" + name + \", Feature with geometry required\");\n        }\n        if (!feature.geometry || feature.geometry.type !== type) {\n            throw new Error(\"Invalid input to \" +\n                name +\n                \": must be a \" +\n                type +\n                \", given \" +\n                feature.geometry.type);\n        }\n    }\n}\n/**\n * Get Geometry from Feature or Geometry Object\n *\n * @param {Feature|Geometry} geojson GeoJSON Feature or Geometry Object\n * @returns {Geometry|null} GeoJSON Geometry Object\n * @throws {Error} if geojson is not a Feature or Geometry Object\n * @example\n * var point = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"Point\",\n *     \"coordinates\": [110, 40]\n *   }\n * }\n * var geom = turf.getGeom(point)\n * //={\"type\": \"Point\", \"coordinates\": [110, 40]}\n */\nexport function getGeom(geojson) {\n    if (geojson.type === \"Feature\") {\n        return geojson.geometry;\n    }\n    return geojson;\n}\n/**\n * Get GeoJSON object's type, Geometry type is prioritize.\n *\n * @param {GeoJSON} geojson GeoJSON object\n * @param {string} [name=\"geojson\"] name of the variable to display in error message (unused)\n * @returns {string} GeoJSON type\n * @example\n * var point = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"Point\",\n *     \"coordinates\": [110, 40]\n *   }\n * }\n * var geom = turf.getType(point)\n * //=\"Point\"\n */\nexport function getType(geojson, _name) {\n    if (geojson.type === \"FeatureCollection\") {\n        return \"FeatureCollection\";\n    }\n    if (geojson.type === \"GeometryCollection\") {\n        return \"GeometryCollection\";\n    }\n    if (geojson.type === \"Feature\" && geojson.geometry !== null) {\n        return geojson.geometry.type;\n    }\n    return geojson.type;\n}\n","import { getCoord, getGeom } from \"@turf/invariant\";\n// http://en.wikipedia.org/wiki/Even%E2%80%93odd_rule\n// modified from: https://github.com/substack/point-in-polygon/blob/master/index.js\n// which was modified from http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n/**\n * Takes a {@link Point} and a {@link Polygon} or {@link MultiPolygon} and determines if the point\n * resides inside the polygon. The polygon can be convex or concave. The function accounts for holes.\n *\n * @name booleanPointInPolygon\n * @param {Coord} point input point\n * @param {Feature<Polygon|MultiPolygon>} polygon input polygon or multipolygon\n * @param {Object} [options={}] Optional parameters\n * @param {boolean} [options.ignoreBoundary=false] True if polygon boundary should be ignored when determining if\n * the point is inside the polygon otherwise false.\n * @returns {boolean} `true` if the Point is inside the Polygon; `false` if the Point is not inside the Polygon\n * @example\n * var pt = turf.point([-77, 44]);\n * var poly = turf.polygon([[\n *   [-81, 41],\n *   [-81, 47],\n *   [-72, 47],\n *   [-72, 41],\n *   [-81, 41]\n * ]]);\n *\n * turf.booleanPointInPolygon(pt, poly);\n * //= true\n */\nexport default function booleanPointInPolygon(point, polygon, options) {\n    if (options === void 0) { options = {}; }\n    // validation\n    if (!point) {\n        throw new Error(\"point is required\");\n    }\n    if (!polygon) {\n        throw new Error(\"polygon is required\");\n    }\n    var pt = getCoord(point);\n    var geom = getGeom(polygon);\n    var type = geom.type;\n    var bbox = polygon.bbox;\n    var polys = geom.coordinates;\n    // Quick elimination if point is not inside bbox\n    if (bbox && inBBox(pt, bbox) === false) {\n        return false;\n    }\n    // normalize to multipolygon\n    if (type === \"Polygon\") {\n        polys = [polys];\n    }\n    var insidePoly = false;\n    for (var i = 0; i < polys.length && !insidePoly; i++) {\n        // check if it is in the outer ring first\n        if (inRing(pt, polys[i][0], options.ignoreBoundary)) {\n            var inHole = false;\n            var k = 1;\n            // check for the point in any of the holes\n            while (k < polys[i].length && !inHole) {\n                if (inRing(pt, polys[i][k], !options.ignoreBoundary)) {\n                    inHole = true;\n                }\n                k++;\n            }\n            if (!inHole) {\n                insidePoly = true;\n            }\n        }\n    }\n    return insidePoly;\n}\n/**\n * inRing\n *\n * @private\n * @param {Array<number>} pt [x,y]\n * @param {Array<Array<number>>} ring [[x,y], [x,y],..]\n * @param {boolean} ignoreBoundary ignoreBoundary\n * @returns {boolean} inRing\n */\nfunction inRing(pt, ring, ignoreBoundary) {\n    var isInside = false;\n    if (ring[0][0] === ring[ring.length - 1][0] &&\n        ring[0][1] === ring[ring.length - 1][1]) {\n        ring = ring.slice(0, ring.length - 1);\n    }\n    for (var i = 0, j = ring.length - 1; i < ring.length; j = i++) {\n        var xi = ring[i][0];\n        var yi = ring[i][1];\n        var xj = ring[j][0];\n        var yj = ring[j][1];\n        var onBoundary = pt[1] * (xi - xj) + yi * (xj - pt[0]) + yj * (pt[0] - xi) === 0 &&\n            (xi - pt[0]) * (xj - pt[0]) <= 0 &&\n            (yi - pt[1]) * (yj - pt[1]) <= 0;\n        if (onBoundary) {\n            return !ignoreBoundary;\n        }\n        var intersect = yi > pt[1] !== yj > pt[1] &&\n            pt[0] < ((xj - xi) * (pt[1] - yi)) / (yj - yi) + xi;\n        if (intersect) {\n            isInside = !isInside;\n        }\n    }\n    return isInside;\n}\n/**\n * inBBox\n *\n * @private\n * @param {Position} pt point [x,y]\n * @param {BBox} bbox BBox [west, south, east, north]\n * @returns {boolean} true/false if point is inside BBox\n */\nfunction inBBox(pt, bbox) {\n    return (bbox[0] <= pt[0] && bbox[1] <= pt[1] && bbox[2] >= pt[0] && bbox[3] >= pt[1]);\n}\n","import { feature, lineString, isObject, point } from '@turf/helpers';\n\n/**\n * Callback for coordEach\n *\n * @callback coordEachCallback\n * @param {Array<number>} currentCoord The current coordinate being processed.\n * @param {number} coordIndex The current index of the coordinate being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n */\n\n/**\n * Iterate over coordinates in any GeoJSON object, similar to Array.forEach()\n *\n * @name coordEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentCoord, coordIndex, featureIndex, multiFeatureIndex)\n * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.coordEach(features, function (currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=currentCoord\n *   //=coordIndex\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n * });\n */\nfunction coordEach(geojson, callback, excludeWrapCoord) {\n  // Handles null Geometry -- Skips this GeoJSON\n  if (geojson === null) return;\n  var j,\n    k,\n    l,\n    geometry,\n    stopG,\n    coords,\n    geometryMaybeCollection,\n    wrapShrink = 0,\n    coordIndex = 0,\n    isGeometryCollection,\n    type = geojson.type,\n    isFeatureCollection = type === \"FeatureCollection\",\n    isFeature = type === \"Feature\",\n    stop = isFeatureCollection ? geojson.features.length : 1;\n\n  // This logic may look a little weird. The reason why it is that way\n  // is because it's trying to be fast. GeoJSON supports multiple kinds\n  // of objects at its root: FeatureCollection, Features, Geometries.\n  // This function has the responsibility of handling all of them, and that\n  // means that some of the `for` loops you see below actually just don't apply\n  // to certain inputs. For instance, if you give this just a\n  // Point geometry, then both loops are short-circuited and all we do\n  // is gradually rename the input until it's called 'geometry'.\n  //\n  // This also aims to allocate as few resources as possible: just a\n  // few numbers and booleans, rather than any temporary arrays as would\n  // be required with the normalization approach.\n  for (var featureIndex = 0; featureIndex < stop; featureIndex++) {\n    geometryMaybeCollection = isFeatureCollection\n      ? geojson.features[featureIndex].geometry\n      : isFeature\n      ? geojson.geometry\n      : geojson;\n    isGeometryCollection = geometryMaybeCollection\n      ? geometryMaybeCollection.type === \"GeometryCollection\"\n      : false;\n    stopG = isGeometryCollection\n      ? geometryMaybeCollection.geometries.length\n      : 1;\n\n    for (var geomIndex = 0; geomIndex < stopG; geomIndex++) {\n      var multiFeatureIndex = 0;\n      var geometryIndex = 0;\n      geometry = isGeometryCollection\n        ? geometryMaybeCollection.geometries[geomIndex]\n        : geometryMaybeCollection;\n\n      // Handles null Geometry -- Skips this geometry\n      if (geometry === null) continue;\n      coords = geometry.coordinates;\n      var geomType = geometry.type;\n\n      wrapShrink =\n        excludeWrapCoord &&\n        (geomType === \"Polygon\" || geomType === \"MultiPolygon\")\n          ? 1\n          : 0;\n\n      switch (geomType) {\n        case null:\n          break;\n        case \"Point\":\n          if (\n            callback(\n              coords,\n              coordIndex,\n              featureIndex,\n              multiFeatureIndex,\n              geometryIndex\n            ) === false\n          )\n            return false;\n          coordIndex++;\n          multiFeatureIndex++;\n          break;\n        case \"LineString\":\n        case \"MultiPoint\":\n          for (j = 0; j < coords.length; j++) {\n            if (\n              callback(\n                coords[j],\n                coordIndex,\n                featureIndex,\n                multiFeatureIndex,\n                geometryIndex\n              ) === false\n            )\n              return false;\n            coordIndex++;\n            if (geomType === \"MultiPoint\") multiFeatureIndex++;\n          }\n          if (geomType === \"LineString\") multiFeatureIndex++;\n          break;\n        case \"Polygon\":\n        case \"MultiLineString\":\n          for (j = 0; j < coords.length; j++) {\n            for (k = 0; k < coords[j].length - wrapShrink; k++) {\n              if (\n                callback(\n                  coords[j][k],\n                  coordIndex,\n                  featureIndex,\n                  multiFeatureIndex,\n                  geometryIndex\n                ) === false\n              )\n                return false;\n              coordIndex++;\n            }\n            if (geomType === \"MultiLineString\") multiFeatureIndex++;\n            if (geomType === \"Polygon\") geometryIndex++;\n          }\n          if (geomType === \"Polygon\") multiFeatureIndex++;\n          break;\n        case \"MultiPolygon\":\n          for (j = 0; j < coords.length; j++) {\n            geometryIndex = 0;\n            for (k = 0; k < coords[j].length; k++) {\n              for (l = 0; l < coords[j][k].length - wrapShrink; l++) {\n                if (\n                  callback(\n                    coords[j][k][l],\n                    coordIndex,\n                    featureIndex,\n                    multiFeatureIndex,\n                    geometryIndex\n                  ) === false\n                )\n                  return false;\n                coordIndex++;\n              }\n              geometryIndex++;\n            }\n            multiFeatureIndex++;\n          }\n          break;\n        case \"GeometryCollection\":\n          for (j = 0; j < geometry.geometries.length; j++)\n            if (\n              coordEach(geometry.geometries[j], callback, excludeWrapCoord) ===\n              false\n            )\n              return false;\n          break;\n        default:\n          throw new Error(\"Unknown Geometry Type\");\n      }\n    }\n  }\n}\n\n/**\n * Callback for coordReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback coordReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Array<number>} currentCoord The current coordinate being processed.\n * @param {number} coordIndex The current index of the coordinate being processed.\n * Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n */\n\n/**\n * Reduce coordinates in any GeoJSON object, similar to Array.reduce()\n *\n * @name coordReduce\n * @param {FeatureCollection|Geometry|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentCoord, coordIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.coordReduce(features, function (previousValue, currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=previousValue\n *   //=currentCoord\n *   //=coordIndex\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   return currentCoord;\n * });\n */\nfunction coordReduce(geojson, callback, initialValue, excludeWrapCoord) {\n  var previousValue = initialValue;\n  coordEach(\n    geojson,\n    function (\n      currentCoord,\n      coordIndex,\n      featureIndex,\n      multiFeatureIndex,\n      geometryIndex\n    ) {\n      if (coordIndex === 0 && initialValue === undefined)\n        previousValue = currentCoord;\n      else\n        previousValue = callback(\n          previousValue,\n          currentCoord,\n          coordIndex,\n          featureIndex,\n          multiFeatureIndex,\n          geometryIndex\n        );\n    },\n    excludeWrapCoord\n  );\n  return previousValue;\n}\n\n/**\n * Callback for propEach\n *\n * @callback propEachCallback\n * @param {Object} currentProperties The current Properties being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Iterate over properties in any GeoJSON object, similar to Array.forEach()\n *\n * @name propEach\n * @param {FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentProperties, featureIndex)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.propEach(features, function (currentProperties, featureIndex) {\n *   //=currentProperties\n *   //=featureIndex\n * });\n */\nfunction propEach(geojson, callback) {\n  var i;\n  switch (geojson.type) {\n    case \"FeatureCollection\":\n      for (i = 0; i < geojson.features.length; i++) {\n        if (callback(geojson.features[i].properties, i) === false) break;\n      }\n      break;\n    case \"Feature\":\n      callback(geojson.properties, 0);\n      break;\n  }\n}\n\n/**\n * Callback for propReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback propReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {*} currentProperties The current Properties being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Reduce properties in any GeoJSON object into a single value,\n * similar to how Array.reduce works. However, in this case we lazily run\n * the reduction, so an array of all properties is unnecessary.\n *\n * @name propReduce\n * @param {FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentProperties, featureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.propReduce(features, function (previousValue, currentProperties, featureIndex) {\n *   //=previousValue\n *   //=currentProperties\n *   //=featureIndex\n *   return currentProperties\n * });\n */\nfunction propReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  propEach(geojson, function (currentProperties, featureIndex) {\n    if (featureIndex === 0 && initialValue === undefined)\n      previousValue = currentProperties;\n    else\n      previousValue = callback(previousValue, currentProperties, featureIndex);\n  });\n  return previousValue;\n}\n\n/**\n * Callback for featureEach\n *\n * @callback featureEachCallback\n * @param {Feature<any>} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Iterate over features in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @name featureEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentFeature, featureIndex)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {foo: 'bar'}),\n *   turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.featureEach(features, function (currentFeature, featureIndex) {\n *   //=currentFeature\n *   //=featureIndex\n * });\n */\nfunction featureEach(geojson, callback) {\n  if (geojson.type === \"Feature\") {\n    callback(geojson, 0);\n  } else if (geojson.type === \"FeatureCollection\") {\n    for (var i = 0; i < geojson.features.length; i++) {\n      if (callback(geojson.features[i], i) === false) break;\n    }\n  }\n}\n\n/**\n * Callback for featureReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback featureReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Reduce features in any GeoJSON object, similar to Array.reduce().\n *\n * @name featureReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.featureReduce(features, function (previousValue, currentFeature, featureIndex) {\n *   //=previousValue\n *   //=currentFeature\n *   //=featureIndex\n *   return currentFeature\n * });\n */\nfunction featureReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  featureEach(geojson, function (currentFeature, featureIndex) {\n    if (featureIndex === 0 && initialValue === undefined)\n      previousValue = currentFeature;\n    else previousValue = callback(previousValue, currentFeature, featureIndex);\n  });\n  return previousValue;\n}\n\n/**\n * Get all coordinates from any GeoJSON object.\n *\n * @name coordAll\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @returns {Array<Array<number>>} coordinate position array\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {foo: 'bar'}),\n *   turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * var coords = turf.coordAll(features);\n * //= [[26, 37], [36, 53]]\n */\nfunction coordAll(geojson) {\n  var coords = [];\n  coordEach(geojson, function (coord) {\n    coords.push(coord);\n  });\n  return coords;\n}\n\n/**\n * Callback for geomEach\n *\n * @callback geomEachCallback\n * @param {Geometry} currentGeometry The current Geometry being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {Object} featureProperties The current Feature Properties being processed.\n * @param {Array<number>} featureBBox The current Feature BBox being processed.\n * @param {number|string} featureId The current Feature Id being processed.\n */\n\n/**\n * Iterate over each geometry in any GeoJSON object, similar to Array.forEach()\n *\n * @name geomEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.geomEach(features, function (currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n *   //=currentGeometry\n *   //=featureIndex\n *   //=featureProperties\n *   //=featureBBox\n *   //=featureId\n * });\n */\nfunction geomEach(geojson, callback) {\n  var i,\n    j,\n    g,\n    geometry,\n    stopG,\n    geometryMaybeCollection,\n    isGeometryCollection,\n    featureProperties,\n    featureBBox,\n    featureId,\n    featureIndex = 0,\n    isFeatureCollection = geojson.type === \"FeatureCollection\",\n    isFeature = geojson.type === \"Feature\",\n    stop = isFeatureCollection ? geojson.features.length : 1;\n\n  // This logic may look a little weird. The reason why it is that way\n  // is because it's trying to be fast. GeoJSON supports multiple kinds\n  // of objects at its root: FeatureCollection, Features, Geometries.\n  // This function has the responsibility of handling all of them, and that\n  // means that some of the `for` loops you see below actually just don't apply\n  // to certain inputs. For instance, if you give this just a\n  // Point geometry, then both loops are short-circuited and all we do\n  // is gradually rename the input until it's called 'geometry'.\n  //\n  // This also aims to allocate as few resources as possible: just a\n  // few numbers and booleans, rather than any temporary arrays as would\n  // be required with the normalization approach.\n  for (i = 0; i < stop; i++) {\n    geometryMaybeCollection = isFeatureCollection\n      ? geojson.features[i].geometry\n      : isFeature\n      ? geojson.geometry\n      : geojson;\n    featureProperties = isFeatureCollection\n      ? geojson.features[i].properties\n      : isFeature\n      ? geojson.properties\n      : {};\n    featureBBox = isFeatureCollection\n      ? geojson.features[i].bbox\n      : isFeature\n      ? geojson.bbox\n      : undefined;\n    featureId = isFeatureCollection\n      ? geojson.features[i].id\n      : isFeature\n      ? geojson.id\n      : undefined;\n    isGeometryCollection = geometryMaybeCollection\n      ? geometryMaybeCollection.type === \"GeometryCollection\"\n      : false;\n    stopG = isGeometryCollection\n      ? geometryMaybeCollection.geometries.length\n      : 1;\n\n    for (g = 0; g < stopG; g++) {\n      geometry = isGeometryCollection\n        ? geometryMaybeCollection.geometries[g]\n        : geometryMaybeCollection;\n\n      // Handle null Geometry\n      if (geometry === null) {\n        if (\n          callback(\n            null,\n            featureIndex,\n            featureProperties,\n            featureBBox,\n            featureId\n          ) === false\n        )\n          return false;\n        continue;\n      }\n      switch (geometry.type) {\n        case \"Point\":\n        case \"LineString\":\n        case \"MultiPoint\":\n        case \"Polygon\":\n        case \"MultiLineString\":\n        case \"MultiPolygon\": {\n          if (\n            callback(\n              geometry,\n              featureIndex,\n              featureProperties,\n              featureBBox,\n              featureId\n            ) === false\n          )\n            return false;\n          break;\n        }\n        case \"GeometryCollection\": {\n          for (j = 0; j < geometry.geometries.length; j++) {\n            if (\n              callback(\n                geometry.geometries[j],\n                featureIndex,\n                featureProperties,\n                featureBBox,\n                featureId\n              ) === false\n            )\n              return false;\n          }\n          break;\n        }\n        default:\n          throw new Error(\"Unknown Geometry Type\");\n      }\n    }\n    // Only increase `featureIndex` per each feature\n    featureIndex++;\n  }\n}\n\n/**\n * Callback for geomReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback geomReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Geometry} currentGeometry The current Geometry being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {Object} featureProperties The current Feature Properties being processed.\n * @param {Array<number>} featureBBox The current Feature BBox being processed.\n * @param {number|string} featureId The current Feature Id being processed.\n */\n\n/**\n * Reduce geometry in any GeoJSON object, similar to Array.reduce().\n *\n * @name geomReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.geomReduce(features, function (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n *   //=previousValue\n *   //=currentGeometry\n *   //=featureIndex\n *   //=featureProperties\n *   //=featureBBox\n *   //=featureId\n *   return currentGeometry\n * });\n */\nfunction geomReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  geomEach(\n    geojson,\n    function (\n      currentGeometry,\n      featureIndex,\n      featureProperties,\n      featureBBox,\n      featureId\n    ) {\n      if (featureIndex === 0 && initialValue === undefined)\n        previousValue = currentGeometry;\n      else\n        previousValue = callback(\n          previousValue,\n          currentGeometry,\n          featureIndex,\n          featureProperties,\n          featureBBox,\n          featureId\n        );\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Callback for flattenEach\n *\n * @callback flattenEachCallback\n * @param {Feature} currentFeature The current flattened feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n */\n\n/**\n * Iterate over flattened features in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @name flattenEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentFeature, featureIndex, multiFeatureIndex)\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n * ]);\n *\n * turf.flattenEach(features, function (currentFeature, featureIndex, multiFeatureIndex) {\n *   //=currentFeature\n *   //=featureIndex\n *   //=multiFeatureIndex\n * });\n */\nfunction flattenEach(geojson, callback) {\n  geomEach(geojson, function (geometry, featureIndex, properties, bbox, id) {\n    // Callback for single geometry\n    var type = geometry === null ? null : geometry.type;\n    switch (type) {\n      case null:\n      case \"Point\":\n      case \"LineString\":\n      case \"Polygon\":\n        if (\n          callback(\n            feature(geometry, properties, { bbox: bbox, id: id }),\n            featureIndex,\n            0\n          ) === false\n        )\n          return false;\n        return;\n    }\n\n    var geomType;\n\n    // Callback for multi-geometry\n    switch (type) {\n      case \"MultiPoint\":\n        geomType = \"Point\";\n        break;\n      case \"MultiLineString\":\n        geomType = \"LineString\";\n        break;\n      case \"MultiPolygon\":\n        geomType = \"Polygon\";\n        break;\n    }\n\n    for (\n      var multiFeatureIndex = 0;\n      multiFeatureIndex < geometry.coordinates.length;\n      multiFeatureIndex++\n    ) {\n      var coordinate = geometry.coordinates[multiFeatureIndex];\n      var geom = {\n        type: geomType,\n        coordinates: coordinate,\n      };\n      if (\n        callback(feature(geom, properties), featureIndex, multiFeatureIndex) ===\n        false\n      )\n        return false;\n    }\n  });\n}\n\n/**\n * Callback for flattenReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback flattenReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n */\n\n/**\n * Reduce flattened features in any GeoJSON object, similar to Array.reduce().\n *\n * @name flattenReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex, multiFeatureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n * ]);\n *\n * turf.flattenReduce(features, function (previousValue, currentFeature, featureIndex, multiFeatureIndex) {\n *   //=previousValue\n *   //=currentFeature\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   return currentFeature\n * });\n */\nfunction flattenReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  flattenEach(\n    geojson,\n    function (currentFeature, featureIndex, multiFeatureIndex) {\n      if (\n        featureIndex === 0 &&\n        multiFeatureIndex === 0 &&\n        initialValue === undefined\n      )\n        previousValue = currentFeature;\n      else\n        previousValue = callback(\n          previousValue,\n          currentFeature,\n          featureIndex,\n          multiFeatureIndex\n        );\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Callback for segmentEach\n *\n * @callback segmentEachCallback\n * @param {Feature<LineString>} currentSegment The current Segment being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n * @param {number} segmentIndex The current index of the Segment being processed.\n * @returns {void}\n */\n\n/**\n * Iterate over 2-vertex line segment in any GeoJSON object, similar to Array.forEach()\n * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON\n * @param {Function} callback a method that takes (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex)\n * @returns {void}\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n *\n * // Iterate over GeoJSON by 2-vertex segments\n * turf.segmentEach(polygon, function (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n *   //=currentSegment\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   //=segmentIndex\n * });\n *\n * // Calculate the total number of segments\n * var total = 0;\n * turf.segmentEach(polygon, function () {\n *     total++;\n * });\n */\nfunction segmentEach(geojson, callback) {\n  flattenEach(geojson, function (feature, featureIndex, multiFeatureIndex) {\n    var segmentIndex = 0;\n\n    // Exclude null Geometries\n    if (!feature.geometry) return;\n    // (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n    var type = feature.geometry.type;\n    if (type === \"Point\" || type === \"MultiPoint\") return;\n\n    // Generate 2-vertex line segments\n    var previousCoords;\n    var previousFeatureIndex = 0;\n    var previousMultiIndex = 0;\n    var prevGeomIndex = 0;\n    if (\n      coordEach(\n        feature,\n        function (\n          currentCoord,\n          coordIndex,\n          featureIndexCoord,\n          multiPartIndexCoord,\n          geometryIndex\n        ) {\n          // Simulating a meta.coordReduce() since `reduce` operations cannot be stopped by returning `false`\n          if (\n            previousCoords === undefined ||\n            featureIndex > previousFeatureIndex ||\n            multiPartIndexCoord > previousMultiIndex ||\n            geometryIndex > prevGeomIndex\n          ) {\n            previousCoords = currentCoord;\n            previousFeatureIndex = featureIndex;\n            previousMultiIndex = multiPartIndexCoord;\n            prevGeomIndex = geometryIndex;\n            segmentIndex = 0;\n            return;\n          }\n          var currentSegment = lineString(\n            [previousCoords, currentCoord],\n            feature.properties\n          );\n          if (\n            callback(\n              currentSegment,\n              featureIndex,\n              multiFeatureIndex,\n              geometryIndex,\n              segmentIndex\n            ) === false\n          )\n            return false;\n          segmentIndex++;\n          previousCoords = currentCoord;\n        }\n      ) === false\n    )\n      return false;\n  });\n}\n\n/**\n * Callback for segmentReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback segmentReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature<LineString>} currentSegment The current Segment being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n * @param {number} segmentIndex The current index of the Segment being processed.\n */\n\n/**\n * Reduce 2-vertex line segment in any GeoJSON object, similar to Array.reduce()\n * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON\n * @param {Function} callback a method that takes (previousValue, currentSegment, currentIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {void}\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n *\n * // Iterate over GeoJSON by 2-vertex segments\n * turf.segmentReduce(polygon, function (previousSegment, currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n *   //= previousSegment\n *   //= currentSegment\n *   //= featureIndex\n *   //= multiFeatureIndex\n *   //= geometryIndex\n *   //= segmentIndex\n *   return currentSegment\n * });\n *\n * // Calculate the total number of segments\n * var initialValue = 0\n * var total = turf.segmentReduce(polygon, function (previousValue) {\n *     previousValue++;\n *     return previousValue;\n * }, initialValue);\n */\nfunction segmentReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  var started = false;\n  segmentEach(\n    geojson,\n    function (\n      currentSegment,\n      featureIndex,\n      multiFeatureIndex,\n      geometryIndex,\n      segmentIndex\n    ) {\n      if (started === false && initialValue === undefined)\n        previousValue = currentSegment;\n      else\n        previousValue = callback(\n          previousValue,\n          currentSegment,\n          featureIndex,\n          multiFeatureIndex,\n          geometryIndex,\n          segmentIndex\n        );\n      started = true;\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Callback for lineEach\n *\n * @callback lineEachCallback\n * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed\n * @param {number} featureIndex The current index of the Feature being processed\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed\n * @param {number} geometryIndex The current index of the Geometry being processed\n */\n\n/**\n * Iterate over line or ring coordinates in LineString, Polygon, MultiLineString, MultiPolygon Features or Geometries,\n * similar to Array.forEach.\n *\n * @name lineEach\n * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object\n * @param {Function} callback a method that takes (currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n * @example\n * var multiLine = turf.multiLineString([\n *   [[26, 37], [35, 45]],\n *   [[36, 53], [38, 50], [41, 55]]\n * ]);\n *\n * turf.lineEach(multiLine, function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=currentLine\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n * });\n */\nfunction lineEach(geojson, callback) {\n  // validation\n  if (!geojson) throw new Error(\"geojson is required\");\n\n  flattenEach(geojson, function (feature, featureIndex, multiFeatureIndex) {\n    if (feature.geometry === null) return;\n    var type = feature.geometry.type;\n    var coords = feature.geometry.coordinates;\n    switch (type) {\n      case \"LineString\":\n        if (callback(feature, featureIndex, multiFeatureIndex, 0, 0) === false)\n          return false;\n        break;\n      case \"Polygon\":\n        for (\n          var geometryIndex = 0;\n          geometryIndex < coords.length;\n          geometryIndex++\n        ) {\n          if (\n            callback(\n              lineString(coords[geometryIndex], feature.properties),\n              featureIndex,\n              multiFeatureIndex,\n              geometryIndex\n            ) === false\n          )\n            return false;\n        }\n        break;\n    }\n  });\n}\n\n/**\n * Callback for lineReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback lineReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed.\n * @param {number} featureIndex The current index of the Feature being processed\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed\n * @param {number} geometryIndex The current index of the Geometry being processed\n */\n\n/**\n * Reduce features in any GeoJSON object, similar to Array.reduce().\n *\n * @name lineReduce\n * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object\n * @param {Function} callback a method that takes (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var multiPoly = turf.multiPolygon([\n *   turf.polygon([[[12,48],[2,41],[24,38],[12,48]], [[9,44],[13,41],[13,45],[9,44]]]),\n *   turf.polygon([[[5, 5], [0, 0], [2, 2], [4, 4], [5, 5]]])\n * ]);\n *\n * turf.lineReduce(multiPoly, function (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=previousValue\n *   //=currentLine\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   return currentLine\n * });\n */\nfunction lineReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  lineEach(\n    geojson,\n    function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n      if (featureIndex === 0 && initialValue === undefined)\n        previousValue = currentLine;\n      else\n        previousValue = callback(\n          previousValue,\n          currentLine,\n          featureIndex,\n          multiFeatureIndex,\n          geometryIndex\n        );\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Finds a particular 2-vertex LineString Segment from a GeoJSON using `@turf/meta` indexes.\n *\n * Negative indexes are permitted.\n * Point & MultiPoint will always return null.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.featureIndex=0] Feature Index\n * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index\n * @param {number} [options.geometryIndex=0] Geometry Index\n * @param {number} [options.segmentIndex=0] Segment Index\n * @param {Object} [options.properties={}] Translate Properties to output LineString\n * @param {BBox} [options.bbox={}] Translate BBox to output LineString\n * @param {number|string} [options.id={}] Translate Id to output LineString\n * @returns {Feature<LineString>} 2-vertex GeoJSON Feature LineString\n * @example\n * var multiLine = turf.multiLineString([\n *     [[10, 10], [50, 30], [30, 40]],\n *     [[-10, -10], [-50, -30], [-30, -40]]\n * ]);\n *\n * // First Segment (defaults are 0)\n * turf.findSegment(multiLine);\n * // => Feature<LineString<[[10, 10], [50, 30]]>>\n *\n * // First Segment of 2nd Multi Feature\n * turf.findSegment(multiLine, {multiFeatureIndex: 1});\n * // => Feature<LineString<[[-10, -10], [-50, -30]]>>\n *\n * // Last Segment of Last Multi Feature\n * turf.findSegment(multiLine, {multiFeatureIndex: -1, segmentIndex: -1});\n * // => Feature<LineString<[[-50, -30], [-30, -40]]>>\n */\nfunction findSegment(geojson, options) {\n  // Optional Parameters\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  var featureIndex = options.featureIndex || 0;\n  var multiFeatureIndex = options.multiFeatureIndex || 0;\n  var geometryIndex = options.geometryIndex || 0;\n  var segmentIndex = options.segmentIndex || 0;\n\n  // Find FeatureIndex\n  var properties = options.properties;\n  var geometry;\n\n  switch (geojson.type) {\n    case \"FeatureCollection\":\n      if (featureIndex < 0)\n        featureIndex = geojson.features.length + featureIndex;\n      properties = properties || geojson.features[featureIndex].properties;\n      geometry = geojson.features[featureIndex].geometry;\n      break;\n    case \"Feature\":\n      properties = properties || geojson.properties;\n      geometry = geojson.geometry;\n      break;\n    case \"Point\":\n    case \"MultiPoint\":\n      return null;\n    case \"LineString\":\n    case \"Polygon\":\n    case \"MultiLineString\":\n    case \"MultiPolygon\":\n      geometry = geojson;\n      break;\n    default:\n      throw new Error(\"geojson is invalid\");\n  }\n\n  // Find SegmentIndex\n  if (geometry === null) return null;\n  var coords = geometry.coordinates;\n  switch (geometry.type) {\n    case \"Point\":\n    case \"MultiPoint\":\n      return null;\n    case \"LineString\":\n      if (segmentIndex < 0) segmentIndex = coords.length + segmentIndex - 1;\n      return lineString(\n        [coords[segmentIndex], coords[segmentIndex + 1]],\n        properties,\n        options\n      );\n    case \"Polygon\":\n      if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;\n      if (segmentIndex < 0)\n        segmentIndex = coords[geometryIndex].length + segmentIndex - 1;\n      return lineString(\n        [\n          coords[geometryIndex][segmentIndex],\n          coords[geometryIndex][segmentIndex + 1],\n        ],\n        properties,\n        options\n      );\n    case \"MultiLineString\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (segmentIndex < 0)\n        segmentIndex = coords[multiFeatureIndex].length + segmentIndex - 1;\n      return lineString(\n        [\n          coords[multiFeatureIndex][segmentIndex],\n          coords[multiFeatureIndex][segmentIndex + 1],\n        ],\n        properties,\n        options\n      );\n    case \"MultiPolygon\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (geometryIndex < 0)\n        geometryIndex = coords[multiFeatureIndex].length + geometryIndex;\n      if (segmentIndex < 0)\n        segmentIndex =\n          coords[multiFeatureIndex][geometryIndex].length - segmentIndex - 1;\n      return lineString(\n        [\n          coords[multiFeatureIndex][geometryIndex][segmentIndex],\n          coords[multiFeatureIndex][geometryIndex][segmentIndex + 1],\n        ],\n        properties,\n        options\n      );\n  }\n  throw new Error(\"geojson is invalid\");\n}\n\n/**\n * Finds a particular Point from a GeoJSON using `@turf/meta` indexes.\n *\n * Negative indexes are permitted.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.featureIndex=0] Feature Index\n * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index\n * @param {number} [options.geometryIndex=0] Geometry Index\n * @param {number} [options.coordIndex=0] Coord Index\n * @param {Object} [options.properties={}] Translate Properties to output Point\n * @param {BBox} [options.bbox={}] Translate BBox to output Point\n * @param {number|string} [options.id={}] Translate Id to output Point\n * @returns {Feature<Point>} 2-vertex GeoJSON Feature Point\n * @example\n * var multiLine = turf.multiLineString([\n *     [[10, 10], [50, 30], [30, 40]],\n *     [[-10, -10], [-50, -30], [-30, -40]]\n * ]);\n *\n * // First Segment (defaults are 0)\n * turf.findPoint(multiLine);\n * // => Feature<Point<[10, 10]>>\n *\n * // First Segment of the 2nd Multi-Feature\n * turf.findPoint(multiLine, {multiFeatureIndex: 1});\n * // => Feature<Point<[-10, -10]>>\n *\n * // Last Segment of last Multi-Feature\n * turf.findPoint(multiLine, {multiFeatureIndex: -1, coordIndex: -1});\n * // => Feature<Point<[-30, -40]>>\n */\nfunction findPoint(geojson, options) {\n  // Optional Parameters\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  var featureIndex = options.featureIndex || 0;\n  var multiFeatureIndex = options.multiFeatureIndex || 0;\n  var geometryIndex = options.geometryIndex || 0;\n  var coordIndex = options.coordIndex || 0;\n\n  // Find FeatureIndex\n  var properties = options.properties;\n  var geometry;\n\n  switch (geojson.type) {\n    case \"FeatureCollection\":\n      if (featureIndex < 0)\n        featureIndex = geojson.features.length + featureIndex;\n      properties = properties || geojson.features[featureIndex].properties;\n      geometry = geojson.features[featureIndex].geometry;\n      break;\n    case \"Feature\":\n      properties = properties || geojson.properties;\n      geometry = geojson.geometry;\n      break;\n    case \"Point\":\n    case \"MultiPoint\":\n      return null;\n    case \"LineString\":\n    case \"Polygon\":\n    case \"MultiLineString\":\n    case \"MultiPolygon\":\n      geometry = geojson;\n      break;\n    default:\n      throw new Error(\"geojson is invalid\");\n  }\n\n  // Find Coord Index\n  if (geometry === null) return null;\n  var coords = geometry.coordinates;\n  switch (geometry.type) {\n    case \"Point\":\n      return point(coords, properties, options);\n    case \"MultiPoint\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      return point(coords[multiFeatureIndex], properties, options);\n    case \"LineString\":\n      if (coordIndex < 0) coordIndex = coords.length + coordIndex;\n      return point(coords[coordIndex], properties, options);\n    case \"Polygon\":\n      if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;\n      if (coordIndex < 0)\n        coordIndex = coords[geometryIndex].length + coordIndex;\n      return point(coords[geometryIndex][coordIndex], properties, options);\n    case \"MultiLineString\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (coordIndex < 0)\n        coordIndex = coords[multiFeatureIndex].length + coordIndex;\n      return point(coords[multiFeatureIndex][coordIndex], properties, options);\n    case \"MultiPolygon\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (geometryIndex < 0)\n        geometryIndex = coords[multiFeatureIndex].length + geometryIndex;\n      if (coordIndex < 0)\n        coordIndex =\n          coords[multiFeatureIndex][geometryIndex].length - coordIndex;\n      return point(\n        coords[multiFeatureIndex][geometryIndex][coordIndex],\n        properties,\n        options\n      );\n  }\n  throw new Error(\"geojson is invalid\");\n}\n\nexport { coordAll, coordEach, coordReduce, featureEach, featureReduce, findPoint, findSegment, flattenEach, flattenReduce, geomEach, geomReduce, lineEach, lineReduce, propEach, propReduce, segmentEach, segmentReduce };\n","import { featureCollection, lineString, } from \"@turf/helpers\";\nimport { getCoords } from \"@turf/invariant\";\nimport { flattenEach } from \"@turf/meta\";\n/**\n * Creates a {@link FeatureCollection} of 2-vertex {@link LineString} segments from a\n * {@link LineString|(Multi)LineString} or {@link Polygon|(Multi)Polygon}.\n *\n * @name lineSegment\n * @param {GeoJSON} geojson GeoJSON Polygon or LineString\n * @returns {FeatureCollection<LineString>} 2-vertex line segments\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n * var segments = turf.lineSegment(polygon);\n *\n * //addToMap\n * var addToMap = [polygon, segments]\n */\nfunction lineSegment(geojson) {\n    if (!geojson) {\n        throw new Error(\"geojson is required\");\n    }\n    var results = [];\n    flattenEach(geojson, function (feature) {\n        lineSegmentFeature(feature, results);\n    });\n    return featureCollection(results);\n}\n/**\n * Line Segment\n *\n * @private\n * @param {Feature<LineString|Polygon>} geojson Line or polygon feature\n * @param {Array} results push to results\n * @returns {void}\n */\nfunction lineSegmentFeature(geojson, results) {\n    var coords = [];\n    var geometry = geojson.geometry;\n    if (geometry !== null) {\n        switch (geometry.type) {\n            case \"Polygon\":\n                coords = getCoords(geometry);\n                break;\n            case \"LineString\":\n                coords = [getCoords(geometry)];\n        }\n        coords.forEach(function (coord) {\n            var segments = createSegments(coord, geojson.properties);\n            segments.forEach(function (segment) {\n                segment.id = results.length;\n                results.push(segment);\n            });\n        });\n    }\n}\n/**\n * Create Segments from LineString coordinates\n *\n * @private\n * @param {Array<Array<number>>} coords LineString coordinates\n * @param {*} properties GeoJSON properties\n * @returns {Array<Feature<LineString>>} line segments\n */\nfunction createSegments(coords, properties) {\n    var segments = [];\n    coords.reduce(function (previousCoords, currentCoords) {\n        var segment = lineString([previousCoords, currentCoords], properties);\n        segment.bbox = bbox(previousCoords, currentCoords);\n        segments.push(segment);\n        return currentCoords;\n    });\n    return segments;\n}\n/**\n * Create BBox between two coordinates (faster than @turf/bbox)\n *\n * @private\n * @param {Array<number>} coords1 Point coordinate\n * @param {Array<number>} coords2 Point coordinate\n * @returns {BBox} [west, south, east, north]\n */\nfunction bbox(coords1, coords2) {\n    var x1 = coords1[0];\n    var y1 = coords1[1];\n    var x2 = coords2[0];\n    var y2 = coords2[1];\n    var west = x1 < x2 ? x1 : x2;\n    var south = y1 < y2 ? y1 : y2;\n    var east = x1 > x2 ? x1 : x2;\n    var north = y1 > y2 ? y1 : y2;\n    return [west, south, east, north];\n}\nexport default lineSegment;\n","\nexport default function quickselect(arr, k, left, right, compare) {\n    quickselectStep(arr, k, left || 0, right || (arr.length - 1), compare || defaultCompare);\n}\n\nfunction quickselectStep(arr, k, left, right, compare) {\n\n    while (right > left) {\n        if (right - left > 600) {\n            var n = right - left + 1;\n            var m = k - left + 1;\n            var z = Math.log(n);\n            var s = 0.5 * Math.exp(2 * z / 3);\n            var sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);\n            var newLeft = Math.max(left, Math.floor(k - m * s / n + sd));\n            var newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));\n            quickselectStep(arr, k, newLeft, newRight, compare);\n        }\n\n        var t = arr[k];\n        var i = left;\n        var j = right;\n\n        swap(arr, left, k);\n        if (compare(arr[right], t) > 0) swap(arr, left, right);\n\n        while (i < j) {\n            swap(arr, i, j);\n            i++;\n            j--;\n            while (compare(arr[i], t) < 0) i++;\n            while (compare(arr[j], t) > 0) j--;\n        }\n\n        if (compare(arr[left], t) === 0) swap(arr, left, j);\n        else {\n            j++;\n            swap(arr, j, right);\n        }\n\n        if (j <= k) left = j + 1;\n        if (k <= j) right = j - 1;\n    }\n}\n\nfunction swap(arr, i, j) {\n    var tmp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = tmp;\n}\n\nfunction defaultCompare(a, b) {\n    return a < b ? -1 : a > b ? 1 : 0;\n}\n","import quickselect from 'quickselect';\n\nexport default class RBush {\n    constructor(maxEntries = 9) {\n        // max entries in a node is 9 by default; min node fill is 40% for best performance\n        this._maxEntries = Math.max(4, maxEntries);\n        this._minEntries = Math.max(2, Math.ceil(this._maxEntries * 0.4));\n        this.clear();\n    }\n\n    all() {\n        return this._all(this.data, []);\n    }\n\n    search(bbox) {\n        let node = this.data;\n        const result = [];\n\n        if (!intersects(bbox, node)) return result;\n\n        const toBBox = this.toBBox;\n        const nodesToSearch = [];\n\n        while (node) {\n            for (let i = 0; i < node.children.length; i++) {\n                const child = node.children[i];\n                const childBBox = node.leaf ? toBBox(child) : child;\n\n                if (intersects(bbox, childBBox)) {\n                    if (node.leaf) result.push(child);\n                    else if (contains(bbox, childBBox)) this._all(child, result);\n                    else nodesToSearch.push(child);\n                }\n            }\n            node = nodesToSearch.pop();\n        }\n\n        return result;\n    }\n\n    collides(bbox) {\n        let node = this.data;\n\n        if (!intersects(bbox, node)) return false;\n\n        const nodesToSearch = [];\n        while (node) {\n            for (let i = 0; i < node.children.length; i++) {\n                const child = node.children[i];\n                const childBBox = node.leaf ? this.toBBox(child) : child;\n\n                if (intersects(bbox, childBBox)) {\n                    if (node.leaf || contains(bbox, childBBox)) return true;\n                    nodesToSearch.push(child);\n                }\n            }\n            node = nodesToSearch.pop();\n        }\n\n        return false;\n    }\n\n    load(data) {\n        if (!(data && data.length)) return this;\n\n        if (data.length < this._minEntries) {\n            for (let i = 0; i < data.length; i++) {\n                this.insert(data[i]);\n            }\n            return this;\n        }\n\n        // recursively build the tree with the given data from scratch using OMT algorithm\n        let node = this._build(data.slice(), 0, data.length - 1, 0);\n\n        if (!this.data.children.length) {\n            // save as is if tree is empty\n            this.data = node;\n\n        } else if (this.data.height === node.height) {\n            // split root if trees have the same height\n            this._splitRoot(this.data, node);\n\n        } else {\n            if (this.data.height < node.height) {\n                // swap trees if inserted one is bigger\n                const tmpNode = this.data;\n                this.data = node;\n                node = tmpNode;\n            }\n\n            // insert the small tree into the large tree at appropriate level\n            this._insert(node, this.data.height - node.height - 1, true);\n        }\n\n        return this;\n    }\n\n    insert(item) {\n        if (item) this._insert(item, this.data.height - 1);\n        return this;\n    }\n\n    clear() {\n        this.data = createNode([]);\n        return this;\n    }\n\n    remove(item, equalsFn) {\n        if (!item) return this;\n\n        let node = this.data;\n        const bbox = this.toBBox(item);\n        const path = [];\n        const indexes = [];\n        let i, parent, goingUp;\n\n        // depth-first iterative tree traversal\n        while (node || path.length) {\n\n            if (!node) { // go up\n                node = path.pop();\n                parent = path[path.length - 1];\n                i = indexes.pop();\n                goingUp = true;\n            }\n\n            if (node.leaf) { // check current node\n                const index = findItem(item, node.children, equalsFn);\n\n                if (index !== -1) {\n                    // item found, remove the item and condense tree upwards\n                    node.children.splice(index, 1);\n                    path.push(node);\n                    this._condense(path);\n                    return this;\n                }\n            }\n\n            if (!goingUp && !node.leaf && contains(node, bbox)) { // go down\n                path.push(node);\n                indexes.push(i);\n                i = 0;\n                parent = node;\n                node = node.children[0];\n\n            } else if (parent) { // go right\n                i++;\n                node = parent.children[i];\n                goingUp = false;\n\n            } else node = null; // nothing found\n        }\n\n        return this;\n    }\n\n    toBBox(item) { return item; }\n\n    compareMinX(a, b) { return a.minX - b.minX; }\n    compareMinY(a, b) { return a.minY - b.minY; }\n\n    toJSON() { return this.data; }\n\n    fromJSON(data) {\n        this.data = data;\n        return this;\n    }\n\n    _all(node, result) {\n        const nodesToSearch = [];\n        while (node) {\n            if (node.leaf) result.push(...node.children);\n            else nodesToSearch.push(...node.children);\n\n            node = nodesToSearch.pop();\n        }\n        return result;\n    }\n\n    _build(items, left, right, height) {\n\n        const N = right - left + 1;\n        let M = this._maxEntries;\n        let node;\n\n        if (N <= M) {\n            // reached leaf level; return leaf\n            node = createNode(items.slice(left, right + 1));\n            calcBBox(node, this.toBBox);\n            return node;\n        }\n\n        if (!height) {\n            // target height of the bulk-loaded tree\n            height = Math.ceil(Math.log(N) / Math.log(M));\n\n            // target number of root entries to maximize storage utilization\n            M = Math.ceil(N / Math.pow(M, height - 1));\n        }\n\n        node = createNode([]);\n        node.leaf = false;\n        node.height = height;\n\n        // split the items into M mostly square tiles\n\n        const N2 = Math.ceil(N / M);\n        const N1 = N2 * Math.ceil(Math.sqrt(M));\n\n        multiSelect(items, left, right, N1, this.compareMinX);\n\n        for (let i = left; i <= right; i += N1) {\n\n            const right2 = Math.min(i + N1 - 1, right);\n\n            multiSelect(items, i, right2, N2, this.compareMinY);\n\n            for (let j = i; j <= right2; j += N2) {\n\n                const right3 = Math.min(j + N2 - 1, right2);\n\n                // pack each entry recursively\n                node.children.push(this._build(items, j, right3, height - 1));\n            }\n        }\n\n        calcBBox(node, this.toBBox);\n\n        return node;\n    }\n\n    _chooseSubtree(bbox, node, level, path) {\n        while (true) {\n            path.push(node);\n\n            if (node.leaf || path.length - 1 === level) break;\n\n            let minArea = Infinity;\n            let minEnlargement = Infinity;\n            let targetNode;\n\n            for (let i = 0; i < node.children.length; i++) {\n                const child = node.children[i];\n                const area = bboxArea(child);\n                const enlargement = enlargedArea(bbox, child) - area;\n\n                // choose entry with the least area enlargement\n                if (enlargement < minEnlargement) {\n                    minEnlargement = enlargement;\n                    minArea = area < minArea ? area : minArea;\n                    targetNode = child;\n\n                } else if (enlargement === minEnlargement) {\n                    // otherwise choose one with the smallest area\n                    if (area < minArea) {\n                        minArea = area;\n                        targetNode = child;\n                    }\n                }\n            }\n\n            node = targetNode || node.children[0];\n        }\n\n        return node;\n    }\n\n    _insert(item, level, isNode) {\n        const bbox = isNode ? item : this.toBBox(item);\n        const insertPath = [];\n\n        // find the best node for accommodating the item, saving all nodes along the path too\n        const node = this._chooseSubtree(bbox, this.data, level, insertPath);\n\n        // put the item into the node\n        node.children.push(item);\n        extend(node, bbox);\n\n        // split on node overflow; propagate upwards if necessary\n        while (level >= 0) {\n            if (insertPath[level].children.length > this._maxEntries) {\n                this._split(insertPath, level);\n                level--;\n            } else break;\n        }\n\n        // adjust bboxes along the insertion path\n        this._adjustParentBBoxes(bbox, insertPath, level);\n    }\n\n    // split overflowed node into two\n    _split(insertPath, level) {\n        const node = insertPath[level];\n        const M = node.children.length;\n        const m = this._minEntries;\n\n        this._chooseSplitAxis(node, m, M);\n\n        const splitIndex = this._chooseSplitIndex(node, m, M);\n\n        const newNode = createNode(node.children.splice(splitIndex, node.children.length - splitIndex));\n        newNode.height = node.height;\n        newNode.leaf = node.leaf;\n\n        calcBBox(node, this.toBBox);\n        calcBBox(newNode, this.toBBox);\n\n        if (level) insertPath[level - 1].children.push(newNode);\n        else this._splitRoot(node, newNode);\n    }\n\n    _splitRoot(node, newNode) {\n        // split root node\n        this.data = createNode([node, newNode]);\n        this.data.height = node.height + 1;\n        this.data.leaf = false;\n        calcBBox(this.data, this.toBBox);\n    }\n\n    _chooseSplitIndex(node, m, M) {\n        let index;\n        let minOverlap = Infinity;\n        let minArea = Infinity;\n\n        for (let i = m; i <= M - m; i++) {\n            const bbox1 = distBBox(node, 0, i, this.toBBox);\n            const bbox2 = distBBox(node, i, M, this.toBBox);\n\n            const overlap = intersectionArea(bbox1, bbox2);\n            const area = bboxArea(bbox1) + bboxArea(bbox2);\n\n            // choose distribution with minimum overlap\n            if (overlap < minOverlap) {\n                minOverlap = overlap;\n                index = i;\n\n                minArea = area < minArea ? area : minArea;\n\n            } else if (overlap === minOverlap) {\n                // otherwise choose distribution with minimum area\n                if (area < minArea) {\n                    minArea = area;\n                    index = i;\n                }\n            }\n        }\n\n        return index || M - m;\n    }\n\n    // sorts node children by the best axis for split\n    _chooseSplitAxis(node, m, M) {\n        const compareMinX = node.leaf ? this.compareMinX : compareNodeMinX;\n        const compareMinY = node.leaf ? this.compareMinY : compareNodeMinY;\n        const xMargin = this._allDistMargin(node, m, M, compareMinX);\n        const yMargin = this._allDistMargin(node, m, M, compareMinY);\n\n        // if total distributions margin value is minimal for x, sort by minX,\n        // otherwise it's already sorted by minY\n        if (xMargin < yMargin) node.children.sort(compareMinX);\n    }\n\n    // total margin of all possible split distributions where each node is at least m full\n    _allDistMargin(node, m, M, compare) {\n        node.children.sort(compare);\n\n        const toBBox = this.toBBox;\n        const leftBBox = distBBox(node, 0, m, toBBox);\n        const rightBBox = distBBox(node, M - m, M, toBBox);\n        let margin = bboxMargin(leftBBox) + bboxMargin(rightBBox);\n\n        for (let i = m; i < M - m; i++) {\n            const child = node.children[i];\n            extend(leftBBox, node.leaf ? toBBox(child) : child);\n            margin += bboxMargin(leftBBox);\n        }\n\n        for (let i = M - m - 1; i >= m; i--) {\n            const child = node.children[i];\n            extend(rightBBox, node.leaf ? toBBox(child) : child);\n            margin += bboxMargin(rightBBox);\n        }\n\n        return margin;\n    }\n\n    _adjustParentBBoxes(bbox, path, level) {\n        // adjust bboxes along the given tree path\n        for (let i = level; i >= 0; i--) {\n            extend(path[i], bbox);\n        }\n    }\n\n    _condense(path) {\n        // go through the path, removing empty nodes and updating bboxes\n        for (let i = path.length - 1, siblings; i >= 0; i--) {\n            if (path[i].children.length === 0) {\n                if (i > 0) {\n                    siblings = path[i - 1].children;\n                    siblings.splice(siblings.indexOf(path[i]), 1);\n\n                } else this.clear();\n\n            } else calcBBox(path[i], this.toBBox);\n        }\n    }\n}\n\nfunction findItem(item, items, equalsFn) {\n    if (!equalsFn) return items.indexOf(item);\n\n    for (let i = 0; i < items.length; i++) {\n        if (equalsFn(item, items[i])) return i;\n    }\n    return -1;\n}\n\n// calculate node's bbox from bboxes of its children\nfunction calcBBox(node, toBBox) {\n    distBBox(node, 0, node.children.length, toBBox, node);\n}\n\n// min bounding rectangle of node children from k to p-1\nfunction distBBox(node, k, p, toBBox, destNode) {\n    if (!destNode) destNode = createNode(null);\n    destNode.minX = Infinity;\n    destNode.minY = Infinity;\n    destNode.maxX = -Infinity;\n    destNode.maxY = -Infinity;\n\n    for (let i = k; i < p; i++) {\n        const child = node.children[i];\n        extend(destNode, node.leaf ? toBBox(child) : child);\n    }\n\n    return destNode;\n}\n\nfunction extend(a, b) {\n    a.minX = Math.min(a.minX, b.minX);\n    a.minY = Math.min(a.minY, b.minY);\n    a.maxX = Math.max(a.maxX, b.maxX);\n    a.maxY = Math.max(a.maxY, b.maxY);\n    return a;\n}\n\nfunction compareNodeMinX(a, b) { return a.minX - b.minX; }\nfunction compareNodeMinY(a, b) { return a.minY - b.minY; }\n\nfunction bboxArea(a)   { return (a.maxX - a.minX) * (a.maxY - a.minY); }\nfunction bboxMargin(a) { return (a.maxX - a.minX) + (a.maxY - a.minY); }\n\nfunction enlargedArea(a, b) {\n    return (Math.max(b.maxX, a.maxX) - Math.min(b.minX, a.minX)) *\n           (Math.max(b.maxY, a.maxY) - Math.min(b.minY, a.minY));\n}\n\nfunction intersectionArea(a, b) {\n    const minX = Math.max(a.minX, b.minX);\n    const minY = Math.max(a.minY, b.minY);\n    const maxX = Math.min(a.maxX, b.maxX);\n    const maxY = Math.min(a.maxY, b.maxY);\n\n    return Math.max(0, maxX - minX) *\n           Math.max(0, maxY - minY);\n}\n\nfunction contains(a, b) {\n    return a.minX <= b.minX &&\n           a.minY <= b.minY &&\n           b.maxX <= a.maxX &&\n           b.maxY <= a.maxY;\n}\n\nfunction intersects(a, b) {\n    return b.minX <= a.maxX &&\n           b.minY <= a.maxY &&\n           b.maxX >= a.minX &&\n           b.maxY >= a.minY;\n}\n\nfunction createNode(children) {\n    return {\n        children,\n        height: 1,\n        leaf: true,\n        minX: Infinity,\n        minY: Infinity,\n        maxX: -Infinity,\n        maxY: -Infinity\n    };\n}\n\n// sort an array so that items come in groups of n unsorted items, with groups sorted between each other;\n// combines selection algorithm with binary divide & conquer approach\n\nfunction multiSelect(arr, left, right, n, compare) {\n    const stack = [left, right];\n\n    while (stack.length) {\n        right = stack.pop();\n        left = stack.pop();\n\n        if (right - left <= n) continue;\n\n        const mid = left + Math.ceil((right - left) / n / 2) * n;\n        quickselect(arr, mid, left, right, compare);\n\n        stack.push(left, mid, mid, right);\n    }\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @module helpers\n */\n/**\n * Earth Radius used with the Harvesine formula and approximates using a spherical (non-ellipsoid) Earth.\n *\n * @memberof helpers\n * @type {number}\n */\nexports.earthRadius = 6371008.8;\n/**\n * Unit of measurement factors using a spherical (non-ellipsoid) earth radius.\n *\n * @memberof helpers\n * @type {Object}\n */\nexports.factors = {\n    centimeters: exports.earthRadius * 100,\n    centimetres: exports.earthRadius * 100,\n    degrees: exports.earthRadius / 111325,\n    feet: exports.earthRadius * 3.28084,\n    inches: exports.earthRadius * 39.37,\n    kilometers: exports.earthRadius / 1000,\n    kilometres: exports.earthRadius / 1000,\n    meters: exports.earthRadius,\n    metres: exports.earthRadius,\n    miles: exports.earthRadius / 1609.344,\n    millimeters: exports.earthRadius * 1000,\n    millimetres: exports.earthRadius * 1000,\n    nauticalmiles: exports.earthRadius / 1852,\n    radians: 1,\n    yards: exports.earthRadius * 1.0936,\n};\n/**\n * Units of measurement factors based on 1 meter.\n *\n * @memberof helpers\n * @type {Object}\n */\nexports.unitsFactors = {\n    centimeters: 100,\n    centimetres: 100,\n    degrees: 1 / 111325,\n    feet: 3.28084,\n    inches: 39.37,\n    kilometers: 1 / 1000,\n    kilometres: 1 / 1000,\n    meters: 1,\n    metres: 1,\n    miles: 1 / 1609.344,\n    millimeters: 1000,\n    millimetres: 1000,\n    nauticalmiles: 1 / 1852,\n    radians: 1 / exports.earthRadius,\n    yards: 1.0936133,\n};\n/**\n * Area of measurement factors based on 1 square meter.\n *\n * @memberof helpers\n * @type {Object}\n */\nexports.areaFactors = {\n    acres: 0.000247105,\n    centimeters: 10000,\n    centimetres: 10000,\n    feet: 10.763910417,\n    hectares: 0.0001,\n    inches: 1550.003100006,\n    kilometers: 0.000001,\n    kilometres: 0.000001,\n    meters: 1,\n    metres: 1,\n    miles: 3.86e-7,\n    millimeters: 1000000,\n    millimetres: 1000000,\n    yards: 1.195990046,\n};\n/**\n * Wraps a GeoJSON {@link Geometry} in a GeoJSON {@link Feature}.\n *\n * @name feature\n * @param {Geometry} geometry input geometry\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature} a GeoJSON Feature\n * @example\n * var geometry = {\n *   \"type\": \"Point\",\n *   \"coordinates\": [110, 50]\n * };\n *\n * var feature = turf.feature(geometry);\n *\n * //=feature\n */\nfunction feature(geom, properties, options) {\n    if (options === void 0) { options = {}; }\n    var feat = { type: \"Feature\" };\n    if (options.id === 0 || options.id) {\n        feat.id = options.id;\n    }\n    if (options.bbox) {\n        feat.bbox = options.bbox;\n    }\n    feat.properties = properties || {};\n    feat.geometry = geom;\n    return feat;\n}\nexports.feature = feature;\n/**\n * Creates a GeoJSON {@link Geometry} from a Geometry string type & coordinates.\n * For GeometryCollection type use `helpers.geometryCollection`\n *\n * @name geometry\n * @param {string} type Geometry Type\n * @param {Array<any>} coordinates Coordinates\n * @param {Object} [options={}] Optional Parameters\n * @returns {Geometry} a GeoJSON Geometry\n * @example\n * var type = \"Point\";\n * var coordinates = [110, 50];\n * var geometry = turf.geometry(type, coordinates);\n * // => geometry\n */\nfunction geometry(type, coordinates, _options) {\n    if (_options === void 0) { _options = {}; }\n    switch (type) {\n        case \"Point\":\n            return point(coordinates).geometry;\n        case \"LineString\":\n            return lineString(coordinates).geometry;\n        case \"Polygon\":\n            return polygon(coordinates).geometry;\n        case \"MultiPoint\":\n            return multiPoint(coordinates).geometry;\n        case \"MultiLineString\":\n            return multiLineString(coordinates).geometry;\n        case \"MultiPolygon\":\n            return multiPolygon(coordinates).geometry;\n        default:\n            throw new Error(type + \" is invalid\");\n    }\n}\nexports.geometry = geometry;\n/**\n * Creates a {@link Point} {@link Feature} from a Position.\n *\n * @name point\n * @param {Array<number>} coordinates longitude, latitude position (each in decimal degrees)\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Point>} a Point feature\n * @example\n * var point = turf.point([-75.343, 39.984]);\n *\n * //=point\n */\nfunction point(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    if (!coordinates) {\n        throw new Error(\"coordinates is required\");\n    }\n    if (!Array.isArray(coordinates)) {\n        throw new Error(\"coordinates must be an Array\");\n    }\n    if (coordinates.length < 2) {\n        throw new Error(\"coordinates must be at least 2 numbers long\");\n    }\n    if (!isNumber(coordinates[0]) || !isNumber(coordinates[1])) {\n        throw new Error(\"coordinates must contain numbers\");\n    }\n    var geom = {\n        type: \"Point\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.point = point;\n/**\n * Creates a {@link Point} {@link FeatureCollection} from an Array of Point coordinates.\n *\n * @name points\n * @param {Array<Array<number>>} coordinates an array of Points\n * @param {Object} [properties={}] Translate these properties to each Feature\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\n * associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Point>} Point Feature\n * @example\n * var points = turf.points([\n *   [-75, 39],\n *   [-80, 45],\n *   [-78, 50]\n * ]);\n *\n * //=points\n */\nfunction points(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return point(coords, properties);\n    }), options);\n}\nexports.points = points;\n/**\n * Creates a {@link Polygon} {@link Feature} from an Array of LinearRings.\n *\n * @name polygon\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Polygon>} Polygon Feature\n * @example\n * var polygon = turf.polygon([[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]], { name: 'poly1' });\n *\n * //=polygon\n */\nfunction polygon(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    for (var _i = 0, coordinates_1 = coordinates; _i < coordinates_1.length; _i++) {\n        var ring = coordinates_1[_i];\n        if (ring.length < 4) {\n            throw new Error(\"Each LinearRing of a Polygon must have 4 or more Positions.\");\n        }\n        for (var j = 0; j < ring[ring.length - 1].length; j++) {\n            // Check if first point of Polygon contains two numbers\n            if (ring[ring.length - 1][j] !== ring[0][j]) {\n                throw new Error(\"First and last Position are not equivalent.\");\n            }\n        }\n    }\n    var geom = {\n        type: \"Polygon\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.polygon = polygon;\n/**\n * Creates a {@link Polygon} {@link FeatureCollection} from an Array of Polygon coordinates.\n *\n * @name polygons\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygon coordinates\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Polygon>} Polygon FeatureCollection\n * @example\n * var polygons = turf.polygons([\n *   [[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]],\n *   [[[-15, 42], [-14, 46], [-12, 41], [-17, 44], [-15, 42]]],\n * ]);\n *\n * //=polygons\n */\nfunction polygons(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return polygon(coords, properties);\n    }), options);\n}\nexports.polygons = polygons;\n/**\n * Creates a {@link LineString} {@link Feature} from an Array of Positions.\n *\n * @name lineString\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<LineString>} LineString Feature\n * @example\n * var linestring1 = turf.lineString([[-24, 63], [-23, 60], [-25, 65], [-20, 69]], {name: 'line 1'});\n * var linestring2 = turf.lineString([[-14, 43], [-13, 40], [-15, 45], [-10, 49]], {name: 'line 2'});\n *\n * //=linestring1\n * //=linestring2\n */\nfunction lineString(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    if (coordinates.length < 2) {\n        throw new Error(\"coordinates must be an array of two or more positions\");\n    }\n    var geom = {\n        type: \"LineString\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.lineString = lineString;\n/**\n * Creates a {@link LineString} {@link FeatureCollection} from an Array of LineString coordinates.\n *\n * @name lineStrings\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\n * associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<LineString>} LineString FeatureCollection\n * @example\n * var linestrings = turf.lineStrings([\n *   [[-24, 63], [-23, 60], [-25, 65], [-20, 69]],\n *   [[-14, 43], [-13, 40], [-15, 45], [-10, 49]]\n * ]);\n *\n * //=linestrings\n */\nfunction lineStrings(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return lineString(coords, properties);\n    }), options);\n}\nexports.lineStrings = lineStrings;\n/**\n * Takes one or more {@link Feature|Features} and creates a {@link FeatureCollection}.\n *\n * @name featureCollection\n * @param {Feature[]} features input features\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {FeatureCollection} FeatureCollection of Features\n * @example\n * var locationA = turf.point([-75.343, 39.984], {name: 'Location A'});\n * var locationB = turf.point([-75.833, 39.284], {name: 'Location B'});\n * var locationC = turf.point([-75.534, 39.123], {name: 'Location C'});\n *\n * var collection = turf.featureCollection([\n *   locationA,\n *   locationB,\n *   locationC\n * ]);\n *\n * //=collection\n */\nfunction featureCollection(features, options) {\n    if (options === void 0) { options = {}; }\n    var fc = { type: \"FeatureCollection\" };\n    if (options.id) {\n        fc.id = options.id;\n    }\n    if (options.bbox) {\n        fc.bbox = options.bbox;\n    }\n    fc.features = features;\n    return fc;\n}\nexports.featureCollection = featureCollection;\n/**\n * Creates a {@link Feature<MultiLineString>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiLineString\n * @param {Array<Array<Array<number>>>} coordinates an array of LineStrings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiLineString>} a MultiLineString feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiLine = turf.multiLineString([[[0,0],[10,10]]]);\n *\n * //=multiLine\n */\nfunction multiLineString(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiLineString\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.multiLineString = multiLineString;\n/**\n * Creates a {@link Feature<MultiPoint>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPoint\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPoint>} a MultiPoint feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPt = turf.multiPoint([[0,0],[10,10]]);\n *\n * //=multiPt\n */\nfunction multiPoint(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiPoint\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.multiPoint = multiPoint;\n/**\n * Creates a {@link Feature<MultiPolygon>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPolygon\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygons\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPolygon>} a multipolygon feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPoly = turf.multiPolygon([[[[0,0],[0,10],[10,10],[10,0],[0,0]]]]);\n *\n * //=multiPoly\n *\n */\nfunction multiPolygon(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiPolygon\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.multiPolygon = multiPolygon;\n/**\n * Creates a {@link Feature<GeometryCollection>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name geometryCollection\n * @param {Array<Geometry>} geometries an array of GeoJSON Geometries\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<GeometryCollection>} a GeoJSON GeometryCollection Feature\n * @example\n * var pt = turf.geometry(\"Point\", [100, 0]);\n * var line = turf.geometry(\"LineString\", [[101, 0], [102, 1]]);\n * var collection = turf.geometryCollection([pt, line]);\n *\n * // => collection\n */\nfunction geometryCollection(geometries, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"GeometryCollection\",\n        geometries: geometries,\n    };\n    return feature(geom, properties, options);\n}\nexports.geometryCollection = geometryCollection;\n/**\n * Round number to precision\n *\n * @param {number} num Number\n * @param {number} [precision=0] Precision\n * @returns {number} rounded number\n * @example\n * turf.round(120.4321)\n * //=120\n *\n * turf.round(120.4321, 2)\n * //=120.43\n */\nfunction round(num, precision) {\n    if (precision === void 0) { precision = 0; }\n    if (precision && !(precision >= 0)) {\n        throw new Error(\"precision must be a positive number\");\n    }\n    var multiplier = Math.pow(10, precision || 0);\n    return Math.round(num * multiplier) / multiplier;\n}\nexports.round = round;\n/**\n * Convert a distance measurement (assuming a spherical Earth) from radians to a more friendly unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name radiansToLength\n * @param {number} radians in radians across the sphere\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} distance\n */\nfunction radiansToLength(radians, units) {\n    if (units === void 0) { units = \"kilometers\"; }\n    var factor = exports.factors[units];\n    if (!factor) {\n        throw new Error(units + \" units is invalid\");\n    }\n    return radians * factor;\n}\nexports.radiansToLength = radiansToLength;\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into radians\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name lengthToRadians\n * @param {number} distance in real units\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} radians\n */\nfunction lengthToRadians(distance, units) {\n    if (units === void 0) { units = \"kilometers\"; }\n    var factor = exports.factors[units];\n    if (!factor) {\n        throw new Error(units + \" units is invalid\");\n    }\n    return distance / factor;\n}\nexports.lengthToRadians = lengthToRadians;\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into degrees\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, centimeters, kilometres, feet\n *\n * @name lengthToDegrees\n * @param {number} distance in real units\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} degrees\n */\nfunction lengthToDegrees(distance, units) {\n    return radiansToDegrees(lengthToRadians(distance, units));\n}\nexports.lengthToDegrees = lengthToDegrees;\n/**\n * Converts any bearing angle from the north line direction (positive clockwise)\n * and returns an angle between 0-360 degrees (positive clockwise), 0 being the north line\n *\n * @name bearingToAzimuth\n * @param {number} bearing angle, between -180 and +180 degrees\n * @returns {number} angle between 0 and 360 degrees\n */\nfunction bearingToAzimuth(bearing) {\n    var angle = bearing % 360;\n    if (angle < 0) {\n        angle += 360;\n    }\n    return angle;\n}\nexports.bearingToAzimuth = bearingToAzimuth;\n/**\n * Converts an angle in radians to degrees\n *\n * @name radiansToDegrees\n * @param {number} radians angle in radians\n * @returns {number} degrees between 0 and 360 degrees\n */\nfunction radiansToDegrees(radians) {\n    var degrees = radians % (2 * Math.PI);\n    return (degrees * 180) / Math.PI;\n}\nexports.radiansToDegrees = radiansToDegrees;\n/**\n * Converts an angle in degrees to radians\n *\n * @name degreesToRadians\n * @param {number} degrees angle between 0 and 360 degrees\n * @returns {number} angle in radians\n */\nfunction degreesToRadians(degrees) {\n    var radians = degrees % 360;\n    return (radians * Math.PI) / 180;\n}\nexports.degreesToRadians = degreesToRadians;\n/**\n * Converts a length to the requested unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @param {number} length to be converted\n * @param {Units} [originalUnit=\"kilometers\"] of the length\n * @param {Units} [finalUnit=\"kilometers\"] returned unit\n * @returns {number} the converted length\n */\nfunction convertLength(length, originalUnit, finalUnit) {\n    if (originalUnit === void 0) { originalUnit = \"kilometers\"; }\n    if (finalUnit === void 0) { finalUnit = \"kilometers\"; }\n    if (!(length >= 0)) {\n        throw new Error(\"length must be a positive number\");\n    }\n    return radiansToLength(lengthToRadians(length, originalUnit), finalUnit);\n}\nexports.convertLength = convertLength;\n/**\n * Converts a area to the requested unit.\n * Valid units: kilometers, kilometres, meters, metres, centimetres, millimeters, acres, miles, yards, feet, inches, hectares\n * @param {number} area to be converted\n * @param {Units} [originalUnit=\"meters\"] of the distance\n * @param {Units} [finalUnit=\"kilometers\"] returned unit\n * @returns {number} the converted area\n */\nfunction convertArea(area, originalUnit, finalUnit) {\n    if (originalUnit === void 0) { originalUnit = \"meters\"; }\n    if (finalUnit === void 0) { finalUnit = \"kilometers\"; }\n    if (!(area >= 0)) {\n        throw new Error(\"area must be a positive number\");\n    }\n    var startFactor = exports.areaFactors[originalUnit];\n    if (!startFactor) {\n        throw new Error(\"invalid original units\");\n    }\n    var finalFactor = exports.areaFactors[finalUnit];\n    if (!finalFactor) {\n        throw new Error(\"invalid final units\");\n    }\n    return (area / startFactor) * finalFactor;\n}\nexports.convertArea = convertArea;\n/**\n * isNumber\n *\n * @param {*} num Number to validate\n * @returns {boolean} true/false\n * @example\n * turf.isNumber(123)\n * //=true\n * turf.isNumber('foo')\n * //=false\n */\nfunction isNumber(num) {\n    return !isNaN(num) && num !== null && !Array.isArray(num);\n}\nexports.isNumber = isNumber;\n/**\n * isObject\n *\n * @param {*} input variable to validate\n * @returns {boolean} true/false\n * @example\n * turf.isObject({elevation: 10})\n * //=true\n * turf.isObject('foo')\n * //=false\n */\nfunction isObject(input) {\n    return !!input && input.constructor === Object;\n}\nexports.isObject = isObject;\n/**\n * Validate BBox\n *\n * @private\n * @param {Array<number>} bbox BBox to validate\n * @returns {void}\n * @throws Error if BBox is not valid\n * @example\n * validateBBox([-180, -40, 110, 50])\n * //=OK\n * validateBBox([-180, -40])\n * //=Error\n * validateBBox('Foo')\n * //=Error\n * validateBBox(5)\n * //=Error\n * validateBBox(null)\n * //=Error\n * validateBBox(undefined)\n * //=Error\n */\nfunction validateBBox(bbox) {\n    if (!bbox) {\n        throw new Error(\"bbox is required\");\n    }\n    if (!Array.isArray(bbox)) {\n        throw new Error(\"bbox must be an Array\");\n    }\n    if (bbox.length !== 4 && bbox.length !== 6) {\n        throw new Error(\"bbox must be an Array of 4 or 6 numbers\");\n    }\n    bbox.forEach(function (num) {\n        if (!isNumber(num)) {\n            throw new Error(\"bbox must only contain numbers\");\n        }\n    });\n}\nexports.validateBBox = validateBBox;\n/**\n * Validate Id\n *\n * @private\n * @param {string|number} id Id to validate\n * @returns {void}\n * @throws Error if Id is not valid\n * @example\n * validateId([-180, -40, 110, 50])\n * //=Error\n * validateId([-180, -40])\n * //=Error\n * validateId('Foo')\n * //=OK\n * validateId(5)\n * //=OK\n * validateId(null)\n * //=Error\n * validateId(undefined)\n * //=Error\n */\nfunction validateId(id) {\n    if (!id) {\n        throw new Error(\"id is required\");\n    }\n    if ([\"string\", \"number\"].indexOf(typeof id) === -1) {\n        throw new Error(\"id must be a number or a string\");\n    }\n}\nexports.validateId = validateId;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar helpers = require('@turf/helpers');\n\n/**\n * Callback for coordEach\n *\n * @callback coordEachCallback\n * @param {Array<number>} currentCoord The current coordinate being processed.\n * @param {number} coordIndex The current index of the coordinate being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n */\n\n/**\n * Iterate over coordinates in any GeoJSON object, similar to Array.forEach()\n *\n * @name coordEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentCoord, coordIndex, featureIndex, multiFeatureIndex)\n * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.coordEach(features, function (currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=currentCoord\n *   //=coordIndex\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n * });\n */\nfunction coordEach(geojson, callback, excludeWrapCoord) {\n  // Handles null Geometry -- Skips this GeoJSON\n  if (geojson === null) return;\n  var j,\n    k,\n    l,\n    geometry,\n    stopG,\n    coords,\n    geometryMaybeCollection,\n    wrapShrink = 0,\n    coordIndex = 0,\n    isGeometryCollection,\n    type = geojson.type,\n    isFeatureCollection = type === \"FeatureCollection\",\n    isFeature = type === \"Feature\",\n    stop = isFeatureCollection ? geojson.features.length : 1;\n\n  // This logic may look a little weird. The reason why it is that way\n  // is because it's trying to be fast. GeoJSON supports multiple kinds\n  // of objects at its root: FeatureCollection, Features, Geometries.\n  // This function has the responsibility of handling all of them, and that\n  // means that some of the `for` loops you see below actually just don't apply\n  // to certain inputs. For instance, if you give this just a\n  // Point geometry, then both loops are short-circuited and all we do\n  // is gradually rename the input until it's called 'geometry'.\n  //\n  // This also aims to allocate as few resources as possible: just a\n  // few numbers and booleans, rather than any temporary arrays as would\n  // be required with the normalization approach.\n  for (var featureIndex = 0; featureIndex < stop; featureIndex++) {\n    geometryMaybeCollection = isFeatureCollection\n      ? geojson.features[featureIndex].geometry\n      : isFeature\n      ? geojson.geometry\n      : geojson;\n    isGeometryCollection = geometryMaybeCollection\n      ? geometryMaybeCollection.type === \"GeometryCollection\"\n      : false;\n    stopG = isGeometryCollection\n      ? geometryMaybeCollection.geometries.length\n      : 1;\n\n    for (var geomIndex = 0; geomIndex < stopG; geomIndex++) {\n      var multiFeatureIndex = 0;\n      var geometryIndex = 0;\n      geometry = isGeometryCollection\n        ? geometryMaybeCollection.geometries[geomIndex]\n        : geometryMaybeCollection;\n\n      // Handles null Geometry -- Skips this geometry\n      if (geometry === null) continue;\n      coords = geometry.coordinates;\n      var geomType = geometry.type;\n\n      wrapShrink =\n        excludeWrapCoord &&\n        (geomType === \"Polygon\" || geomType === \"MultiPolygon\")\n          ? 1\n          : 0;\n\n      switch (geomType) {\n        case null:\n          break;\n        case \"Point\":\n          if (\n            callback(\n              coords,\n              coordIndex,\n              featureIndex,\n              multiFeatureIndex,\n              geometryIndex\n            ) === false\n          )\n            return false;\n          coordIndex++;\n          multiFeatureIndex++;\n          break;\n        case \"LineString\":\n        case \"MultiPoint\":\n          for (j = 0; j < coords.length; j++) {\n            if (\n              callback(\n                coords[j],\n                coordIndex,\n                featureIndex,\n                multiFeatureIndex,\n                geometryIndex\n              ) === false\n            )\n              return false;\n            coordIndex++;\n            if (geomType === \"MultiPoint\") multiFeatureIndex++;\n          }\n          if (geomType === \"LineString\") multiFeatureIndex++;\n          break;\n        case \"Polygon\":\n        case \"MultiLineString\":\n          for (j = 0; j < coords.length; j++) {\n            for (k = 0; k < coords[j].length - wrapShrink; k++) {\n              if (\n                callback(\n                  coords[j][k],\n                  coordIndex,\n                  featureIndex,\n                  multiFeatureIndex,\n                  geometryIndex\n                ) === false\n              )\n                return false;\n              coordIndex++;\n            }\n            if (geomType === \"MultiLineString\") multiFeatureIndex++;\n            if (geomType === \"Polygon\") geometryIndex++;\n          }\n          if (geomType === \"Polygon\") multiFeatureIndex++;\n          break;\n        case \"MultiPolygon\":\n          for (j = 0; j < coords.length; j++) {\n            geometryIndex = 0;\n            for (k = 0; k < coords[j].length; k++) {\n              for (l = 0; l < coords[j][k].length - wrapShrink; l++) {\n                if (\n                  callback(\n                    coords[j][k][l],\n                    coordIndex,\n                    featureIndex,\n                    multiFeatureIndex,\n                    geometryIndex\n                  ) === false\n                )\n                  return false;\n                coordIndex++;\n              }\n              geometryIndex++;\n            }\n            multiFeatureIndex++;\n          }\n          break;\n        case \"GeometryCollection\":\n          for (j = 0; j < geometry.geometries.length; j++)\n            if (\n              coordEach(geometry.geometries[j], callback, excludeWrapCoord) ===\n              false\n            )\n              return false;\n          break;\n        default:\n          throw new Error(\"Unknown Geometry Type\");\n      }\n    }\n  }\n}\n\n/**\n * Callback for coordReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback coordReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Array<number>} currentCoord The current coordinate being processed.\n * @param {number} coordIndex The current index of the coordinate being processed.\n * Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n */\n\n/**\n * Reduce coordinates in any GeoJSON object, similar to Array.reduce()\n *\n * @name coordReduce\n * @param {FeatureCollection|Geometry|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentCoord, coordIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.coordReduce(features, function (previousValue, currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=previousValue\n *   //=currentCoord\n *   //=coordIndex\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   return currentCoord;\n * });\n */\nfunction coordReduce(geojson, callback, initialValue, excludeWrapCoord) {\n  var previousValue = initialValue;\n  coordEach(\n    geojson,\n    function (\n      currentCoord,\n      coordIndex,\n      featureIndex,\n      multiFeatureIndex,\n      geometryIndex\n    ) {\n      if (coordIndex === 0 && initialValue === undefined)\n        previousValue = currentCoord;\n      else\n        previousValue = callback(\n          previousValue,\n          currentCoord,\n          coordIndex,\n          featureIndex,\n          multiFeatureIndex,\n          geometryIndex\n        );\n    },\n    excludeWrapCoord\n  );\n  return previousValue;\n}\n\n/**\n * Callback for propEach\n *\n * @callback propEachCallback\n * @param {Object} currentProperties The current Properties being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Iterate over properties in any GeoJSON object, similar to Array.forEach()\n *\n * @name propEach\n * @param {FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentProperties, featureIndex)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.propEach(features, function (currentProperties, featureIndex) {\n *   //=currentProperties\n *   //=featureIndex\n * });\n */\nfunction propEach(geojson, callback) {\n  var i;\n  switch (geojson.type) {\n    case \"FeatureCollection\":\n      for (i = 0; i < geojson.features.length; i++) {\n        if (callback(geojson.features[i].properties, i) === false) break;\n      }\n      break;\n    case \"Feature\":\n      callback(geojson.properties, 0);\n      break;\n  }\n}\n\n/**\n * Callback for propReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback propReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {*} currentProperties The current Properties being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Reduce properties in any GeoJSON object into a single value,\n * similar to how Array.reduce works. However, in this case we lazily run\n * the reduction, so an array of all properties is unnecessary.\n *\n * @name propReduce\n * @param {FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentProperties, featureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.propReduce(features, function (previousValue, currentProperties, featureIndex) {\n *   //=previousValue\n *   //=currentProperties\n *   //=featureIndex\n *   return currentProperties\n * });\n */\nfunction propReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  propEach(geojson, function (currentProperties, featureIndex) {\n    if (featureIndex === 0 && initialValue === undefined)\n      previousValue = currentProperties;\n    else\n      previousValue = callback(previousValue, currentProperties, featureIndex);\n  });\n  return previousValue;\n}\n\n/**\n * Callback for featureEach\n *\n * @callback featureEachCallback\n * @param {Feature<any>} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Iterate over features in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @name featureEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentFeature, featureIndex)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {foo: 'bar'}),\n *   turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.featureEach(features, function (currentFeature, featureIndex) {\n *   //=currentFeature\n *   //=featureIndex\n * });\n */\nfunction featureEach(geojson, callback) {\n  if (geojson.type === \"Feature\") {\n    callback(geojson, 0);\n  } else if (geojson.type === \"FeatureCollection\") {\n    for (var i = 0; i < geojson.features.length; i++) {\n      if (callback(geojson.features[i], i) === false) break;\n    }\n  }\n}\n\n/**\n * Callback for featureReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback featureReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Reduce features in any GeoJSON object, similar to Array.reduce().\n *\n * @name featureReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.featureReduce(features, function (previousValue, currentFeature, featureIndex) {\n *   //=previousValue\n *   //=currentFeature\n *   //=featureIndex\n *   return currentFeature\n * });\n */\nfunction featureReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  featureEach(geojson, function (currentFeature, featureIndex) {\n    if (featureIndex === 0 && initialValue === undefined)\n      previousValue = currentFeature;\n    else previousValue = callback(previousValue, currentFeature, featureIndex);\n  });\n  return previousValue;\n}\n\n/**\n * Get all coordinates from any GeoJSON object.\n *\n * @name coordAll\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @returns {Array<Array<number>>} coordinate position array\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {foo: 'bar'}),\n *   turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * var coords = turf.coordAll(features);\n * //= [[26, 37], [36, 53]]\n */\nfunction coordAll(geojson) {\n  var coords = [];\n  coordEach(geojson, function (coord) {\n    coords.push(coord);\n  });\n  return coords;\n}\n\n/**\n * Callback for geomEach\n *\n * @callback geomEachCallback\n * @param {Geometry} currentGeometry The current Geometry being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {Object} featureProperties The current Feature Properties being processed.\n * @param {Array<number>} featureBBox The current Feature BBox being processed.\n * @param {number|string} featureId The current Feature Id being processed.\n */\n\n/**\n * Iterate over each geometry in any GeoJSON object, similar to Array.forEach()\n *\n * @name geomEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.geomEach(features, function (currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n *   //=currentGeometry\n *   //=featureIndex\n *   //=featureProperties\n *   //=featureBBox\n *   //=featureId\n * });\n */\nfunction geomEach(geojson, callback) {\n  var i,\n    j,\n    g,\n    geometry,\n    stopG,\n    geometryMaybeCollection,\n    isGeometryCollection,\n    featureProperties,\n    featureBBox,\n    featureId,\n    featureIndex = 0,\n    isFeatureCollection = geojson.type === \"FeatureCollection\",\n    isFeature = geojson.type === \"Feature\",\n    stop = isFeatureCollection ? geojson.features.length : 1;\n\n  // This logic may look a little weird. The reason why it is that way\n  // is because it's trying to be fast. GeoJSON supports multiple kinds\n  // of objects at its root: FeatureCollection, Features, Geometries.\n  // This function has the responsibility of handling all of them, and that\n  // means that some of the `for` loops you see below actually just don't apply\n  // to certain inputs. For instance, if you give this just a\n  // Point geometry, then both loops are short-circuited and all we do\n  // is gradually rename the input until it's called 'geometry'.\n  //\n  // This also aims to allocate as few resources as possible: just a\n  // few numbers and booleans, rather than any temporary arrays as would\n  // be required with the normalization approach.\n  for (i = 0; i < stop; i++) {\n    geometryMaybeCollection = isFeatureCollection\n      ? geojson.features[i].geometry\n      : isFeature\n      ? geojson.geometry\n      : geojson;\n    featureProperties = isFeatureCollection\n      ? geojson.features[i].properties\n      : isFeature\n      ? geojson.properties\n      : {};\n    featureBBox = isFeatureCollection\n      ? geojson.features[i].bbox\n      : isFeature\n      ? geojson.bbox\n      : undefined;\n    featureId = isFeatureCollection\n      ? geojson.features[i].id\n      : isFeature\n      ? geojson.id\n      : undefined;\n    isGeometryCollection = geometryMaybeCollection\n      ? geometryMaybeCollection.type === \"GeometryCollection\"\n      : false;\n    stopG = isGeometryCollection\n      ? geometryMaybeCollection.geometries.length\n      : 1;\n\n    for (g = 0; g < stopG; g++) {\n      geometry = isGeometryCollection\n        ? geometryMaybeCollection.geometries[g]\n        : geometryMaybeCollection;\n\n      // Handle null Geometry\n      if (geometry === null) {\n        if (\n          callback(\n            null,\n            featureIndex,\n            featureProperties,\n            featureBBox,\n            featureId\n          ) === false\n        )\n          return false;\n        continue;\n      }\n      switch (geometry.type) {\n        case \"Point\":\n        case \"LineString\":\n        case \"MultiPoint\":\n        case \"Polygon\":\n        case \"MultiLineString\":\n        case \"MultiPolygon\": {\n          if (\n            callback(\n              geometry,\n              featureIndex,\n              featureProperties,\n              featureBBox,\n              featureId\n            ) === false\n          )\n            return false;\n          break;\n        }\n        case \"GeometryCollection\": {\n          for (j = 0; j < geometry.geometries.length; j++) {\n            if (\n              callback(\n                geometry.geometries[j],\n                featureIndex,\n                featureProperties,\n                featureBBox,\n                featureId\n              ) === false\n            )\n              return false;\n          }\n          break;\n        }\n        default:\n          throw new Error(\"Unknown Geometry Type\");\n      }\n    }\n    // Only increase `featureIndex` per each feature\n    featureIndex++;\n  }\n}\n\n/**\n * Callback for geomReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback geomReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Geometry} currentGeometry The current Geometry being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {Object} featureProperties The current Feature Properties being processed.\n * @param {Array<number>} featureBBox The current Feature BBox being processed.\n * @param {number|string} featureId The current Feature Id being processed.\n */\n\n/**\n * Reduce geometry in any GeoJSON object, similar to Array.reduce().\n *\n * @name geomReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.geomReduce(features, function (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n *   //=previousValue\n *   //=currentGeometry\n *   //=featureIndex\n *   //=featureProperties\n *   //=featureBBox\n *   //=featureId\n *   return currentGeometry\n * });\n */\nfunction geomReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  geomEach(\n    geojson,\n    function (\n      currentGeometry,\n      featureIndex,\n      featureProperties,\n      featureBBox,\n      featureId\n    ) {\n      if (featureIndex === 0 && initialValue === undefined)\n        previousValue = currentGeometry;\n      else\n        previousValue = callback(\n          previousValue,\n          currentGeometry,\n          featureIndex,\n          featureProperties,\n          featureBBox,\n          featureId\n        );\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Callback for flattenEach\n *\n * @callback flattenEachCallback\n * @param {Feature} currentFeature The current flattened feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n */\n\n/**\n * Iterate over flattened features in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @name flattenEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentFeature, featureIndex, multiFeatureIndex)\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n * ]);\n *\n * turf.flattenEach(features, function (currentFeature, featureIndex, multiFeatureIndex) {\n *   //=currentFeature\n *   //=featureIndex\n *   //=multiFeatureIndex\n * });\n */\nfunction flattenEach(geojson, callback) {\n  geomEach(geojson, function (geometry, featureIndex, properties, bbox, id) {\n    // Callback for single geometry\n    var type = geometry === null ? null : geometry.type;\n    switch (type) {\n      case null:\n      case \"Point\":\n      case \"LineString\":\n      case \"Polygon\":\n        if (\n          callback(\n            helpers.feature(geometry, properties, { bbox: bbox, id: id }),\n            featureIndex,\n            0\n          ) === false\n        )\n          return false;\n        return;\n    }\n\n    var geomType;\n\n    // Callback for multi-geometry\n    switch (type) {\n      case \"MultiPoint\":\n        geomType = \"Point\";\n        break;\n      case \"MultiLineString\":\n        geomType = \"LineString\";\n        break;\n      case \"MultiPolygon\":\n        geomType = \"Polygon\";\n        break;\n    }\n\n    for (\n      var multiFeatureIndex = 0;\n      multiFeatureIndex < geometry.coordinates.length;\n      multiFeatureIndex++\n    ) {\n      var coordinate = geometry.coordinates[multiFeatureIndex];\n      var geom = {\n        type: geomType,\n        coordinates: coordinate,\n      };\n      if (\n        callback(helpers.feature(geom, properties), featureIndex, multiFeatureIndex) ===\n        false\n      )\n        return false;\n    }\n  });\n}\n\n/**\n * Callback for flattenReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback flattenReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n */\n\n/**\n * Reduce flattened features in any GeoJSON object, similar to Array.reduce().\n *\n * @name flattenReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex, multiFeatureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n * ]);\n *\n * turf.flattenReduce(features, function (previousValue, currentFeature, featureIndex, multiFeatureIndex) {\n *   //=previousValue\n *   //=currentFeature\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   return currentFeature\n * });\n */\nfunction flattenReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  flattenEach(\n    geojson,\n    function (currentFeature, featureIndex, multiFeatureIndex) {\n      if (\n        featureIndex === 0 &&\n        multiFeatureIndex === 0 &&\n        initialValue === undefined\n      )\n        previousValue = currentFeature;\n      else\n        previousValue = callback(\n          previousValue,\n          currentFeature,\n          featureIndex,\n          multiFeatureIndex\n        );\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Callback for segmentEach\n *\n * @callback segmentEachCallback\n * @param {Feature<LineString>} currentSegment The current Segment being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n * @param {number} segmentIndex The current index of the Segment being processed.\n * @returns {void}\n */\n\n/**\n * Iterate over 2-vertex line segment in any GeoJSON object, similar to Array.forEach()\n * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON\n * @param {Function} callback a method that takes (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex)\n * @returns {void}\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n *\n * // Iterate over GeoJSON by 2-vertex segments\n * turf.segmentEach(polygon, function (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n *   //=currentSegment\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   //=segmentIndex\n * });\n *\n * // Calculate the total number of segments\n * var total = 0;\n * turf.segmentEach(polygon, function () {\n *     total++;\n * });\n */\nfunction segmentEach(geojson, callback) {\n  flattenEach(geojson, function (feature, featureIndex, multiFeatureIndex) {\n    var segmentIndex = 0;\n\n    // Exclude null Geometries\n    if (!feature.geometry) return;\n    // (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n    var type = feature.geometry.type;\n    if (type === \"Point\" || type === \"MultiPoint\") return;\n\n    // Generate 2-vertex line segments\n    var previousCoords;\n    var previousFeatureIndex = 0;\n    var previousMultiIndex = 0;\n    var prevGeomIndex = 0;\n    if (\n      coordEach(\n        feature,\n        function (\n          currentCoord,\n          coordIndex,\n          featureIndexCoord,\n          multiPartIndexCoord,\n          geometryIndex\n        ) {\n          // Simulating a meta.coordReduce() since `reduce` operations cannot be stopped by returning `false`\n          if (\n            previousCoords === undefined ||\n            featureIndex > previousFeatureIndex ||\n            multiPartIndexCoord > previousMultiIndex ||\n            geometryIndex > prevGeomIndex\n          ) {\n            previousCoords = currentCoord;\n            previousFeatureIndex = featureIndex;\n            previousMultiIndex = multiPartIndexCoord;\n            prevGeomIndex = geometryIndex;\n            segmentIndex = 0;\n            return;\n          }\n          var currentSegment = helpers.lineString(\n            [previousCoords, currentCoord],\n            feature.properties\n          );\n          if (\n            callback(\n              currentSegment,\n              featureIndex,\n              multiFeatureIndex,\n              geometryIndex,\n              segmentIndex\n            ) === false\n          )\n            return false;\n          segmentIndex++;\n          previousCoords = currentCoord;\n        }\n      ) === false\n    )\n      return false;\n  });\n}\n\n/**\n * Callback for segmentReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback segmentReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature<LineString>} currentSegment The current Segment being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n * @param {number} segmentIndex The current index of the Segment being processed.\n */\n\n/**\n * Reduce 2-vertex line segment in any GeoJSON object, similar to Array.reduce()\n * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON\n * @param {Function} callback a method that takes (previousValue, currentSegment, currentIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {void}\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n *\n * // Iterate over GeoJSON by 2-vertex segments\n * turf.segmentReduce(polygon, function (previousSegment, currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n *   //= previousSegment\n *   //= currentSegment\n *   //= featureIndex\n *   //= multiFeatureIndex\n *   //= geometryIndex\n *   //= segmentIndex\n *   return currentSegment\n * });\n *\n * // Calculate the total number of segments\n * var initialValue = 0\n * var total = turf.segmentReduce(polygon, function (previousValue) {\n *     previousValue++;\n *     return previousValue;\n * }, initialValue);\n */\nfunction segmentReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  var started = false;\n  segmentEach(\n    geojson,\n    function (\n      currentSegment,\n      featureIndex,\n      multiFeatureIndex,\n      geometryIndex,\n      segmentIndex\n    ) {\n      if (started === false && initialValue === undefined)\n        previousValue = currentSegment;\n      else\n        previousValue = callback(\n          previousValue,\n          currentSegment,\n          featureIndex,\n          multiFeatureIndex,\n          geometryIndex,\n          segmentIndex\n        );\n      started = true;\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Callback for lineEach\n *\n * @callback lineEachCallback\n * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed\n * @param {number} featureIndex The current index of the Feature being processed\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed\n * @param {number} geometryIndex The current index of the Geometry being processed\n */\n\n/**\n * Iterate over line or ring coordinates in LineString, Polygon, MultiLineString, MultiPolygon Features or Geometries,\n * similar to Array.forEach.\n *\n * @name lineEach\n * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object\n * @param {Function} callback a method that takes (currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n * @example\n * var multiLine = turf.multiLineString([\n *   [[26, 37], [35, 45]],\n *   [[36, 53], [38, 50], [41, 55]]\n * ]);\n *\n * turf.lineEach(multiLine, function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=currentLine\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n * });\n */\nfunction lineEach(geojson, callback) {\n  // validation\n  if (!geojson) throw new Error(\"geojson is required\");\n\n  flattenEach(geojson, function (feature, featureIndex, multiFeatureIndex) {\n    if (feature.geometry === null) return;\n    var type = feature.geometry.type;\n    var coords = feature.geometry.coordinates;\n    switch (type) {\n      case \"LineString\":\n        if (callback(feature, featureIndex, multiFeatureIndex, 0, 0) === false)\n          return false;\n        break;\n      case \"Polygon\":\n        for (\n          var geometryIndex = 0;\n          geometryIndex < coords.length;\n          geometryIndex++\n        ) {\n          if (\n            callback(\n              helpers.lineString(coords[geometryIndex], feature.properties),\n              featureIndex,\n              multiFeatureIndex,\n              geometryIndex\n            ) === false\n          )\n            return false;\n        }\n        break;\n    }\n  });\n}\n\n/**\n * Callback for lineReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback lineReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed.\n * @param {number} featureIndex The current index of the Feature being processed\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed\n * @param {number} geometryIndex The current index of the Geometry being processed\n */\n\n/**\n * Reduce features in any GeoJSON object, similar to Array.reduce().\n *\n * @name lineReduce\n * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object\n * @param {Function} callback a method that takes (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var multiPoly = turf.multiPolygon([\n *   turf.polygon([[[12,48],[2,41],[24,38],[12,48]], [[9,44],[13,41],[13,45],[9,44]]]),\n *   turf.polygon([[[5, 5], [0, 0], [2, 2], [4, 4], [5, 5]]])\n * ]);\n *\n * turf.lineReduce(multiPoly, function (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=previousValue\n *   //=currentLine\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   return currentLine\n * });\n */\nfunction lineReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  lineEach(\n    geojson,\n    function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n      if (featureIndex === 0 && initialValue === undefined)\n        previousValue = currentLine;\n      else\n        previousValue = callback(\n          previousValue,\n          currentLine,\n          featureIndex,\n          multiFeatureIndex,\n          geometryIndex\n        );\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Finds a particular 2-vertex LineString Segment from a GeoJSON using `@turf/meta` indexes.\n *\n * Negative indexes are permitted.\n * Point & MultiPoint will always return null.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.featureIndex=0] Feature Index\n * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index\n * @param {number} [options.geometryIndex=0] Geometry Index\n * @param {number} [options.segmentIndex=0] Segment Index\n * @param {Object} [options.properties={}] Translate Properties to output LineString\n * @param {BBox} [options.bbox={}] Translate BBox to output LineString\n * @param {number|string} [options.id={}] Translate Id to output LineString\n * @returns {Feature<LineString>} 2-vertex GeoJSON Feature LineString\n * @example\n * var multiLine = turf.multiLineString([\n *     [[10, 10], [50, 30], [30, 40]],\n *     [[-10, -10], [-50, -30], [-30, -40]]\n * ]);\n *\n * // First Segment (defaults are 0)\n * turf.findSegment(multiLine);\n * // => Feature<LineString<[[10, 10], [50, 30]]>>\n *\n * // First Segment of 2nd Multi Feature\n * turf.findSegment(multiLine, {multiFeatureIndex: 1});\n * // => Feature<LineString<[[-10, -10], [-50, -30]]>>\n *\n * // Last Segment of Last Multi Feature\n * turf.findSegment(multiLine, {multiFeatureIndex: -1, segmentIndex: -1});\n * // => Feature<LineString<[[-50, -30], [-30, -40]]>>\n */\nfunction findSegment(geojson, options) {\n  // Optional Parameters\n  options = options || {};\n  if (!helpers.isObject(options)) throw new Error(\"options is invalid\");\n  var featureIndex = options.featureIndex || 0;\n  var multiFeatureIndex = options.multiFeatureIndex || 0;\n  var geometryIndex = options.geometryIndex || 0;\n  var segmentIndex = options.segmentIndex || 0;\n\n  // Find FeatureIndex\n  var properties = options.properties;\n  var geometry;\n\n  switch (geojson.type) {\n    case \"FeatureCollection\":\n      if (featureIndex < 0)\n        featureIndex = geojson.features.length + featureIndex;\n      properties = properties || geojson.features[featureIndex].properties;\n      geometry = geojson.features[featureIndex].geometry;\n      break;\n    case \"Feature\":\n      properties = properties || geojson.properties;\n      geometry = geojson.geometry;\n      break;\n    case \"Point\":\n    case \"MultiPoint\":\n      return null;\n    case \"LineString\":\n    case \"Polygon\":\n    case \"MultiLineString\":\n    case \"MultiPolygon\":\n      geometry = geojson;\n      break;\n    default:\n      throw new Error(\"geojson is invalid\");\n  }\n\n  // Find SegmentIndex\n  if (geometry === null) return null;\n  var coords = geometry.coordinates;\n  switch (geometry.type) {\n    case \"Point\":\n    case \"MultiPoint\":\n      return null;\n    case \"LineString\":\n      if (segmentIndex < 0) segmentIndex = coords.length + segmentIndex - 1;\n      return helpers.lineString(\n        [coords[segmentIndex], coords[segmentIndex + 1]],\n        properties,\n        options\n      );\n    case \"Polygon\":\n      if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;\n      if (segmentIndex < 0)\n        segmentIndex = coords[geometryIndex].length + segmentIndex - 1;\n      return helpers.lineString(\n        [\n          coords[geometryIndex][segmentIndex],\n          coords[geometryIndex][segmentIndex + 1],\n        ],\n        properties,\n        options\n      );\n    case \"MultiLineString\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (segmentIndex < 0)\n        segmentIndex = coords[multiFeatureIndex].length + segmentIndex - 1;\n      return helpers.lineString(\n        [\n          coords[multiFeatureIndex][segmentIndex],\n          coords[multiFeatureIndex][segmentIndex + 1],\n        ],\n        properties,\n        options\n      );\n    case \"MultiPolygon\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (geometryIndex < 0)\n        geometryIndex = coords[multiFeatureIndex].length + geometryIndex;\n      if (segmentIndex < 0)\n        segmentIndex =\n          coords[multiFeatureIndex][geometryIndex].length - segmentIndex - 1;\n      return helpers.lineString(\n        [\n          coords[multiFeatureIndex][geometryIndex][segmentIndex],\n          coords[multiFeatureIndex][geometryIndex][segmentIndex + 1],\n        ],\n        properties,\n        options\n      );\n  }\n  throw new Error(\"geojson is invalid\");\n}\n\n/**\n * Finds a particular Point from a GeoJSON using `@turf/meta` indexes.\n *\n * Negative indexes are permitted.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.featureIndex=0] Feature Index\n * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index\n * @param {number} [options.geometryIndex=0] Geometry Index\n * @param {number} [options.coordIndex=0] Coord Index\n * @param {Object} [options.properties={}] Translate Properties to output Point\n * @param {BBox} [options.bbox={}] Translate BBox to output Point\n * @param {number|string} [options.id={}] Translate Id to output Point\n * @returns {Feature<Point>} 2-vertex GeoJSON Feature Point\n * @example\n * var multiLine = turf.multiLineString([\n *     [[10, 10], [50, 30], [30, 40]],\n *     [[-10, -10], [-50, -30], [-30, -40]]\n * ]);\n *\n * // First Segment (defaults are 0)\n * turf.findPoint(multiLine);\n * // => Feature<Point<[10, 10]>>\n *\n * // First Segment of the 2nd Multi-Feature\n * turf.findPoint(multiLine, {multiFeatureIndex: 1});\n * // => Feature<Point<[-10, -10]>>\n *\n * // Last Segment of last Multi-Feature\n * turf.findPoint(multiLine, {multiFeatureIndex: -1, coordIndex: -1});\n * // => Feature<Point<[-30, -40]>>\n */\nfunction findPoint(geojson, options) {\n  // Optional Parameters\n  options = options || {};\n  if (!helpers.isObject(options)) throw new Error(\"options is invalid\");\n  var featureIndex = options.featureIndex || 0;\n  var multiFeatureIndex = options.multiFeatureIndex || 0;\n  var geometryIndex = options.geometryIndex || 0;\n  var coordIndex = options.coordIndex || 0;\n\n  // Find FeatureIndex\n  var properties = options.properties;\n  var geometry;\n\n  switch (geojson.type) {\n    case \"FeatureCollection\":\n      if (featureIndex < 0)\n        featureIndex = geojson.features.length + featureIndex;\n      properties = properties || geojson.features[featureIndex].properties;\n      geometry = geojson.features[featureIndex].geometry;\n      break;\n    case \"Feature\":\n      properties = properties || geojson.properties;\n      geometry = geojson.geometry;\n      break;\n    case \"Point\":\n    case \"MultiPoint\":\n      return null;\n    case \"LineString\":\n    case \"Polygon\":\n    case \"MultiLineString\":\n    case \"MultiPolygon\":\n      geometry = geojson;\n      break;\n    default:\n      throw new Error(\"geojson is invalid\");\n  }\n\n  // Find Coord Index\n  if (geometry === null) return null;\n  var coords = geometry.coordinates;\n  switch (geometry.type) {\n    case \"Point\":\n      return helpers.point(coords, properties, options);\n    case \"MultiPoint\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      return helpers.point(coords[multiFeatureIndex], properties, options);\n    case \"LineString\":\n      if (coordIndex < 0) coordIndex = coords.length + coordIndex;\n      return helpers.point(coords[coordIndex], properties, options);\n    case \"Polygon\":\n      if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;\n      if (coordIndex < 0)\n        coordIndex = coords[geometryIndex].length + coordIndex;\n      return helpers.point(coords[geometryIndex][coordIndex], properties, options);\n    case \"MultiLineString\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (coordIndex < 0)\n        coordIndex = coords[multiFeatureIndex].length + coordIndex;\n      return helpers.point(coords[multiFeatureIndex][coordIndex], properties, options);\n    case \"MultiPolygon\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (geometryIndex < 0)\n        geometryIndex = coords[multiFeatureIndex].length + geometryIndex;\n      if (coordIndex < 0)\n        coordIndex =\n          coords[multiFeatureIndex][geometryIndex].length - coordIndex;\n      return helpers.point(\n        coords[multiFeatureIndex][geometryIndex][coordIndex],\n        properties,\n        options\n      );\n  }\n  throw new Error(\"geojson is invalid\");\n}\n\nexports.coordAll = coordAll;\nexports.coordEach = coordEach;\nexports.coordReduce = coordReduce;\nexports.featureEach = featureEach;\nexports.featureReduce = featureReduce;\nexports.findPoint = findPoint;\nexports.findSegment = findSegment;\nexports.flattenEach = flattenEach;\nexports.flattenReduce = flattenReduce;\nexports.geomEach = geomEach;\nexports.geomReduce = geomReduce;\nexports.lineEach = lineEach;\nexports.lineReduce = lineReduce;\nexports.propEach = propEach;\nexports.propReduce = propReduce;\nexports.segmentEach = segmentEach;\nexports.segmentReduce = segmentReduce;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar meta_1 = require(\"@turf/meta\");\n/**\n * Takes a set of features, calculates the bbox of all input features, and returns a bounding box.\n *\n * @name bbox\n * @param {GeoJSON} geojson any GeoJSON object\n * @returns {BBox} bbox extent in [minX, minY, maxX, maxY] order\n * @example\n * var line = turf.lineString([[-74, 40], [-78, 42], [-82, 35]]);\n * var bbox = turf.bbox(line);\n * var bboxPolygon = turf.bboxPolygon(bbox);\n *\n * //addToMap\n * var addToMap = [line, bboxPolygon]\n */\nfunction bbox(geojson) {\n    var result = [Infinity, Infinity, -Infinity, -Infinity];\n    meta_1.coordEach(geojson, function (coord) {\n        if (result[0] > coord[0]) {\n            result[0] = coord[0];\n        }\n        if (result[1] > coord[1]) {\n            result[1] = coord[1];\n        }\n        if (result[2] < coord[0]) {\n            result[2] = coord[0];\n        }\n        if (result[3] < coord[1]) {\n            result[3] = coord[1];\n        }\n    });\n    return result;\n}\nbbox[\"default\"] = bbox;\nexports.default = bbox;\n","var rbush = require('rbush');\nvar helpers = require('@turf/helpers');\nvar meta = require('@turf/meta');\nvar turfBBox = require('@turf/bbox').default;\nvar featureEach = meta.featureEach;\nvar coordEach = meta.coordEach;\nvar polygon = helpers.polygon;\nvar featureCollection = helpers.featureCollection;\n\n/**\n * GeoJSON implementation of [RBush](https://github.com/mourner/rbush#rbush) spatial index.\n *\n * @name rbush\n * @param {number} [maxEntries=9] defines the maximum number of entries in a tree node. 9 (used by default) is a\n * reasonable choice for most applications. Higher value means faster insertion and slower search, and vice versa.\n * @returns {RBush} GeoJSON RBush\n * @example\n * var geojsonRbush = require('geojson-rbush').default;\n * var tree = geojsonRbush();\n */\nfunction geojsonRbush(maxEntries) {\n    var tree = new rbush(maxEntries);\n    /**\n     * [insert](https://github.com/mourner/rbush#data-format)\n     *\n     * @param {Feature} feature insert single GeoJSON Feature\n     * @returns {RBush} GeoJSON RBush\n     * @example\n     * var poly = turf.polygon([[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]]);\n     * tree.insert(poly)\n     */\n    tree.insert = function (feature) {\n        if (feature.type !== 'Feature') throw new Error('invalid feature');\n        feature.bbox = feature.bbox ? feature.bbox : turfBBox(feature);\n        return rbush.prototype.insert.call(this, feature);\n    };\n\n    /**\n     * [load](https://github.com/mourner/rbush#bulk-inserting-data)\n     *\n     * @param {FeatureCollection|Array<Feature>} features load entire GeoJSON FeatureCollection\n     * @returns {RBush} GeoJSON RBush\n     * @example\n     * var polys = turf.polygons([\n     *     [[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]],\n     *     [[[-93, 32], [-83, 32], [-83, 39], [-93, 39], [-93, 32]]]\n     * ]);\n     * tree.load(polys);\n     */\n    tree.load = function (features) {\n        var load = [];\n        // Load an Array of Features\n        if (Array.isArray(features)) {\n            features.forEach(function (feature) {\n                if (feature.type !== 'Feature') throw new Error('invalid features');\n                feature.bbox = feature.bbox ? feature.bbox : turfBBox(feature);\n                load.push(feature);\n            });\n        } else {\n            // Load a FeatureCollection\n            featureEach(features, function (feature) {\n                if (feature.type !== 'Feature') throw new Error('invalid features');\n                feature.bbox = feature.bbox ? feature.bbox : turfBBox(feature);\n                load.push(feature);\n            });\n        }\n        return rbush.prototype.load.call(this, load);\n    };\n\n    /**\n     * [remove](https://github.com/mourner/rbush#removing-data)\n     *\n     * @param {Feature} feature remove single GeoJSON Feature\n     * @param {Function} equals Pass a custom equals function to compare by value for removal.\n     * @returns {RBush} GeoJSON RBush\n     * @example\n     * var poly = turf.polygon([[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]]);\n     *\n     * tree.remove(poly);\n     */\n    tree.remove = function (feature, equals) {\n        if (feature.type !== 'Feature') throw new Error('invalid feature');\n        feature.bbox = feature.bbox ? feature.bbox : turfBBox(feature);\n        return rbush.prototype.remove.call(this, feature, equals);\n    };\n\n    /**\n     * [clear](https://github.com/mourner/rbush#removing-data)\n     *\n     * @returns {RBush} GeoJSON Rbush\n     * @example\n     * tree.clear()\n     */\n    tree.clear = function () {\n        return rbush.prototype.clear.call(this);\n    };\n\n    /**\n     * [search](https://github.com/mourner/rbush#search)\n     *\n     * @param {BBox|FeatureCollection|Feature} geojson search with GeoJSON\n     * @returns {FeatureCollection} all features that intersects with the given GeoJSON.\n     * @example\n     * var poly = turf.polygon([[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]]);\n     *\n     * tree.search(poly);\n     */\n    tree.search = function (geojson) {\n        var features = rbush.prototype.search.call(this, this.toBBox(geojson));\n        return featureCollection(features);\n    };\n\n    /**\n     * [collides](https://github.com/mourner/rbush#collisions)\n     *\n     * @param {BBox|FeatureCollection|Feature} geojson collides with GeoJSON\n     * @returns {boolean} true if there are any items intersecting the given GeoJSON, otherwise false.\n     * @example\n     * var poly = turf.polygon([[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]]);\n     *\n     * tree.collides(poly);\n     */\n    tree.collides = function (geojson) {\n        return rbush.prototype.collides.call(this, this.toBBox(geojson));\n    };\n\n    /**\n     * [all](https://github.com/mourner/rbush#search)\n     *\n     * @returns {FeatureCollection} all the features in RBush\n     * @example\n     * tree.all()\n     */\n    tree.all = function () {\n        var features = rbush.prototype.all.call(this);\n        return featureCollection(features);\n    };\n\n    /**\n     * [toJSON](https://github.com/mourner/rbush#export-and-import)\n     *\n     * @returns {any} export data as JSON object\n     * @example\n     * var exported = tree.toJSON()\n     */\n    tree.toJSON = function () {\n        return rbush.prototype.toJSON.call(this);\n    };\n\n    /**\n     * [fromJSON](https://github.com/mourner/rbush#export-and-import)\n     *\n     * @param {any} json import previously exported data\n     * @returns {RBush} GeoJSON RBush\n     * @example\n     * var exported = {\n     *   \"children\": [\n     *     {\n     *       \"type\": \"Feature\",\n     *       \"geometry\": {\n     *         \"type\": \"Point\",\n     *         \"coordinates\": [110, 50]\n     *       },\n     *       \"properties\": {},\n     *       \"bbox\": [110, 50, 110, 50]\n     *     }\n     *   ],\n     *   \"height\": 1,\n     *   \"leaf\": true,\n     *   \"minX\": 110,\n     *   \"minY\": 50,\n     *   \"maxX\": 110,\n     *   \"maxY\": 50\n     * }\n     * tree.fromJSON(exported)\n     */\n    tree.fromJSON = function (json) {\n        return rbush.prototype.fromJSON.call(this, json);\n    };\n\n    /**\n     * Converts GeoJSON to {minX, minY, maxX, maxY} schema\n     *\n     * @private\n     * @param {BBox|FeatureCollection|Feature} geojson feature(s) to retrieve BBox from\n     * @returns {Object} converted to {minX, minY, maxX, maxY}\n     */\n    tree.toBBox = function (geojson) {\n        var bbox;\n        if (geojson.bbox) bbox = geojson.bbox;\n        else if (Array.isArray(geojson) && geojson.length === 4) bbox = geojson;\n        else if (Array.isArray(geojson) && geojson.length === 6) bbox = [geojson[0], geojson[1], geojson[3], geojson[4]];\n        else if (geojson.type === 'Feature') bbox = turfBBox(geojson);\n        else if (geojson.type === 'FeatureCollection') bbox = turfBBox(geojson);\n        else throw new Error('invalid geojson')\n\n        return {\n            minX: bbox[0],\n            minY: bbox[1],\n            maxX: bbox[2],\n            maxY: bbox[3]\n        };\n    };\n    return tree;\n}\n\nmodule.exports = geojsonRbush;\nmodule.exports.default = geojsonRbush;\n","import { feature, featureCollection, point, } from \"@turf/helpers\";\nimport { getCoords } from \"@turf/invariant\";\nimport lineSegment from \"@turf/line-segment\";\nimport { featureEach } from \"@turf/meta\";\nimport rbush from \"geojson-rbush\";\n/**\n * Takes any LineString or Polygon GeoJSON and returns the intersecting point(s).\n *\n * @name lineIntersect\n * @param {GeoJSON} line1 any LineString or Polygon\n * @param {GeoJSON} line2 any LineString or Polygon\n * @returns {FeatureCollection<Point>} point(s) that intersect both\n * @example\n * var line1 = turf.lineString([[126, -11], [129, -21]]);\n * var line2 = turf.lineString([[123, -18], [131, -14]]);\n * var intersects = turf.lineIntersect(line1, line2);\n *\n * //addToMap\n * var addToMap = [line1, line2, intersects]\n */\nfunction lineIntersect(line1, line2) {\n    var unique = {};\n    var results = [];\n    // First, normalize geometries to features\n    // Then, handle simple 2-vertex segments\n    if (line1.type === \"LineString\") {\n        line1 = feature(line1);\n    }\n    if (line2.type === \"LineString\") {\n        line2 = feature(line2);\n    }\n    if (line1.type === \"Feature\" &&\n        line2.type === \"Feature\" &&\n        line1.geometry !== null &&\n        line2.geometry !== null &&\n        line1.geometry.type === \"LineString\" &&\n        line2.geometry.type === \"LineString\" &&\n        line1.geometry.coordinates.length === 2 &&\n        line2.geometry.coordinates.length === 2) {\n        var intersect = intersects(line1, line2);\n        if (intersect) {\n            results.push(intersect);\n        }\n        return featureCollection(results);\n    }\n    // Handles complex GeoJSON Geometries\n    var tree = rbush();\n    tree.load(lineSegment(line2));\n    featureEach(lineSegment(line1), function (segment) {\n        featureEach(tree.search(segment), function (match) {\n            var intersect = intersects(segment, match);\n            if (intersect) {\n                // prevent duplicate points https://github.com/Turfjs/turf/issues/688\n                var key = getCoords(intersect).join(\",\");\n                if (!unique[key]) {\n                    unique[key] = true;\n                    results.push(intersect);\n                }\n            }\n        });\n    });\n    return featureCollection(results);\n}\n/**\n * Find a point that intersects LineStrings with two coordinates each\n *\n * @private\n * @param {Feature<LineString>} line1 GeoJSON LineString (Must only contain 2 coordinates)\n * @param {Feature<LineString>} line2 GeoJSON LineString (Must only contain 2 coordinates)\n * @returns {Feature<Point>} intersecting GeoJSON Point\n */\nfunction intersects(line1, line2) {\n    var coords1 = getCoords(line1);\n    var coords2 = getCoords(line2);\n    if (coords1.length !== 2) {\n        throw new Error(\"<intersects> line1 must only contain 2 coordinates\");\n    }\n    if (coords2.length !== 2) {\n        throw new Error(\"<intersects> line2 must only contain 2 coordinates\");\n    }\n    var x1 = coords1[0][0];\n    var y1 = coords1[0][1];\n    var x2 = coords1[1][0];\n    var y2 = coords1[1][1];\n    var x3 = coords2[0][0];\n    var y3 = coords2[0][1];\n    var x4 = coords2[1][0];\n    var y4 = coords2[1][1];\n    var denom = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);\n    var numeA = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);\n    var numeB = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);\n    if (denom === 0) {\n        if (numeA === 0 && numeB === 0) {\n            return null;\n        }\n        return null;\n    }\n    var uA = numeA / denom;\n    var uB = numeB / denom;\n    if (uA >= 0 && uA <= 1 && uB >= 0 && uB <= 1) {\n        var x = x1 + uA * (x2 - x1);\n        var y = y1 + uA * (y2 - y1);\n        return point([x, y]);\n    }\n    return null;\n}\nexport default lineIntersect;\n","import { featureCollection, lineString, multiLineString } from \"@turf/helpers\";\nimport { getGeom } from \"@turf/invariant\";\n/**\n * Converts a {@link Polygon} to {@link LineString|(Multi)LineString} or {@link MultiPolygon} to a\n * {@link FeatureCollection} of {@link LineString|(Multi)LineString}.\n *\n * @name polygonToLine\n * @param {Feature<Polygon|MultiPolygon>} poly Feature to convert\n * @param {Object} [options={}] Optional parameters\n * @param {Object} [options.properties={}] translates GeoJSON properties to Feature\n * @returns {FeatureCollection|Feature<LineString|MultiLinestring>} converted (Multi)Polygon to (Multi)LineString\n * @example\n * var poly = turf.polygon([[[125, -30], [145, -30], [145, -20], [125, -20], [125, -30]]]);\n *\n * var line = turf.polygonToLine(poly);\n *\n * //addToMap\n * var addToMap = [line];\n */\nexport default function (poly, options) {\n    if (options === void 0) { options = {}; }\n    var geom = getGeom(poly);\n    if (!options.properties && poly.type === \"Feature\") {\n        options.properties = poly.properties;\n    }\n    switch (geom.type) {\n        case \"Polygon\":\n            return polygonToLine(geom, options);\n        case \"MultiPolygon\":\n            return multiPolygonToLine(geom, options);\n        default:\n            throw new Error(\"invalid poly\");\n    }\n}\n/**\n * @private\n */\nexport function polygonToLine(poly, options) {\n    if (options === void 0) { options = {}; }\n    var geom = getGeom(poly);\n    var coords = geom.coordinates;\n    var properties = options.properties\n        ? options.properties\n        : poly.type === \"Feature\"\n            ? poly.properties\n            : {};\n    return coordsToLine(coords, properties);\n}\n/**\n * @private\n */\nexport function multiPolygonToLine(multiPoly, options) {\n    if (options === void 0) { options = {}; }\n    var geom = getGeom(multiPoly);\n    var coords = geom.coordinates;\n    var properties = options.properties\n        ? options.properties\n        : multiPoly.type === \"Feature\"\n            ? multiPoly.properties\n            : {};\n    var lines = [];\n    coords.forEach(function (coord) {\n        lines.push(coordsToLine(coord, properties));\n    });\n    return featureCollection(lines);\n}\n/**\n * @private\n */\nexport function coordsToLine(coords, properties) {\n    if (coords.length > 1) {\n        return multiLineString(coords, properties);\n    }\n    return lineString(coords[0], properties);\n}\n","import booleanPointInPolygon from \"@turf/boolean-point-in-polygon\";\nimport lineIntersect from \"@turf/line-intersect\";\nimport { flattenEach } from \"@turf/meta\";\nimport polygonToLine from \"@turf/polygon-to-line\";\n/**\n * Boolean-disjoint returns (TRUE) if the intersection of the two geometries is an empty set.\n *\n * @name booleanDisjoint\n * @param {Geometry|Feature<any>} feature1 GeoJSON Feature or Geometry\n * @param {Geometry|Feature<any>} feature2 GeoJSON Feature or Geometry\n * @returns {boolean} true/false\n * @example\n * var point = turf.point([2, 2]);\n * var line = turf.lineString([[1, 1], [1, 2], [1, 3], [1, 4]]);\n *\n * turf.booleanDisjoint(line, point);\n * //=true\n */\nfunction booleanDisjoint(feature1, feature2) {\n    var bool = true;\n    flattenEach(feature1, function (flatten1) {\n        flattenEach(feature2, function (flatten2) {\n            if (bool === false) {\n                return false;\n            }\n            bool = disjoint(flatten1.geometry, flatten2.geometry);\n        });\n    });\n    return bool;\n}\n/**\n * Disjoint operation for simple Geometries (Point/LineString/Polygon)\n *\n * @private\n * @param {Geometry<any>} geom1 GeoJSON Geometry\n * @param {Geometry<any>} geom2 GeoJSON Geometry\n * @returns {boolean} true/false\n */\nfunction disjoint(geom1, geom2) {\n    switch (geom1.type) {\n        case \"Point\":\n            switch (geom2.type) {\n                case \"Point\":\n                    return !compareCoords(geom1.coordinates, geom2.coordinates);\n                case \"LineString\":\n                    return !isPointOnLine(geom2, geom1);\n                case \"Polygon\":\n                    return !booleanPointInPolygon(geom1, geom2);\n            }\n            /* istanbul ignore next */\n            break;\n        case \"LineString\":\n            switch (geom2.type) {\n                case \"Point\":\n                    return !isPointOnLine(geom1, geom2);\n                case \"LineString\":\n                    return !isLineOnLine(geom1, geom2);\n                case \"Polygon\":\n                    return !isLineInPoly(geom2, geom1);\n            }\n            /* istanbul ignore next */\n            break;\n        case \"Polygon\":\n            switch (geom2.type) {\n                case \"Point\":\n                    return !booleanPointInPolygon(geom2, geom1);\n                case \"LineString\":\n                    return !isLineInPoly(geom1, geom2);\n                case \"Polygon\":\n                    return !isPolyInPoly(geom2, geom1);\n            }\n    }\n    return false;\n}\n// http://stackoverflow.com/a/11908158/1979085\nfunction isPointOnLine(lineString, pt) {\n    for (var i = 0; i < lineString.coordinates.length - 1; i++) {\n        if (isPointOnLineSegment(lineString.coordinates[i], lineString.coordinates[i + 1], pt.coordinates)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction isLineOnLine(lineString1, lineString2) {\n    var doLinesIntersect = lineIntersect(lineString1, lineString2);\n    if (doLinesIntersect.features.length > 0) {\n        return true;\n    }\n    return false;\n}\nfunction isLineInPoly(polygon, lineString) {\n    for (var _i = 0, _a = lineString.coordinates; _i < _a.length; _i++) {\n        var coord = _a[_i];\n        if (booleanPointInPolygon(coord, polygon)) {\n            return true;\n        }\n    }\n    var doLinesIntersect = lineIntersect(lineString, polygonToLine(polygon));\n    if (doLinesIntersect.features.length > 0) {\n        return true;\n    }\n    return false;\n}\n/**\n * Is Polygon (geom1) in Polygon (geom2)\n * Only takes into account outer rings\n * See http://stackoverflow.com/a/4833823/1979085\n *\n * @private\n * @param {Geometry|Feature<Polygon>} feature1 Polygon1\n * @param {Geometry|Feature<Polygon>} feature2 Polygon2\n * @returns {boolean} true/false\n */\nfunction isPolyInPoly(feature1, feature2) {\n    for (var _i = 0, _a = feature1.coordinates[0]; _i < _a.length; _i++) {\n        var coord1 = _a[_i];\n        if (booleanPointInPolygon(coord1, feature2)) {\n            return true;\n        }\n    }\n    for (var _b = 0, _c = feature2.coordinates[0]; _b < _c.length; _b++) {\n        var coord2 = _c[_b];\n        if (booleanPointInPolygon(coord2, feature1)) {\n            return true;\n        }\n    }\n    var doLinesIntersect = lineIntersect(polygonToLine(feature1), polygonToLine(feature2));\n    if (doLinesIntersect.features.length > 0) {\n        return true;\n    }\n    return false;\n}\nfunction isPointOnLineSegment(lineSegmentStart, lineSegmentEnd, pt) {\n    var dxc = pt[0] - lineSegmentStart[0];\n    var dyc = pt[1] - lineSegmentStart[1];\n    var dxl = lineSegmentEnd[0] - lineSegmentStart[0];\n    var dyl = lineSegmentEnd[1] - lineSegmentStart[1];\n    var cross = dxc * dyl - dyc * dxl;\n    if (cross !== 0) {\n        return false;\n    }\n    if (Math.abs(dxl) >= Math.abs(dyl)) {\n        if (dxl > 0) {\n            return lineSegmentStart[0] <= pt[0] && pt[0] <= lineSegmentEnd[0];\n        }\n        else {\n            return lineSegmentEnd[0] <= pt[0] && pt[0] <= lineSegmentStart[0];\n        }\n    }\n    else if (dyl > 0) {\n        return lineSegmentStart[1] <= pt[1] && pt[1] <= lineSegmentEnd[1];\n    }\n    else {\n        return lineSegmentEnd[1] <= pt[1] && pt[1] <= lineSegmentStart[1];\n    }\n}\n/**\n * compareCoords\n *\n * @private\n * @param {Position} pair1 point [x,y]\n * @param {Position} pair2 point [x,y]\n * @returns {boolean} true/false if coord pairs match\n */\nfunction compareCoords(pair1, pair2) {\n    return pair1[0] === pair2[0] && pair1[1] === pair2[1];\n}\nexport default booleanDisjoint;\n","import booleanDisjoint from \"@turf/boolean-disjoint\";\nimport { flattenEach } from \"@turf/meta\";\n/**\n * Boolean-intersects returns (TRUE) two geometries intersect.\n *\n * @name booleanIntersects\n * @param {Geometry|Feature<any>} feature1 GeoJSON Feature or Geometry\n * @param {Geometry|Feature<any>} feature2 GeoJSON Feature or Geometry\n * @returns {boolean} true/false\n * @example\n * var point = turf.point([2, 2]);\n * var line = turf.lineString([[1, 1], [1, 2], [1, 3], [1, 4]]);\n *\n * turf.booleanIntersects(line, point);\n * //=true\n */\nexport default function booleanIntersects(feature1, feature2) {\n    var bool = false;\n    flattenEach(feature1, function (flatten1) {\n        flattenEach(feature2, function (flatten2) {\n            if (bool === true) {\n                return true;\n            }\n            bool = !booleanDisjoint(flatten1.geometry, flatten2.geometry);\n        });\n    });\n    return bool;\n}\n","import { Space } from \"@spatial-id/javascript-sdk\";\nimport origFetch from \"cross-fetch\";\n\nimport { VectorTile } from \"@mapbox/vector-tile\";\nimport Protobuf from \"pbf\";\nimport turfBooleanIntersect from '@turf/boolean-intersects';\n\nimport type GeoJSON from \"geojson\";\n\nconst fetch: typeof origFetch = origFetch.bind(undefined);\n\n// A subset of the TileJSON specification\nexport type RequestSource = {\n  type: \"vector\";\n  tiles: string[];\n  minzoom?: number;\n  maxzoom?: number;\n} | {\n  type: \"vector\";\n  url: string;\n  minzoom?: number;\n  maxzoom?: number;\n};\n\nconst createTileUrl = (template: string, id: Space) => (\n  template\n    .replace('{z}', id.zfxy.z.toString())\n    .replace('{f}', id.zfxy.f.toString())\n    .replace('{x}', id.zfxy.x.toString())\n    .replace('{y}', id.zfxy.y.toString())\n)\n\ntype RequestToGeoJSON = (source: RequestSource, id: Space) => Promise<GeoJSON.FeatureCollection>;\n\nexport const requestToGeoJSON: RequestToGeoJSON = async (source, id) => {\n  let tilejson = source;\n  if (\"url\" in source) {\n    const response = await fetch(source.url);\n    if (!response.ok) {\n      throw new Error(`TileJSON request to ${source.url} failed: ${response.status} ${response.statusText}`);\n    }\n    tilejson = {\n      ...(await response.json()),\n      ...tilejson,\n    };\n  }\n  if (!(\"tiles\" in tilejson)) {\n    throw new Error(\"TileJSON must contain a 'tiles' property\");\n  }\n\n  const { tiles, minzoom: rawMinzoom, maxzoom } = tilejson;\n  const minzoom = rawMinzoom || 0;\n  if (minzoom !== undefined && id.zoom < minzoom) {\n    throw new Error(`Not implemented: zoom level of requested Spatial ID (${id.zoom}) is below minimum zoom ${minzoom}`);\n  }\n  const requestZoom = Math.min(maxzoom || 25, id.zoom);\n  let requestTile: Space;\n  if (requestZoom < id.zfxy.z) {\n    requestTile = id.parent(requestZoom);\n  } else {\n    requestTile = id;\n  }\n  const tileUrl = createTileUrl(tiles[0], requestTile);\n\n  const response = await fetch(tileUrl);\n  if (!response.ok) {\n    throw new Error(`Tile request to ${tileUrl} failed: ${response.status} ${response.statusText}`);\n  }\n\n  const data = await response.arrayBuffer();\n\n  // decode vector tile, transform to GeoJSON\n  const tile = new VectorTile(new Protobuf(data));\n  const out: GeoJSON.FeatureCollection = {\n    type: \"FeatureCollection\",\n    features: [],\n  };\n\n  const zfxyGeom = id.toGeoJSON();\n\n  for (const layerName in tile.layers) {\n    const layer = tile.layers[layerName];\n    for (let i = 0; i < layer.length; i++) {\n      const feature = layer.feature(i).toGeoJSON(requestTile.zfxy.x, requestTile.zfxy.y, requestTile.zfxy.z);\n      if (turfBooleanIntersect(zfxyGeom, feature)) {\n        out.features.push(feature);\n      }\n    }\n  }\n\n  return out;\n};\n"],"names":["pointGeometry","Point","x","y","this","prototype","clone","add","p","_add","sub","_sub","multByPoint","_multByPoint","divByPoint","_divByPoint","mult","k","_mult","div","_div","rotate","a","_rotate","rotateAround","_rotateAround","matMult","m","_matMult","unit","_unit","perp","_perp","round","_round","mag","Math","sqrt","equals","other","dist","distSqr","dx","dy","angle","atan2","angleTo","b","angleWith","angleWithSep","cos","sin","convert","Array","isArray","require$$0","vectortilefeature","VectorTileFeature","pbf","end","extent","keys","values","properties","type","_pbf","_geometry","_keys","_values","readFields","readFeature","tag","feature","id","readVarint","pos","key","value","readTag","signedArea","ring","p1","p2","sum","i","len","length","j","types","loadGeometry","line","cmd","lines","cmdLen","readSVarint","push","Error","bbox","x1","Infinity","x2","y1","y2","toGeoJSON","z","size","pow","x0","y0","coords","project","PI","atan","exp","points","rings","polygon","ccw","polygons","area","undefined","classifyRings","result","geometry","coordinates","vectortilelayer","VectorTileLayer","version","name","_features","readLayer","layer","readString","readFloat","readDouble","readVarint64","readBoolean","readValueMessage","vectortile","layers","readTile","VectorTile","ieee754","buffer","offset","isLE","mLen","nBytes","e","eLen","eMax","eBias","nBits","d","s","NaN","c","rt","abs","isNaN","floor","log","LN2","Pbf","buf","ArrayBuffer","isView","Uint8Array","Varint","Fixed64","Bytes","Fixed32","utf8TextDecoder","TextDecoder","readPackedEnd","toNum","low","high","isSigned","makeRoomForExtraLength","startPos","extraLen","realloc","writePackedVarint","arr","writeVarint","writePackedSVarint","writeSVarint","writePackedFloat","writeFloat","writePackedDouble","writeDouble","writePackedBoolean","writeBoolean","writePackedFixed32","writeFixed32","writePackedSFixed32","writeSFixed32","writePackedFixed64","writeFixed64","writePackedSFixed64","writeSFixed64","readUInt32","writeInt32","val","readInt32","geom","options","feat","lineString","featureCollection","features","fc","isNumber","num","getCoords","getGeom","geojson","booleanPointInPolygon","point","pt","coord","getCoord","polys","inBBox","insidePoly","inRing","ignoreBoundary","inHole","isInside","slice","xi","yi","xj","yj","featureEach","callback","flattenEach","g","stopG","geometryMaybeCollection","isGeometryCollection","featureProperties","featureBBox","featureId","featureIndex","isFeatureCollection","isFeature","stop","geometries","geomEach","geomType","multiFeatureIndex","coordinate","lineSegment","results","forEach","segments","reduce","previousCoords","currentCoords","coords1","coords2","segment","createSegments","lineSegmentFeature","destroy","readField","skip","readMessage","readFixed32","readSFixed32","readFixed64","readSFixed64","read","l","h","readVarintRemainder","Boolean","decode","subarray","readUtf8TextDecoder","str","b1","b2","b3","b0","bytesPerSequence","String","fromCharCode","readUtf8","readBytes","readPackedVarint","readPackedSVarint","readPackedBoolean","readPackedFloat","readPackedDouble","readPackedFixed32","readPackedSFixed32","readPackedFixed64","readPackedSFixed64","writeTag","min","set","finish","writeBigVarintLow","lsb","writeBigVarintHigh","writeBigVarint","writeString","lead","charCodeAt","writeUtf8","write","writeBytes","writeRawMessage","fn","obj","writeMessage","writeBytesField","writeFixed32Field","writeSFixed32Field","writeFixed64Field","writeSFixed64Field","writeVarintField","writeSVarintField","writeStringField","writeFloatField","writeDoubleField","writeBooleanField","quickselect","left","right","compare","quickselectStep","defaultCompare","n","sd","max","t","swap","tmp","findItem","item","items","equalsFn","indexOf","calcBBox","node","toBBox","distBBox","children","destNode","createNode","minX","minY","maxX","maxY","child","extend","leaf","compareNodeMinX","compareNodeMinY","bboxArea","bboxMargin","intersectionArea","contains","intersects","height","multiSelect","stack","pop","mid","ceil","constructor","maxEntries","_maxEntries","_minEntries","clear","all","_all","data","search","nodesToSearch","childBBox","collides","load","insert","_build","_splitRoot","tmpNode","_insert","remove","path","indexes","parent","goingUp","index","splice","_condense","compareMinX","compareMinY","toJSON","fromJSON","N","M","N2","N1","right2","right3","_chooseSubtree","level","targetNode","minArea","minEnlargement","enlargement","isNode","insertPath","_split","_adjustParentBBoxes","_chooseSplitAxis","splitIndex","_chooseSplitIndex","newNode","minOverlap","bbox1","bbox2","overlap","_allDistMargin","sort","leftBBox","rightBBox","margin","siblings","_i","coordinates_1","multiLineString","multiPoint","multiPolygon","radiansToLength","radians","units","factor","exports","factors","lengthToRadians","distance","radiansToDegrees","Object","defineProperty","earthRadius","centimeters","centimetres","degrees","feet","inches","kilometers","kilometres","meters","metres","miles","millimeters","millimetres","nauticalmiles","yards","unitsFactors","areaFactors","acres","hectares","_options","map","lineStrings","geometryCollection","precision","multiplier","lengthToDegrees","bearingToAzimuth","bearing","degreesToRadians","convertLength","originalUnit","finalUnit","convertArea","startFactor","finalFactor","isObject","input","validateBBox","validateId","js","helpers","coordEach","excludeWrapCoord","wrapShrink","coordIndex","geomIndex","geometryIndex","propEach","segmentEach","segmentIndex","previousFeatureIndex","previousMultiIndex","prevGeomIndex","currentCoord","featureIndexCoord","multiPartIndexCoord","currentSegment","lineEach","coordAll","coordReduce","initialValue","previousValue","featureReduce","currentFeature","findPoint","findSegment","flattenReduce","geomReduce","currentGeometry","lineReduce","currentLine","propReduce","currentProperties","segmentReduce","started","meta_1","default","rbush","require$$1","meta","require$$2","turfBBox","require$$3","geojsonRbush","tree","call","json","lineIntersect","line1","line2","unique","intersect","match","join","x3","y3","x4","y4","denom","numeA","numeB","uA","uB","polygonToLine","poly","coordsToLine","multiPoly","multiPolygonToLine","booleanDisjoint","feature1","feature2","bool","flatten1","flatten2","geom1","geom2","pair1","pair2","isPointOnLine","lineString1","lineString2","isLineOnLine","isLineInPoly","_a","_b","_c","isPolyInPoly","disjoint","isPointOnLineSegment","lineSegmentStart","lineSegmentEnd","dxc","dyc","dxl","dyl","booleanIntersects","geojsonRbushModule","geojsonRbush_1","fetch","origFetch","bind","requestToGeoJSON","source","__awaiter","tilejson","url","response_1","sent","ok","concat","status","statusText","tiles","rawMinzoom","minzoom","maxzoom","zoom","requestZoom","requestTile","zfxy","tileUrl","template","replace","toString","f","createTileUrl","response","arrayBuffer","layerName","tile","Protobuf","out","zfxyGeom","turfBooleanIntersect"],"mappings":"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"}