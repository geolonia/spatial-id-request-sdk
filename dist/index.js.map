{"version":3,"file":"index.js","sources":["../node_modules/@mapbox/point-geometry/index.js","../node_modules/@mapbox/vector-tile/lib/vectortilefeature.js","../node_modules/@mapbox/vector-tile/lib/vectortilelayer.js","../node_modules/@mapbox/vector-tile/lib/vectortile.js","../node_modules/@mapbox/vector-tile/index.js","../node_modules/ieee754/index.js","../node_modules/pbf/index.js","../node_modules/@turf/helpers/dist/es/index.js","../node_modules/@turf/invariant/dist/es/index.js","../node_modules/@turf/boolean-point-in-polygon/dist/es/index.js","../node_modules/@turf/meta/dist/es/index.js","../node_modules/@turf/line-segment/dist/es/index.js","../node_modules/quickselect/index.js","../node_modules/rbush/index.js","../node_modules/@turf/helpers/dist/js/index.js","../node_modules/@turf/meta/dist/js/index.js","../node_modules/@turf/bbox/dist/js/index.js","../node_modules/geojson-rbush/index.js","../node_modules/@turf/line-intersect/dist/es/index.js","../node_modules/@turf/polygon-to-line/dist/es/index.js","../node_modules/@turf/boolean-disjoint/dist/es/index.js","../node_modules/@turf/boolean-intersects/dist/es/index.js","../src/index.ts"],"sourcesContent":["'use strict';\n\nmodule.exports = Point;\n\n/**\n * A standalone point geometry with useful accessor, comparison, and\n * modification methods.\n *\n * @class Point\n * @param {Number} x the x-coordinate. this could be longitude or screen\n * pixels, or any other sort of unit.\n * @param {Number} y the y-coordinate. this could be latitude or screen\n * pixels, or any other sort of unit.\n * @example\n * var point = new Point(-77, 38);\n */\nfunction Point(x, y) {\n    this.x = x;\n    this.y = y;\n}\n\nPoint.prototype = {\n\n    /**\n     * Clone this point, returning a new point that can be modified\n     * without affecting the old one.\n     * @return {Point} the clone\n     */\n    clone: function() { return new Point(this.x, this.y); },\n\n    /**\n     * Add this point's x & y coordinates to another point,\n     * yielding a new point.\n     * @param {Point} p the other point\n     * @return {Point} output point\n     */\n    add:     function(p) { return this.clone()._add(p); },\n\n    /**\n     * Subtract this point's x & y coordinates to from point,\n     * yielding a new point.\n     * @param {Point} p the other point\n     * @return {Point} output point\n     */\n    sub:     function(p) { return this.clone()._sub(p); },\n\n    /**\n     * Multiply this point's x & y coordinates by point,\n     * yielding a new point.\n     * @param {Point} p the other point\n     * @return {Point} output point\n     */\n    multByPoint:    function(p) { return this.clone()._multByPoint(p); },\n\n    /**\n     * Divide this point's x & y coordinates by point,\n     * yielding a new point.\n     * @param {Point} p the other point\n     * @return {Point} output point\n     */\n    divByPoint:     function(p) { return this.clone()._divByPoint(p); },\n\n    /**\n     * Multiply this point's x & y coordinates by a factor,\n     * yielding a new point.\n     * @param {Point} k factor\n     * @return {Point} output point\n     */\n    mult:    function(k) { return this.clone()._mult(k); },\n\n    /**\n     * Divide this point's x & y coordinates by a factor,\n     * yielding a new point.\n     * @param {Point} k factor\n     * @return {Point} output point\n     */\n    div:     function(k) { return this.clone()._div(k); },\n\n    /**\n     * Rotate this point around the 0, 0 origin by an angle a,\n     * given in radians\n     * @param {Number} a angle to rotate around, in radians\n     * @return {Point} output point\n     */\n    rotate:  function(a) { return this.clone()._rotate(a); },\n\n    /**\n     * Rotate this point around p point by an angle a,\n     * given in radians\n     * @param {Number} a angle to rotate around, in radians\n     * @param {Point} p Point to rotate around\n     * @return {Point} output point\n     */\n    rotateAround:  function(a,p) { return this.clone()._rotateAround(a,p); },\n\n    /**\n     * Multiply this point by a 4x1 transformation matrix\n     * @param {Array<Number>} m transformation matrix\n     * @return {Point} output point\n     */\n    matMult: function(m) { return this.clone()._matMult(m); },\n\n    /**\n     * Calculate this point but as a unit vector from 0, 0, meaning\n     * that the distance from the resulting point to the 0, 0\n     * coordinate will be equal to 1 and the angle from the resulting\n     * point to the 0, 0 coordinate will be the same as before.\n     * @return {Point} unit vector point\n     */\n    unit:    function() { return this.clone()._unit(); },\n\n    /**\n     * Compute a perpendicular point, where the new y coordinate\n     * is the old x coordinate and the new x coordinate is the old y\n     * coordinate multiplied by -1\n     * @return {Point} perpendicular point\n     */\n    perp:    function() { return this.clone()._perp(); },\n\n    /**\n     * Return a version of this point with the x & y coordinates\n     * rounded to integers.\n     * @return {Point} rounded point\n     */\n    round:   function() { return this.clone()._round(); },\n\n    /**\n     * Return the magitude of this point: this is the Euclidean\n     * distance from the 0, 0 coordinate to this point's x and y\n     * coordinates.\n     * @return {Number} magnitude\n     */\n    mag: function() {\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n    },\n\n    /**\n     * Judge whether this point is equal to another point, returning\n     * true or false.\n     * @param {Point} other the other point\n     * @return {boolean} whether the points are equal\n     */\n    equals: function(other) {\n        return this.x === other.x &&\n               this.y === other.y;\n    },\n\n    /**\n     * Calculate the distance from this point to another point\n     * @param {Point} p the other point\n     * @return {Number} distance\n     */\n    dist: function(p) {\n        return Math.sqrt(this.distSqr(p));\n    },\n\n    /**\n     * Calculate the distance from this point to another point,\n     * without the square root step. Useful if you're comparing\n     * relative distances.\n     * @param {Point} p the other point\n     * @return {Number} distance\n     */\n    distSqr: function(p) {\n        var dx = p.x - this.x,\n            dy = p.y - this.y;\n        return dx * dx + dy * dy;\n    },\n\n    /**\n     * Get the angle from the 0, 0 coordinate to this point, in radians\n     * coordinates.\n     * @return {Number} angle\n     */\n    angle: function() {\n        return Math.atan2(this.y, this.x);\n    },\n\n    /**\n     * Get the angle from this point to another point, in radians\n     * @param {Point} b the other point\n     * @return {Number} angle\n     */\n    angleTo: function(b) {\n        return Math.atan2(this.y - b.y, this.x - b.x);\n    },\n\n    /**\n     * Get the angle between this point and another point, in radians\n     * @param {Point} b the other point\n     * @return {Number} angle\n     */\n    angleWith: function(b) {\n        return this.angleWithSep(b.x, b.y);\n    },\n\n    /*\n     * Find the angle of the two vectors, solving the formula for\n     * the cross product a x b = |a||b|sin(θ) for θ.\n     * @param {Number} x the x-coordinate\n     * @param {Number} y the y-coordinate\n     * @return {Number} the angle in radians\n     */\n    angleWithSep: function(x, y) {\n        return Math.atan2(\n            this.x * y - this.y * x,\n            this.x * x + this.y * y);\n    },\n\n    _matMult: function(m) {\n        var x = m[0] * this.x + m[1] * this.y,\n            y = m[2] * this.x + m[3] * this.y;\n        this.x = x;\n        this.y = y;\n        return this;\n    },\n\n    _add: function(p) {\n        this.x += p.x;\n        this.y += p.y;\n        return this;\n    },\n\n    _sub: function(p) {\n        this.x -= p.x;\n        this.y -= p.y;\n        return this;\n    },\n\n    _mult: function(k) {\n        this.x *= k;\n        this.y *= k;\n        return this;\n    },\n\n    _div: function(k) {\n        this.x /= k;\n        this.y /= k;\n        return this;\n    },\n\n    _multByPoint: function(p) {\n        this.x *= p.x;\n        this.y *= p.y;\n        return this;\n    },\n\n    _divByPoint: function(p) {\n        this.x /= p.x;\n        this.y /= p.y;\n        return this;\n    },\n\n    _unit: function() {\n        this._div(this.mag());\n        return this;\n    },\n\n    _perp: function() {\n        var y = this.y;\n        this.y = this.x;\n        this.x = -y;\n        return this;\n    },\n\n    _rotate: function(angle) {\n        var cos = Math.cos(angle),\n            sin = Math.sin(angle),\n            x = cos * this.x - sin * this.y,\n            y = sin * this.x + cos * this.y;\n        this.x = x;\n        this.y = y;\n        return this;\n    },\n\n    _rotateAround: function(angle, p) {\n        var cos = Math.cos(angle),\n            sin = Math.sin(angle),\n            x = p.x + cos * (this.x - p.x) - sin * (this.y - p.y),\n            y = p.y + sin * (this.x - p.x) + cos * (this.y - p.y);\n        this.x = x;\n        this.y = y;\n        return this;\n    },\n\n    _round: function() {\n        this.x = Math.round(this.x);\n        this.y = Math.round(this.y);\n        return this;\n    }\n};\n\n/**\n * Construct a point from an array if necessary, otherwise if the input\n * is already a Point, or an unknown type, return it unchanged\n * @param {Array<Number>|Point|*} a any kind of input value\n * @return {Point} constructed point, or passed-through value.\n * @example\n * // this\n * var point = Point.convert([0, 1]);\n * // is equivalent to\n * var point = new Point(0, 1);\n */\nPoint.convert = function (a) {\n    if (a instanceof Point) {\n        return a;\n    }\n    if (Array.isArray(a)) {\n        return new Point(a[0], a[1]);\n    }\n    return a;\n};\n","'use strict';\n\nvar Point = require('@mapbox/point-geometry');\n\nmodule.exports = VectorTileFeature;\n\nfunction VectorTileFeature(pbf, end, extent, keys, values) {\n    // Public\n    this.properties = {};\n    this.extent = extent;\n    this.type = 0;\n\n    // Private\n    this._pbf = pbf;\n    this._geometry = -1;\n    this._keys = keys;\n    this._values = values;\n\n    pbf.readFields(readFeature, this, end);\n}\n\nfunction readFeature(tag, feature, pbf) {\n    if (tag == 1) feature.id = pbf.readVarint();\n    else if (tag == 2) readTag(pbf, feature);\n    else if (tag == 3) feature.type = pbf.readVarint();\n    else if (tag == 4) feature._geometry = pbf.pos;\n}\n\nfunction readTag(pbf, feature) {\n    var end = pbf.readVarint() + pbf.pos;\n\n    while (pbf.pos < end) {\n        var key = feature._keys[pbf.readVarint()],\n            value = feature._values[pbf.readVarint()];\n        feature.properties[key] = value;\n    }\n}\n\nVectorTileFeature.types = ['Unknown', 'Point', 'LineString', 'Polygon'];\n\nVectorTileFeature.prototype.loadGeometry = function() {\n    var pbf = this._pbf;\n    pbf.pos = this._geometry;\n\n    var end = pbf.readVarint() + pbf.pos,\n        cmd = 1,\n        length = 0,\n        x = 0,\n        y = 0,\n        lines = [],\n        line;\n\n    while (pbf.pos < end) {\n        if (length <= 0) {\n            var cmdLen = pbf.readVarint();\n            cmd = cmdLen & 0x7;\n            length = cmdLen >> 3;\n        }\n\n        length--;\n\n        if (cmd === 1 || cmd === 2) {\n            x += pbf.readSVarint();\n            y += pbf.readSVarint();\n\n            if (cmd === 1) { // moveTo\n                if (line) lines.push(line);\n                line = [];\n            }\n\n            line.push(new Point(x, y));\n\n        } else if (cmd === 7) {\n\n            // Workaround for https://github.com/mapbox/mapnik-vector-tile/issues/90\n            if (line) {\n                line.push(line[0].clone()); // closePolygon\n            }\n\n        } else {\n            throw new Error('unknown command ' + cmd);\n        }\n    }\n\n    if (line) lines.push(line);\n\n    return lines;\n};\n\nVectorTileFeature.prototype.bbox = function() {\n    var pbf = this._pbf;\n    pbf.pos = this._geometry;\n\n    var end = pbf.readVarint() + pbf.pos,\n        cmd = 1,\n        length = 0,\n        x = 0,\n        y = 0,\n        x1 = Infinity,\n        x2 = -Infinity,\n        y1 = Infinity,\n        y2 = -Infinity;\n\n    while (pbf.pos < end) {\n        if (length <= 0) {\n            var cmdLen = pbf.readVarint();\n            cmd = cmdLen & 0x7;\n            length = cmdLen >> 3;\n        }\n\n        length--;\n\n        if (cmd === 1 || cmd === 2) {\n            x += pbf.readSVarint();\n            y += pbf.readSVarint();\n            if (x < x1) x1 = x;\n            if (x > x2) x2 = x;\n            if (y < y1) y1 = y;\n            if (y > y2) y2 = y;\n\n        } else if (cmd !== 7) {\n            throw new Error('unknown command ' + cmd);\n        }\n    }\n\n    return [x1, y1, x2, y2];\n};\n\nVectorTileFeature.prototype.toGeoJSON = function(x, y, z) {\n    var size = this.extent * Math.pow(2, z),\n        x0 = this.extent * x,\n        y0 = this.extent * y,\n        coords = this.loadGeometry(),\n        type = VectorTileFeature.types[this.type],\n        i, j;\n\n    function project(line) {\n        for (var j = 0; j < line.length; j++) {\n            var p = line[j], y2 = 180 - (p.y + y0) * 360 / size;\n            line[j] = [\n                (p.x + x0) * 360 / size - 180,\n                360 / Math.PI * Math.atan(Math.exp(y2 * Math.PI / 180)) - 90\n            ];\n        }\n    }\n\n    switch (this.type) {\n    case 1:\n        var points = [];\n        for (i = 0; i < coords.length; i++) {\n            points[i] = coords[i][0];\n        }\n        coords = points;\n        project(coords);\n        break;\n\n    case 2:\n        for (i = 0; i < coords.length; i++) {\n            project(coords[i]);\n        }\n        break;\n\n    case 3:\n        coords = classifyRings(coords);\n        for (i = 0; i < coords.length; i++) {\n            for (j = 0; j < coords[i].length; j++) {\n                project(coords[i][j]);\n            }\n        }\n        break;\n    }\n\n    if (coords.length === 1) {\n        coords = coords[0];\n    } else {\n        type = 'Multi' + type;\n    }\n\n    var result = {\n        type: \"Feature\",\n        geometry: {\n            type: type,\n            coordinates: coords\n        },\n        properties: this.properties\n    };\n\n    if ('id' in this) {\n        result.id = this.id;\n    }\n\n    return result;\n};\n\n// classifies an array of rings into polygons with outer rings and holes\n\nfunction classifyRings(rings) {\n    var len = rings.length;\n\n    if (len <= 1) return [rings];\n\n    var polygons = [],\n        polygon,\n        ccw;\n\n    for (var i = 0; i < len; i++) {\n        var area = signedArea(rings[i]);\n        if (area === 0) continue;\n\n        if (ccw === undefined) ccw = area < 0;\n\n        if (ccw === area < 0) {\n            if (polygon) polygons.push(polygon);\n            polygon = [rings[i]];\n\n        } else {\n            polygon.push(rings[i]);\n        }\n    }\n    if (polygon) polygons.push(polygon);\n\n    return polygons;\n}\n\nfunction signedArea(ring) {\n    var sum = 0;\n    for (var i = 0, len = ring.length, j = len - 1, p1, p2; i < len; j = i++) {\n        p1 = ring[i];\n        p2 = ring[j];\n        sum += (p2.x - p1.x) * (p1.y + p2.y);\n    }\n    return sum;\n}\n","'use strict';\n\nvar VectorTileFeature = require('./vectortilefeature.js');\n\nmodule.exports = VectorTileLayer;\n\nfunction VectorTileLayer(pbf, end) {\n    // Public\n    this.version = 1;\n    this.name = null;\n    this.extent = 4096;\n    this.length = 0;\n\n    // Private\n    this._pbf = pbf;\n    this._keys = [];\n    this._values = [];\n    this._features = [];\n\n    pbf.readFields(readLayer, this, end);\n\n    this.length = this._features.length;\n}\n\nfunction readLayer(tag, layer, pbf) {\n    if (tag === 15) layer.version = pbf.readVarint();\n    else if (tag === 1) layer.name = pbf.readString();\n    else if (tag === 5) layer.extent = pbf.readVarint();\n    else if (tag === 2) layer._features.push(pbf.pos);\n    else if (tag === 3) layer._keys.push(pbf.readString());\n    else if (tag === 4) layer._values.push(readValueMessage(pbf));\n}\n\nfunction readValueMessage(pbf) {\n    var value = null,\n        end = pbf.readVarint() + pbf.pos;\n\n    while (pbf.pos < end) {\n        var tag = pbf.readVarint() >> 3;\n\n        value = tag === 1 ? pbf.readString() :\n            tag === 2 ? pbf.readFloat() :\n            tag === 3 ? pbf.readDouble() :\n            tag === 4 ? pbf.readVarint64() :\n            tag === 5 ? pbf.readVarint() :\n            tag === 6 ? pbf.readSVarint() :\n            tag === 7 ? pbf.readBoolean() : null;\n    }\n\n    return value;\n}\n\n// return feature `i` from this layer as a `VectorTileFeature`\nVectorTileLayer.prototype.feature = function(i) {\n    if (i < 0 || i >= this._features.length) throw new Error('feature index out of bounds');\n\n    this._pbf.pos = this._features[i];\n\n    var end = this._pbf.readVarint() + this._pbf.pos;\n    return new VectorTileFeature(this._pbf, end, this.extent, this._keys, this._values);\n};\n","'use strict';\n\nvar VectorTileLayer = require('./vectortilelayer');\n\nmodule.exports = VectorTile;\n\nfunction VectorTile(pbf, end) {\n    this.layers = pbf.readFields(readTile, {}, end);\n}\n\nfunction readTile(tag, layers, pbf) {\n    if (tag === 3) {\n        var layer = new VectorTileLayer(pbf, pbf.readVarint() + pbf.pos);\n        if (layer.length) layers[layer.name] = layer;\n    }\n}\n\n","module.exports.VectorTile = require('./lib/vectortile.js');\nmodule.exports.VectorTileFeature = require('./lib/vectortilefeature.js');\nmodule.exports.VectorTileLayer = require('./lib/vectortilelayer.js');\n","/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","'use strict';\n\nmodule.exports = Pbf;\n\nvar ieee754 = require('ieee754');\n\nfunction Pbf(buf) {\n    this.buf = ArrayBuffer.isView && ArrayBuffer.isView(buf) ? buf : new Uint8Array(buf || 0);\n    this.pos = 0;\n    this.type = 0;\n    this.length = this.buf.length;\n}\n\nPbf.Varint  = 0; // varint: int32, int64, uint32, uint64, sint32, sint64, bool, enum\nPbf.Fixed64 = 1; // 64-bit: double, fixed64, sfixed64\nPbf.Bytes   = 2; // length-delimited: string, bytes, embedded messages, packed repeated fields\nPbf.Fixed32 = 5; // 32-bit: float, fixed32, sfixed32\n\nvar SHIFT_LEFT_32 = (1 << 16) * (1 << 16),\n    SHIFT_RIGHT_32 = 1 / SHIFT_LEFT_32;\n\n// Threshold chosen based on both benchmarking and knowledge about browser string\n// data structures (which currently switch structure types at 12 bytes or more)\nvar TEXT_DECODER_MIN_LENGTH = 12;\nvar utf8TextDecoder = typeof TextDecoder === 'undefined' ? null : new TextDecoder('utf8');\n\nPbf.prototype = {\n\n    destroy: function() {\n        this.buf = null;\n    },\n\n    // === READING =================================================================\n\n    readFields: function(readField, result, end) {\n        end = end || this.length;\n\n        while (this.pos < end) {\n            var val = this.readVarint(),\n                tag = val >> 3,\n                startPos = this.pos;\n\n            this.type = val & 0x7;\n            readField(tag, result, this);\n\n            if (this.pos === startPos) this.skip(val);\n        }\n        return result;\n    },\n\n    readMessage: function(readField, result) {\n        return this.readFields(readField, result, this.readVarint() + this.pos);\n    },\n\n    readFixed32: function() {\n        var val = readUInt32(this.buf, this.pos);\n        this.pos += 4;\n        return val;\n    },\n\n    readSFixed32: function() {\n        var val = readInt32(this.buf, this.pos);\n        this.pos += 4;\n        return val;\n    },\n\n    // 64-bit int handling is based on github.com/dpw/node-buffer-more-ints (MIT-licensed)\n\n    readFixed64: function() {\n        var val = readUInt32(this.buf, this.pos) + readUInt32(this.buf, this.pos + 4) * SHIFT_LEFT_32;\n        this.pos += 8;\n        return val;\n    },\n\n    readSFixed64: function() {\n        var val = readUInt32(this.buf, this.pos) + readInt32(this.buf, this.pos + 4) * SHIFT_LEFT_32;\n        this.pos += 8;\n        return val;\n    },\n\n    readFloat: function() {\n        var val = ieee754.read(this.buf, this.pos, true, 23, 4);\n        this.pos += 4;\n        return val;\n    },\n\n    readDouble: function() {\n        var val = ieee754.read(this.buf, this.pos, true, 52, 8);\n        this.pos += 8;\n        return val;\n    },\n\n    readVarint: function(isSigned) {\n        var buf = this.buf,\n            val, b;\n\n        b = buf[this.pos++]; val  =  b & 0x7f;        if (b < 0x80) return val;\n        b = buf[this.pos++]; val |= (b & 0x7f) << 7;  if (b < 0x80) return val;\n        b = buf[this.pos++]; val |= (b & 0x7f) << 14; if (b < 0x80) return val;\n        b = buf[this.pos++]; val |= (b & 0x7f) << 21; if (b < 0x80) return val;\n        b = buf[this.pos];   val |= (b & 0x0f) << 28;\n\n        return readVarintRemainder(val, isSigned, this);\n    },\n\n    readVarint64: function() { // for compatibility with v2.0.1\n        return this.readVarint(true);\n    },\n\n    readSVarint: function() {\n        var num = this.readVarint();\n        return num % 2 === 1 ? (num + 1) / -2 : num / 2; // zigzag encoding\n    },\n\n    readBoolean: function() {\n        return Boolean(this.readVarint());\n    },\n\n    readString: function() {\n        var end = this.readVarint() + this.pos;\n        var pos = this.pos;\n        this.pos = end;\n\n        if (end - pos >= TEXT_DECODER_MIN_LENGTH && utf8TextDecoder) {\n            // longer strings are fast with the built-in browser TextDecoder API\n            return readUtf8TextDecoder(this.buf, pos, end);\n        }\n        // short strings are fast with our custom implementation\n        return readUtf8(this.buf, pos, end);\n    },\n\n    readBytes: function() {\n        var end = this.readVarint() + this.pos,\n            buffer = this.buf.subarray(this.pos, end);\n        this.pos = end;\n        return buffer;\n    },\n\n    // verbose for performance reasons; doesn't affect gzipped size\n\n    readPackedVarint: function(arr, isSigned) {\n        if (this.type !== Pbf.Bytes) return arr.push(this.readVarint(isSigned));\n        var end = readPackedEnd(this);\n        arr = arr || [];\n        while (this.pos < end) arr.push(this.readVarint(isSigned));\n        return arr;\n    },\n    readPackedSVarint: function(arr) {\n        if (this.type !== Pbf.Bytes) return arr.push(this.readSVarint());\n        var end = readPackedEnd(this);\n        arr = arr || [];\n        while (this.pos < end) arr.push(this.readSVarint());\n        return arr;\n    },\n    readPackedBoolean: function(arr) {\n        if (this.type !== Pbf.Bytes) return arr.push(this.readBoolean());\n        var end = readPackedEnd(this);\n        arr = arr || [];\n        while (this.pos < end) arr.push(this.readBoolean());\n        return arr;\n    },\n    readPackedFloat: function(arr) {\n        if (this.type !== Pbf.Bytes) return arr.push(this.readFloat());\n        var end = readPackedEnd(this);\n        arr = arr || [];\n        while (this.pos < end) arr.push(this.readFloat());\n        return arr;\n    },\n    readPackedDouble: function(arr) {\n        if (this.type !== Pbf.Bytes) return arr.push(this.readDouble());\n        var end = readPackedEnd(this);\n        arr = arr || [];\n        while (this.pos < end) arr.push(this.readDouble());\n        return arr;\n    },\n    readPackedFixed32: function(arr) {\n        if (this.type !== Pbf.Bytes) return arr.push(this.readFixed32());\n        var end = readPackedEnd(this);\n        arr = arr || [];\n        while (this.pos < end) arr.push(this.readFixed32());\n        return arr;\n    },\n    readPackedSFixed32: function(arr) {\n        if (this.type !== Pbf.Bytes) return arr.push(this.readSFixed32());\n        var end = readPackedEnd(this);\n        arr = arr || [];\n        while (this.pos < end) arr.push(this.readSFixed32());\n        return arr;\n    },\n    readPackedFixed64: function(arr) {\n        if (this.type !== Pbf.Bytes) return arr.push(this.readFixed64());\n        var end = readPackedEnd(this);\n        arr = arr || [];\n        while (this.pos < end) arr.push(this.readFixed64());\n        return arr;\n    },\n    readPackedSFixed64: function(arr) {\n        if (this.type !== Pbf.Bytes) return arr.push(this.readSFixed64());\n        var end = readPackedEnd(this);\n        arr = arr || [];\n        while (this.pos < end) arr.push(this.readSFixed64());\n        return arr;\n    },\n\n    skip: function(val) {\n        var type = val & 0x7;\n        if (type === Pbf.Varint) while (this.buf[this.pos++] > 0x7f) {}\n        else if (type === Pbf.Bytes) this.pos = this.readVarint() + this.pos;\n        else if (type === Pbf.Fixed32) this.pos += 4;\n        else if (type === Pbf.Fixed64) this.pos += 8;\n        else throw new Error('Unimplemented type: ' + type);\n    },\n\n    // === WRITING =================================================================\n\n    writeTag: function(tag, type) {\n        this.writeVarint((tag << 3) | type);\n    },\n\n    realloc: function(min) {\n        var length = this.length || 16;\n\n        while (length < this.pos + min) length *= 2;\n\n        if (length !== this.length) {\n            var buf = new Uint8Array(length);\n            buf.set(this.buf);\n            this.buf = buf;\n            this.length = length;\n        }\n    },\n\n    finish: function() {\n        this.length = this.pos;\n        this.pos = 0;\n        return this.buf.subarray(0, this.length);\n    },\n\n    writeFixed32: function(val) {\n        this.realloc(4);\n        writeInt32(this.buf, val, this.pos);\n        this.pos += 4;\n    },\n\n    writeSFixed32: function(val) {\n        this.realloc(4);\n        writeInt32(this.buf, val, this.pos);\n        this.pos += 4;\n    },\n\n    writeFixed64: function(val) {\n        this.realloc(8);\n        writeInt32(this.buf, val & -1, this.pos);\n        writeInt32(this.buf, Math.floor(val * SHIFT_RIGHT_32), this.pos + 4);\n        this.pos += 8;\n    },\n\n    writeSFixed64: function(val) {\n        this.realloc(8);\n        writeInt32(this.buf, val & -1, this.pos);\n        writeInt32(this.buf, Math.floor(val * SHIFT_RIGHT_32), this.pos + 4);\n        this.pos += 8;\n    },\n\n    writeVarint: function(val) {\n        val = +val || 0;\n\n        if (val > 0xfffffff || val < 0) {\n            writeBigVarint(val, this);\n            return;\n        }\n\n        this.realloc(4);\n\n        this.buf[this.pos++] =           val & 0x7f  | (val > 0x7f ? 0x80 : 0); if (val <= 0x7f) return;\n        this.buf[this.pos++] = ((val >>>= 7) & 0x7f) | (val > 0x7f ? 0x80 : 0); if (val <= 0x7f) return;\n        this.buf[this.pos++] = ((val >>>= 7) & 0x7f) | (val > 0x7f ? 0x80 : 0); if (val <= 0x7f) return;\n        this.buf[this.pos++] =   (val >>> 7) & 0x7f;\n    },\n\n    writeSVarint: function(val) {\n        this.writeVarint(val < 0 ? -val * 2 - 1 : val * 2);\n    },\n\n    writeBoolean: function(val) {\n        this.writeVarint(Boolean(val));\n    },\n\n    writeString: function(str) {\n        str = String(str);\n        this.realloc(str.length * 4);\n\n        this.pos++; // reserve 1 byte for short string length\n\n        var startPos = this.pos;\n        // write the string directly to the buffer and see how much was written\n        this.pos = writeUtf8(this.buf, str, this.pos);\n        var len = this.pos - startPos;\n\n        if (len >= 0x80) makeRoomForExtraLength(startPos, len, this);\n\n        // finally, write the message length in the reserved place and restore the position\n        this.pos = startPos - 1;\n        this.writeVarint(len);\n        this.pos += len;\n    },\n\n    writeFloat: function(val) {\n        this.realloc(4);\n        ieee754.write(this.buf, val, this.pos, true, 23, 4);\n        this.pos += 4;\n    },\n\n    writeDouble: function(val) {\n        this.realloc(8);\n        ieee754.write(this.buf, val, this.pos, true, 52, 8);\n        this.pos += 8;\n    },\n\n    writeBytes: function(buffer) {\n        var len = buffer.length;\n        this.writeVarint(len);\n        this.realloc(len);\n        for (var i = 0; i < len; i++) this.buf[this.pos++] = buffer[i];\n    },\n\n    writeRawMessage: function(fn, obj) {\n        this.pos++; // reserve 1 byte for short message length\n\n        // write the message directly to the buffer and see how much was written\n        var startPos = this.pos;\n        fn(obj, this);\n        var len = this.pos - startPos;\n\n        if (len >= 0x80) makeRoomForExtraLength(startPos, len, this);\n\n        // finally, write the message length in the reserved place and restore the position\n        this.pos = startPos - 1;\n        this.writeVarint(len);\n        this.pos += len;\n    },\n\n    writeMessage: function(tag, fn, obj) {\n        this.writeTag(tag, Pbf.Bytes);\n        this.writeRawMessage(fn, obj);\n    },\n\n    writePackedVarint:   function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedVarint, arr);   },\n    writePackedSVarint:  function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedSVarint, arr);  },\n    writePackedBoolean:  function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedBoolean, arr);  },\n    writePackedFloat:    function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedFloat, arr);    },\n    writePackedDouble:   function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedDouble, arr);   },\n    writePackedFixed32:  function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedFixed32, arr);  },\n    writePackedSFixed32: function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedSFixed32, arr); },\n    writePackedFixed64:  function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedFixed64, arr);  },\n    writePackedSFixed64: function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedSFixed64, arr); },\n\n    writeBytesField: function(tag, buffer) {\n        this.writeTag(tag, Pbf.Bytes);\n        this.writeBytes(buffer);\n    },\n    writeFixed32Field: function(tag, val) {\n        this.writeTag(tag, Pbf.Fixed32);\n        this.writeFixed32(val);\n    },\n    writeSFixed32Field: function(tag, val) {\n        this.writeTag(tag, Pbf.Fixed32);\n        this.writeSFixed32(val);\n    },\n    writeFixed64Field: function(tag, val) {\n        this.writeTag(tag, Pbf.Fixed64);\n        this.writeFixed64(val);\n    },\n    writeSFixed64Field: function(tag, val) {\n        this.writeTag(tag, Pbf.Fixed64);\n        this.writeSFixed64(val);\n    },\n    writeVarintField: function(tag, val) {\n        this.writeTag(tag, Pbf.Varint);\n        this.writeVarint(val);\n    },\n    writeSVarintField: function(tag, val) {\n        this.writeTag(tag, Pbf.Varint);\n        this.writeSVarint(val);\n    },\n    writeStringField: function(tag, str) {\n        this.writeTag(tag, Pbf.Bytes);\n        this.writeString(str);\n    },\n    writeFloatField: function(tag, val) {\n        this.writeTag(tag, Pbf.Fixed32);\n        this.writeFloat(val);\n    },\n    writeDoubleField: function(tag, val) {\n        this.writeTag(tag, Pbf.Fixed64);\n        this.writeDouble(val);\n    },\n    writeBooleanField: function(tag, val) {\n        this.writeVarintField(tag, Boolean(val));\n    }\n};\n\nfunction readVarintRemainder(l, s, p) {\n    var buf = p.buf,\n        h, b;\n\n    b = buf[p.pos++]; h  = (b & 0x70) >> 4;  if (b < 0x80) return toNum(l, h, s);\n    b = buf[p.pos++]; h |= (b & 0x7f) << 3;  if (b < 0x80) return toNum(l, h, s);\n    b = buf[p.pos++]; h |= (b & 0x7f) << 10; if (b < 0x80) return toNum(l, h, s);\n    b = buf[p.pos++]; h |= (b & 0x7f) << 17; if (b < 0x80) return toNum(l, h, s);\n    b = buf[p.pos++]; h |= (b & 0x7f) << 24; if (b < 0x80) return toNum(l, h, s);\n    b = buf[p.pos++]; h |= (b & 0x01) << 31; if (b < 0x80) return toNum(l, h, s);\n\n    throw new Error('Expected varint not more than 10 bytes');\n}\n\nfunction readPackedEnd(pbf) {\n    return pbf.type === Pbf.Bytes ?\n        pbf.readVarint() + pbf.pos : pbf.pos + 1;\n}\n\nfunction toNum(low, high, isSigned) {\n    if (isSigned) {\n        return high * 0x100000000 + (low >>> 0);\n    }\n\n    return ((high >>> 0) * 0x100000000) + (low >>> 0);\n}\n\nfunction writeBigVarint(val, pbf) {\n    var low, high;\n\n    if (val >= 0) {\n        low  = (val % 0x100000000) | 0;\n        high = (val / 0x100000000) | 0;\n    } else {\n        low  = ~(-val % 0x100000000);\n        high = ~(-val / 0x100000000);\n\n        if (low ^ 0xffffffff) {\n            low = (low + 1) | 0;\n        } else {\n            low = 0;\n            high = (high + 1) | 0;\n        }\n    }\n\n    if (val >= 0x10000000000000000 || val < -0x10000000000000000) {\n        throw new Error('Given varint doesn\\'t fit into 10 bytes');\n    }\n\n    pbf.realloc(10);\n\n    writeBigVarintLow(low, high, pbf);\n    writeBigVarintHigh(high, pbf);\n}\n\nfunction writeBigVarintLow(low, high, pbf) {\n    pbf.buf[pbf.pos++] = low & 0x7f | 0x80; low >>>= 7;\n    pbf.buf[pbf.pos++] = low & 0x7f | 0x80; low >>>= 7;\n    pbf.buf[pbf.pos++] = low & 0x7f | 0x80; low >>>= 7;\n    pbf.buf[pbf.pos++] = low & 0x7f | 0x80; low >>>= 7;\n    pbf.buf[pbf.pos]   = low & 0x7f;\n}\n\nfunction writeBigVarintHigh(high, pbf) {\n    var lsb = (high & 0x07) << 4;\n\n    pbf.buf[pbf.pos++] |= lsb         | ((high >>>= 3) ? 0x80 : 0); if (!high) return;\n    pbf.buf[pbf.pos++]  = high & 0x7f | ((high >>>= 7) ? 0x80 : 0); if (!high) return;\n    pbf.buf[pbf.pos++]  = high & 0x7f | ((high >>>= 7) ? 0x80 : 0); if (!high) return;\n    pbf.buf[pbf.pos++]  = high & 0x7f | ((high >>>= 7) ? 0x80 : 0); if (!high) return;\n    pbf.buf[pbf.pos++]  = high & 0x7f | ((high >>>= 7) ? 0x80 : 0); if (!high) return;\n    pbf.buf[pbf.pos++]  = high & 0x7f;\n}\n\nfunction makeRoomForExtraLength(startPos, len, pbf) {\n    var extraLen =\n        len <= 0x3fff ? 1 :\n        len <= 0x1fffff ? 2 :\n        len <= 0xfffffff ? 3 : Math.floor(Math.log(len) / (Math.LN2 * 7));\n\n    // if 1 byte isn't enough for encoding message length, shift the data to the right\n    pbf.realloc(extraLen);\n    for (var i = pbf.pos - 1; i >= startPos; i--) pbf.buf[i + extraLen] = pbf.buf[i];\n}\n\nfunction writePackedVarint(arr, pbf)   { for (var i = 0; i < arr.length; i++) pbf.writeVarint(arr[i]);   }\nfunction writePackedSVarint(arr, pbf)  { for (var i = 0; i < arr.length; i++) pbf.writeSVarint(arr[i]);  }\nfunction writePackedFloat(arr, pbf)    { for (var i = 0; i < arr.length; i++) pbf.writeFloat(arr[i]);    }\nfunction writePackedDouble(arr, pbf)   { for (var i = 0; i < arr.length; i++) pbf.writeDouble(arr[i]);   }\nfunction writePackedBoolean(arr, pbf)  { for (var i = 0; i < arr.length; i++) pbf.writeBoolean(arr[i]);  }\nfunction writePackedFixed32(arr, pbf)  { for (var i = 0; i < arr.length; i++) pbf.writeFixed32(arr[i]);  }\nfunction writePackedSFixed32(arr, pbf) { for (var i = 0; i < arr.length; i++) pbf.writeSFixed32(arr[i]); }\nfunction writePackedFixed64(arr, pbf)  { for (var i = 0; i < arr.length; i++) pbf.writeFixed64(arr[i]);  }\nfunction writePackedSFixed64(arr, pbf) { for (var i = 0; i < arr.length; i++) pbf.writeSFixed64(arr[i]); }\n\n// Buffer code below from https://github.com/feross/buffer, MIT-licensed\n\nfunction readUInt32(buf, pos) {\n    return ((buf[pos]) |\n        (buf[pos + 1] << 8) |\n        (buf[pos + 2] << 16)) +\n        (buf[pos + 3] * 0x1000000);\n}\n\nfunction writeInt32(buf, val, pos) {\n    buf[pos] = val;\n    buf[pos + 1] = (val >>> 8);\n    buf[pos + 2] = (val >>> 16);\n    buf[pos + 3] = (val >>> 24);\n}\n\nfunction readInt32(buf, pos) {\n    return ((buf[pos]) |\n        (buf[pos + 1] << 8) |\n        (buf[pos + 2] << 16)) +\n        (buf[pos + 3] << 24);\n}\n\nfunction readUtf8(buf, pos, end) {\n    var str = '';\n    var i = pos;\n\n    while (i < end) {\n        var b0 = buf[i];\n        var c = null; // codepoint\n        var bytesPerSequence =\n            b0 > 0xEF ? 4 :\n            b0 > 0xDF ? 3 :\n            b0 > 0xBF ? 2 : 1;\n\n        if (i + bytesPerSequence > end) break;\n\n        var b1, b2, b3;\n\n        if (bytesPerSequence === 1) {\n            if (b0 < 0x80) {\n                c = b0;\n            }\n        } else if (bytesPerSequence === 2) {\n            b1 = buf[i + 1];\n            if ((b1 & 0xC0) === 0x80) {\n                c = (b0 & 0x1F) << 0x6 | (b1 & 0x3F);\n                if (c <= 0x7F) {\n                    c = null;\n                }\n            }\n        } else if (bytesPerSequence === 3) {\n            b1 = buf[i + 1];\n            b2 = buf[i + 2];\n            if ((b1 & 0xC0) === 0x80 && (b2 & 0xC0) === 0x80) {\n                c = (b0 & 0xF) << 0xC | (b1 & 0x3F) << 0x6 | (b2 & 0x3F);\n                if (c <= 0x7FF || (c >= 0xD800 && c <= 0xDFFF)) {\n                    c = null;\n                }\n            }\n        } else if (bytesPerSequence === 4) {\n            b1 = buf[i + 1];\n            b2 = buf[i + 2];\n            b3 = buf[i + 3];\n            if ((b1 & 0xC0) === 0x80 && (b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80) {\n                c = (b0 & 0xF) << 0x12 | (b1 & 0x3F) << 0xC | (b2 & 0x3F) << 0x6 | (b3 & 0x3F);\n                if (c <= 0xFFFF || c >= 0x110000) {\n                    c = null;\n                }\n            }\n        }\n\n        if (c === null) {\n            c = 0xFFFD;\n            bytesPerSequence = 1;\n\n        } else if (c > 0xFFFF) {\n            c -= 0x10000;\n            str += String.fromCharCode(c >>> 10 & 0x3FF | 0xD800);\n            c = 0xDC00 | c & 0x3FF;\n        }\n\n        str += String.fromCharCode(c);\n        i += bytesPerSequence;\n    }\n\n    return str;\n}\n\nfunction readUtf8TextDecoder(buf, pos, end) {\n    return utf8TextDecoder.decode(buf.subarray(pos, end));\n}\n\nfunction writeUtf8(buf, str, pos) {\n    for (var i = 0, c, lead; i < str.length; i++) {\n        c = str.charCodeAt(i); // code point\n\n        if (c > 0xD7FF && c < 0xE000) {\n            if (lead) {\n                if (c < 0xDC00) {\n                    buf[pos++] = 0xEF;\n                    buf[pos++] = 0xBF;\n                    buf[pos++] = 0xBD;\n                    lead = c;\n                    continue;\n                } else {\n                    c = lead - 0xD800 << 10 | c - 0xDC00 | 0x10000;\n                    lead = null;\n                }\n            } else {\n                if (c > 0xDBFF || (i + 1 === str.length)) {\n                    buf[pos++] = 0xEF;\n                    buf[pos++] = 0xBF;\n                    buf[pos++] = 0xBD;\n                } else {\n                    lead = c;\n                }\n                continue;\n            }\n        } else if (lead) {\n            buf[pos++] = 0xEF;\n            buf[pos++] = 0xBF;\n            buf[pos++] = 0xBD;\n            lead = null;\n        }\n\n        if (c < 0x80) {\n            buf[pos++] = c;\n        } else {\n            if (c < 0x800) {\n                buf[pos++] = c >> 0x6 | 0xC0;\n            } else {\n                if (c < 0x10000) {\n                    buf[pos++] = c >> 0xC | 0xE0;\n                } else {\n                    buf[pos++] = c >> 0x12 | 0xF0;\n                    buf[pos++] = c >> 0xC & 0x3F | 0x80;\n                }\n                buf[pos++] = c >> 0x6 & 0x3F | 0x80;\n            }\n            buf[pos++] = c & 0x3F | 0x80;\n        }\n    }\n    return pos;\n}\n","/**\n * @module helpers\n */\n/**\n * Earth Radius used with the Harvesine formula and approximates using a spherical (non-ellipsoid) Earth.\n *\n * @memberof helpers\n * @type {number}\n */\nexport var earthRadius = 6371008.8;\n/**\n * Unit of measurement factors using a spherical (non-ellipsoid) earth radius.\n *\n * @memberof helpers\n * @type {Object}\n */\nexport var factors = {\n    centimeters: earthRadius * 100,\n    centimetres: earthRadius * 100,\n    degrees: earthRadius / 111325,\n    feet: earthRadius * 3.28084,\n    inches: earthRadius * 39.37,\n    kilometers: earthRadius / 1000,\n    kilometres: earthRadius / 1000,\n    meters: earthRadius,\n    metres: earthRadius,\n    miles: earthRadius / 1609.344,\n    millimeters: earthRadius * 1000,\n    millimetres: earthRadius * 1000,\n    nauticalmiles: earthRadius / 1852,\n    radians: 1,\n    yards: earthRadius * 1.0936,\n};\n/**\n * Units of measurement factors based on 1 meter.\n *\n * @memberof helpers\n * @type {Object}\n */\nexport var unitsFactors = {\n    centimeters: 100,\n    centimetres: 100,\n    degrees: 1 / 111325,\n    feet: 3.28084,\n    inches: 39.37,\n    kilometers: 1 / 1000,\n    kilometres: 1 / 1000,\n    meters: 1,\n    metres: 1,\n    miles: 1 / 1609.344,\n    millimeters: 1000,\n    millimetres: 1000,\n    nauticalmiles: 1 / 1852,\n    radians: 1 / earthRadius,\n    yards: 1.0936133,\n};\n/**\n * Area of measurement factors based on 1 square meter.\n *\n * @memberof helpers\n * @type {Object}\n */\nexport var areaFactors = {\n    acres: 0.000247105,\n    centimeters: 10000,\n    centimetres: 10000,\n    feet: 10.763910417,\n    hectares: 0.0001,\n    inches: 1550.003100006,\n    kilometers: 0.000001,\n    kilometres: 0.000001,\n    meters: 1,\n    metres: 1,\n    miles: 3.86e-7,\n    millimeters: 1000000,\n    millimetres: 1000000,\n    yards: 1.195990046,\n};\n/**\n * Wraps a GeoJSON {@link Geometry} in a GeoJSON {@link Feature}.\n *\n * @name feature\n * @param {Geometry} geometry input geometry\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature} a GeoJSON Feature\n * @example\n * var geometry = {\n *   \"type\": \"Point\",\n *   \"coordinates\": [110, 50]\n * };\n *\n * var feature = turf.feature(geometry);\n *\n * //=feature\n */\nexport function feature(geom, properties, options) {\n    if (options === void 0) { options = {}; }\n    var feat = { type: \"Feature\" };\n    if (options.id === 0 || options.id) {\n        feat.id = options.id;\n    }\n    if (options.bbox) {\n        feat.bbox = options.bbox;\n    }\n    feat.properties = properties || {};\n    feat.geometry = geom;\n    return feat;\n}\n/**\n * Creates a GeoJSON {@link Geometry} from a Geometry string type & coordinates.\n * For GeometryCollection type use `helpers.geometryCollection`\n *\n * @name geometry\n * @param {string} type Geometry Type\n * @param {Array<any>} coordinates Coordinates\n * @param {Object} [options={}] Optional Parameters\n * @returns {Geometry} a GeoJSON Geometry\n * @example\n * var type = \"Point\";\n * var coordinates = [110, 50];\n * var geometry = turf.geometry(type, coordinates);\n * // => geometry\n */\nexport function geometry(type, coordinates, _options) {\n    if (_options === void 0) { _options = {}; }\n    switch (type) {\n        case \"Point\":\n            return point(coordinates).geometry;\n        case \"LineString\":\n            return lineString(coordinates).geometry;\n        case \"Polygon\":\n            return polygon(coordinates).geometry;\n        case \"MultiPoint\":\n            return multiPoint(coordinates).geometry;\n        case \"MultiLineString\":\n            return multiLineString(coordinates).geometry;\n        case \"MultiPolygon\":\n            return multiPolygon(coordinates).geometry;\n        default:\n            throw new Error(type + \" is invalid\");\n    }\n}\n/**\n * Creates a {@link Point} {@link Feature} from a Position.\n *\n * @name point\n * @param {Array<number>} coordinates longitude, latitude position (each in decimal degrees)\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Point>} a Point feature\n * @example\n * var point = turf.point([-75.343, 39.984]);\n *\n * //=point\n */\nexport function point(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    if (!coordinates) {\n        throw new Error(\"coordinates is required\");\n    }\n    if (!Array.isArray(coordinates)) {\n        throw new Error(\"coordinates must be an Array\");\n    }\n    if (coordinates.length < 2) {\n        throw new Error(\"coordinates must be at least 2 numbers long\");\n    }\n    if (!isNumber(coordinates[0]) || !isNumber(coordinates[1])) {\n        throw new Error(\"coordinates must contain numbers\");\n    }\n    var geom = {\n        type: \"Point\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Creates a {@link Point} {@link FeatureCollection} from an Array of Point coordinates.\n *\n * @name points\n * @param {Array<Array<number>>} coordinates an array of Points\n * @param {Object} [properties={}] Translate these properties to each Feature\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\n * associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Point>} Point Feature\n * @example\n * var points = turf.points([\n *   [-75, 39],\n *   [-80, 45],\n *   [-78, 50]\n * ]);\n *\n * //=points\n */\nexport function points(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return point(coords, properties);\n    }), options);\n}\n/**\n * Creates a {@link Polygon} {@link Feature} from an Array of LinearRings.\n *\n * @name polygon\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Polygon>} Polygon Feature\n * @example\n * var polygon = turf.polygon([[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]], { name: 'poly1' });\n *\n * //=polygon\n */\nexport function polygon(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    for (var _i = 0, coordinates_1 = coordinates; _i < coordinates_1.length; _i++) {\n        var ring = coordinates_1[_i];\n        if (ring.length < 4) {\n            throw new Error(\"Each LinearRing of a Polygon must have 4 or more Positions.\");\n        }\n        for (var j = 0; j < ring[ring.length - 1].length; j++) {\n            // Check if first point of Polygon contains two numbers\n            if (ring[ring.length - 1][j] !== ring[0][j]) {\n                throw new Error(\"First and last Position are not equivalent.\");\n            }\n        }\n    }\n    var geom = {\n        type: \"Polygon\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Creates a {@link Polygon} {@link FeatureCollection} from an Array of Polygon coordinates.\n *\n * @name polygons\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygon coordinates\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Polygon>} Polygon FeatureCollection\n * @example\n * var polygons = turf.polygons([\n *   [[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]],\n *   [[[-15, 42], [-14, 46], [-12, 41], [-17, 44], [-15, 42]]],\n * ]);\n *\n * //=polygons\n */\nexport function polygons(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return polygon(coords, properties);\n    }), options);\n}\n/**\n * Creates a {@link LineString} {@link Feature} from an Array of Positions.\n *\n * @name lineString\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<LineString>} LineString Feature\n * @example\n * var linestring1 = turf.lineString([[-24, 63], [-23, 60], [-25, 65], [-20, 69]], {name: 'line 1'});\n * var linestring2 = turf.lineString([[-14, 43], [-13, 40], [-15, 45], [-10, 49]], {name: 'line 2'});\n *\n * //=linestring1\n * //=linestring2\n */\nexport function lineString(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    if (coordinates.length < 2) {\n        throw new Error(\"coordinates must be an array of two or more positions\");\n    }\n    var geom = {\n        type: \"LineString\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Creates a {@link LineString} {@link FeatureCollection} from an Array of LineString coordinates.\n *\n * @name lineStrings\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\n * associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<LineString>} LineString FeatureCollection\n * @example\n * var linestrings = turf.lineStrings([\n *   [[-24, 63], [-23, 60], [-25, 65], [-20, 69]],\n *   [[-14, 43], [-13, 40], [-15, 45], [-10, 49]]\n * ]);\n *\n * //=linestrings\n */\nexport function lineStrings(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return lineString(coords, properties);\n    }), options);\n}\n/**\n * Takes one or more {@link Feature|Features} and creates a {@link FeatureCollection}.\n *\n * @name featureCollection\n * @param {Feature[]} features input features\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {FeatureCollection} FeatureCollection of Features\n * @example\n * var locationA = turf.point([-75.343, 39.984], {name: 'Location A'});\n * var locationB = turf.point([-75.833, 39.284], {name: 'Location B'});\n * var locationC = turf.point([-75.534, 39.123], {name: 'Location C'});\n *\n * var collection = turf.featureCollection([\n *   locationA,\n *   locationB,\n *   locationC\n * ]);\n *\n * //=collection\n */\nexport function featureCollection(features, options) {\n    if (options === void 0) { options = {}; }\n    var fc = { type: \"FeatureCollection\" };\n    if (options.id) {\n        fc.id = options.id;\n    }\n    if (options.bbox) {\n        fc.bbox = options.bbox;\n    }\n    fc.features = features;\n    return fc;\n}\n/**\n * Creates a {@link Feature<MultiLineString>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiLineString\n * @param {Array<Array<Array<number>>>} coordinates an array of LineStrings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiLineString>} a MultiLineString feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiLine = turf.multiLineString([[[0,0],[10,10]]]);\n *\n * //=multiLine\n */\nexport function multiLineString(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiLineString\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Creates a {@link Feature<MultiPoint>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPoint\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPoint>} a MultiPoint feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPt = turf.multiPoint([[0,0],[10,10]]);\n *\n * //=multiPt\n */\nexport function multiPoint(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiPoint\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Creates a {@link Feature<MultiPolygon>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPolygon\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygons\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPolygon>} a multipolygon feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPoly = turf.multiPolygon([[[[0,0],[0,10],[10,10],[10,0],[0,0]]]]);\n *\n * //=multiPoly\n *\n */\nexport function multiPolygon(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiPolygon\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Creates a {@link Feature<GeometryCollection>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name geometryCollection\n * @param {Array<Geometry>} geometries an array of GeoJSON Geometries\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<GeometryCollection>} a GeoJSON GeometryCollection Feature\n * @example\n * var pt = turf.geometry(\"Point\", [100, 0]);\n * var line = turf.geometry(\"LineString\", [[101, 0], [102, 1]]);\n * var collection = turf.geometryCollection([pt, line]);\n *\n * // => collection\n */\nexport function geometryCollection(geometries, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"GeometryCollection\",\n        geometries: geometries,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Round number to precision\n *\n * @param {number} num Number\n * @param {number} [precision=0] Precision\n * @returns {number} rounded number\n * @example\n * turf.round(120.4321)\n * //=120\n *\n * turf.round(120.4321, 2)\n * //=120.43\n */\nexport function round(num, precision) {\n    if (precision === void 0) { precision = 0; }\n    if (precision && !(precision >= 0)) {\n        throw new Error(\"precision must be a positive number\");\n    }\n    var multiplier = Math.pow(10, precision || 0);\n    return Math.round(num * multiplier) / multiplier;\n}\n/**\n * Convert a distance measurement (assuming a spherical Earth) from radians to a more friendly unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name radiansToLength\n * @param {number} radians in radians across the sphere\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} distance\n */\nexport function radiansToLength(radians, units) {\n    if (units === void 0) { units = \"kilometers\"; }\n    var factor = factors[units];\n    if (!factor) {\n        throw new Error(units + \" units is invalid\");\n    }\n    return radians * factor;\n}\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into radians\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name lengthToRadians\n * @param {number} distance in real units\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} radians\n */\nexport function lengthToRadians(distance, units) {\n    if (units === void 0) { units = \"kilometers\"; }\n    var factor = factors[units];\n    if (!factor) {\n        throw new Error(units + \" units is invalid\");\n    }\n    return distance / factor;\n}\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into degrees\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, centimeters, kilometres, feet\n *\n * @name lengthToDegrees\n * @param {number} distance in real units\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} degrees\n */\nexport function lengthToDegrees(distance, units) {\n    return radiansToDegrees(lengthToRadians(distance, units));\n}\n/**\n * Converts any bearing angle from the north line direction (positive clockwise)\n * and returns an angle between 0-360 degrees (positive clockwise), 0 being the north line\n *\n * @name bearingToAzimuth\n * @param {number} bearing angle, between -180 and +180 degrees\n * @returns {number} angle between 0 and 360 degrees\n */\nexport function bearingToAzimuth(bearing) {\n    var angle = bearing % 360;\n    if (angle < 0) {\n        angle += 360;\n    }\n    return angle;\n}\n/**\n * Converts an angle in radians to degrees\n *\n * @name radiansToDegrees\n * @param {number} radians angle in radians\n * @returns {number} degrees between 0 and 360 degrees\n */\nexport function radiansToDegrees(radians) {\n    var degrees = radians % (2 * Math.PI);\n    return (degrees * 180) / Math.PI;\n}\n/**\n * Converts an angle in degrees to radians\n *\n * @name degreesToRadians\n * @param {number} degrees angle between 0 and 360 degrees\n * @returns {number} angle in radians\n */\nexport function degreesToRadians(degrees) {\n    var radians = degrees % 360;\n    return (radians * Math.PI) / 180;\n}\n/**\n * Converts a length to the requested unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @param {number} length to be converted\n * @param {Units} [originalUnit=\"kilometers\"] of the length\n * @param {Units} [finalUnit=\"kilometers\"] returned unit\n * @returns {number} the converted length\n */\nexport function convertLength(length, originalUnit, finalUnit) {\n    if (originalUnit === void 0) { originalUnit = \"kilometers\"; }\n    if (finalUnit === void 0) { finalUnit = \"kilometers\"; }\n    if (!(length >= 0)) {\n        throw new Error(\"length must be a positive number\");\n    }\n    return radiansToLength(lengthToRadians(length, originalUnit), finalUnit);\n}\n/**\n * Converts a area to the requested unit.\n * Valid units: kilometers, kilometres, meters, metres, centimetres, millimeters, acres, miles, yards, feet, inches, hectares\n * @param {number} area to be converted\n * @param {Units} [originalUnit=\"meters\"] of the distance\n * @param {Units} [finalUnit=\"kilometers\"] returned unit\n * @returns {number} the converted area\n */\nexport function convertArea(area, originalUnit, finalUnit) {\n    if (originalUnit === void 0) { originalUnit = \"meters\"; }\n    if (finalUnit === void 0) { finalUnit = \"kilometers\"; }\n    if (!(area >= 0)) {\n        throw new Error(\"area must be a positive number\");\n    }\n    var startFactor = areaFactors[originalUnit];\n    if (!startFactor) {\n        throw new Error(\"invalid original units\");\n    }\n    var finalFactor = areaFactors[finalUnit];\n    if (!finalFactor) {\n        throw new Error(\"invalid final units\");\n    }\n    return (area / startFactor) * finalFactor;\n}\n/**\n * isNumber\n *\n * @param {*} num Number to validate\n * @returns {boolean} true/false\n * @example\n * turf.isNumber(123)\n * //=true\n * turf.isNumber('foo')\n * //=false\n */\nexport function isNumber(num) {\n    return !isNaN(num) && num !== null && !Array.isArray(num);\n}\n/**\n * isObject\n *\n * @param {*} input variable to validate\n * @returns {boolean} true/false\n * @example\n * turf.isObject({elevation: 10})\n * //=true\n * turf.isObject('foo')\n * //=false\n */\nexport function isObject(input) {\n    return !!input && input.constructor === Object;\n}\n/**\n * Validate BBox\n *\n * @private\n * @param {Array<number>} bbox BBox to validate\n * @returns {void}\n * @throws Error if BBox is not valid\n * @example\n * validateBBox([-180, -40, 110, 50])\n * //=OK\n * validateBBox([-180, -40])\n * //=Error\n * validateBBox('Foo')\n * //=Error\n * validateBBox(5)\n * //=Error\n * validateBBox(null)\n * //=Error\n * validateBBox(undefined)\n * //=Error\n */\nexport function validateBBox(bbox) {\n    if (!bbox) {\n        throw new Error(\"bbox is required\");\n    }\n    if (!Array.isArray(bbox)) {\n        throw new Error(\"bbox must be an Array\");\n    }\n    if (bbox.length !== 4 && bbox.length !== 6) {\n        throw new Error(\"bbox must be an Array of 4 or 6 numbers\");\n    }\n    bbox.forEach(function (num) {\n        if (!isNumber(num)) {\n            throw new Error(\"bbox must only contain numbers\");\n        }\n    });\n}\n/**\n * Validate Id\n *\n * @private\n * @param {string|number} id Id to validate\n * @returns {void}\n * @throws Error if Id is not valid\n * @example\n * validateId([-180, -40, 110, 50])\n * //=Error\n * validateId([-180, -40])\n * //=Error\n * validateId('Foo')\n * //=OK\n * validateId(5)\n * //=OK\n * validateId(null)\n * //=Error\n * validateId(undefined)\n * //=Error\n */\nexport function validateId(id) {\n    if (!id) {\n        throw new Error(\"id is required\");\n    }\n    if ([\"string\", \"number\"].indexOf(typeof id) === -1) {\n        throw new Error(\"id must be a number or a string\");\n    }\n}\n","import { isNumber, } from \"@turf/helpers\";\n/**\n * Unwrap a coordinate from a Point Feature, Geometry or a single coordinate.\n *\n * @name getCoord\n * @param {Array<number>|Geometry<Point>|Feature<Point>} coord GeoJSON Point or an Array of numbers\n * @returns {Array<number>} coordinates\n * @example\n * var pt = turf.point([10, 10]);\n *\n * var coord = turf.getCoord(pt);\n * //= [10, 10]\n */\nexport function getCoord(coord) {\n    if (!coord) {\n        throw new Error(\"coord is required\");\n    }\n    if (!Array.isArray(coord)) {\n        if (coord.type === \"Feature\" &&\n            coord.geometry !== null &&\n            coord.geometry.type === \"Point\") {\n            return coord.geometry.coordinates;\n        }\n        if (coord.type === \"Point\") {\n            return coord.coordinates;\n        }\n    }\n    if (Array.isArray(coord) &&\n        coord.length >= 2 &&\n        !Array.isArray(coord[0]) &&\n        !Array.isArray(coord[1])) {\n        return coord;\n    }\n    throw new Error(\"coord must be GeoJSON Point or an Array of numbers\");\n}\n/**\n * Unwrap coordinates from a Feature, Geometry Object or an Array\n *\n * @name getCoords\n * @param {Array<any>|Geometry|Feature} coords Feature, Geometry Object or an Array\n * @returns {Array<any>} coordinates\n * @example\n * var poly = turf.polygon([[[119.32, -8.7], [119.55, -8.69], [119.51, -8.54], [119.32, -8.7]]]);\n *\n * var coords = turf.getCoords(poly);\n * //= [[[119.32, -8.7], [119.55, -8.69], [119.51, -8.54], [119.32, -8.7]]]\n */\nexport function getCoords(coords) {\n    if (Array.isArray(coords)) {\n        return coords;\n    }\n    // Feature\n    if (coords.type === \"Feature\") {\n        if (coords.geometry !== null) {\n            return coords.geometry.coordinates;\n        }\n    }\n    else {\n        // Geometry\n        if (coords.coordinates) {\n            return coords.coordinates;\n        }\n    }\n    throw new Error(\"coords must be GeoJSON Feature, Geometry Object or an Array\");\n}\n/**\n * Checks if coordinates contains a number\n *\n * @name containsNumber\n * @param {Array<any>} coordinates GeoJSON Coordinates\n * @returns {boolean} true if Array contains a number\n */\nexport function containsNumber(coordinates) {\n    if (coordinates.length > 1 &&\n        isNumber(coordinates[0]) &&\n        isNumber(coordinates[1])) {\n        return true;\n    }\n    if (Array.isArray(coordinates[0]) && coordinates[0].length) {\n        return containsNumber(coordinates[0]);\n    }\n    throw new Error(\"coordinates must only contain numbers\");\n}\n/**\n * Enforce expectations about types of GeoJSON objects for Turf.\n *\n * @name geojsonType\n * @param {GeoJSON} value any GeoJSON object\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} if value is not the expected type.\n */\nexport function geojsonType(value, type, name) {\n    if (!type || !name) {\n        throw new Error(\"type and name required\");\n    }\n    if (!value || value.type !== type) {\n        throw new Error(\"Invalid input to \" +\n            name +\n            \": must be a \" +\n            type +\n            \", given \" +\n            value.type);\n    }\n}\n/**\n * Enforce expectations about types of {@link Feature} inputs for Turf.\n * Internally this uses {@link geojsonType} to judge geometry types.\n *\n * @name featureOf\n * @param {Feature} feature a feature with an expected geometry type\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} error if value is not the expected type.\n */\nexport function featureOf(feature, type, name) {\n    if (!feature) {\n        throw new Error(\"No feature passed\");\n    }\n    if (!name) {\n        throw new Error(\".featureOf() requires a name\");\n    }\n    if (!feature || feature.type !== \"Feature\" || !feature.geometry) {\n        throw new Error(\"Invalid input to \" + name + \", Feature with geometry required\");\n    }\n    if (!feature.geometry || feature.geometry.type !== type) {\n        throw new Error(\"Invalid input to \" +\n            name +\n            \": must be a \" +\n            type +\n            \", given \" +\n            feature.geometry.type);\n    }\n}\n/**\n * Enforce expectations about types of {@link FeatureCollection} inputs for Turf.\n * Internally this uses {@link geojsonType} to judge geometry types.\n *\n * @name collectionOf\n * @param {FeatureCollection} featureCollection a FeatureCollection for which features will be judged\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} if value is not the expected type.\n */\nexport function collectionOf(featureCollection, type, name) {\n    if (!featureCollection) {\n        throw new Error(\"No featureCollection passed\");\n    }\n    if (!name) {\n        throw new Error(\".collectionOf() requires a name\");\n    }\n    if (!featureCollection || featureCollection.type !== \"FeatureCollection\") {\n        throw new Error(\"Invalid input to \" + name + \", FeatureCollection required\");\n    }\n    for (var _i = 0, _a = featureCollection.features; _i < _a.length; _i++) {\n        var feature = _a[_i];\n        if (!feature || feature.type !== \"Feature\" || !feature.geometry) {\n            throw new Error(\"Invalid input to \" + name + \", Feature with geometry required\");\n        }\n        if (!feature.geometry || feature.geometry.type !== type) {\n            throw new Error(\"Invalid input to \" +\n                name +\n                \": must be a \" +\n                type +\n                \", given \" +\n                feature.geometry.type);\n        }\n    }\n}\n/**\n * Get Geometry from Feature or Geometry Object\n *\n * @param {Feature|Geometry} geojson GeoJSON Feature or Geometry Object\n * @returns {Geometry|null} GeoJSON Geometry Object\n * @throws {Error} if geojson is not a Feature or Geometry Object\n * @example\n * var point = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"Point\",\n *     \"coordinates\": [110, 40]\n *   }\n * }\n * var geom = turf.getGeom(point)\n * //={\"type\": \"Point\", \"coordinates\": [110, 40]}\n */\nexport function getGeom(geojson) {\n    if (geojson.type === \"Feature\") {\n        return geojson.geometry;\n    }\n    return geojson;\n}\n/**\n * Get GeoJSON object's type, Geometry type is prioritize.\n *\n * @param {GeoJSON} geojson GeoJSON object\n * @param {string} [name=\"geojson\"] name of the variable to display in error message (unused)\n * @returns {string} GeoJSON type\n * @example\n * var point = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"Point\",\n *     \"coordinates\": [110, 40]\n *   }\n * }\n * var geom = turf.getType(point)\n * //=\"Point\"\n */\nexport function getType(geojson, _name) {\n    if (geojson.type === \"FeatureCollection\") {\n        return \"FeatureCollection\";\n    }\n    if (geojson.type === \"GeometryCollection\") {\n        return \"GeometryCollection\";\n    }\n    if (geojson.type === \"Feature\" && geojson.geometry !== null) {\n        return geojson.geometry.type;\n    }\n    return geojson.type;\n}\n","import { getCoord, getGeom } from \"@turf/invariant\";\n// http://en.wikipedia.org/wiki/Even%E2%80%93odd_rule\n// modified from: https://github.com/substack/point-in-polygon/blob/master/index.js\n// which was modified from http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n/**\n * Takes a {@link Point} and a {@link Polygon} or {@link MultiPolygon} and determines if the point\n * resides inside the polygon. The polygon can be convex or concave. The function accounts for holes.\n *\n * @name booleanPointInPolygon\n * @param {Coord} point input point\n * @param {Feature<Polygon|MultiPolygon>} polygon input polygon or multipolygon\n * @param {Object} [options={}] Optional parameters\n * @param {boolean} [options.ignoreBoundary=false] True if polygon boundary should be ignored when determining if\n * the point is inside the polygon otherwise false.\n * @returns {boolean} `true` if the Point is inside the Polygon; `false` if the Point is not inside the Polygon\n * @example\n * var pt = turf.point([-77, 44]);\n * var poly = turf.polygon([[\n *   [-81, 41],\n *   [-81, 47],\n *   [-72, 47],\n *   [-72, 41],\n *   [-81, 41]\n * ]]);\n *\n * turf.booleanPointInPolygon(pt, poly);\n * //= true\n */\nexport default function booleanPointInPolygon(point, polygon, options) {\n    if (options === void 0) { options = {}; }\n    // validation\n    if (!point) {\n        throw new Error(\"point is required\");\n    }\n    if (!polygon) {\n        throw new Error(\"polygon is required\");\n    }\n    var pt = getCoord(point);\n    var geom = getGeom(polygon);\n    var type = geom.type;\n    var bbox = polygon.bbox;\n    var polys = geom.coordinates;\n    // Quick elimination if point is not inside bbox\n    if (bbox && inBBox(pt, bbox) === false) {\n        return false;\n    }\n    // normalize to multipolygon\n    if (type === \"Polygon\") {\n        polys = [polys];\n    }\n    var insidePoly = false;\n    for (var i = 0; i < polys.length && !insidePoly; i++) {\n        // check if it is in the outer ring first\n        if (inRing(pt, polys[i][0], options.ignoreBoundary)) {\n            var inHole = false;\n            var k = 1;\n            // check for the point in any of the holes\n            while (k < polys[i].length && !inHole) {\n                if (inRing(pt, polys[i][k], !options.ignoreBoundary)) {\n                    inHole = true;\n                }\n                k++;\n            }\n            if (!inHole) {\n                insidePoly = true;\n            }\n        }\n    }\n    return insidePoly;\n}\n/**\n * inRing\n *\n * @private\n * @param {Array<number>} pt [x,y]\n * @param {Array<Array<number>>} ring [[x,y], [x,y],..]\n * @param {boolean} ignoreBoundary ignoreBoundary\n * @returns {boolean} inRing\n */\nfunction inRing(pt, ring, ignoreBoundary) {\n    var isInside = false;\n    if (ring[0][0] === ring[ring.length - 1][0] &&\n        ring[0][1] === ring[ring.length - 1][1]) {\n        ring = ring.slice(0, ring.length - 1);\n    }\n    for (var i = 0, j = ring.length - 1; i < ring.length; j = i++) {\n        var xi = ring[i][0];\n        var yi = ring[i][1];\n        var xj = ring[j][0];\n        var yj = ring[j][1];\n        var onBoundary = pt[1] * (xi - xj) + yi * (xj - pt[0]) + yj * (pt[0] - xi) === 0 &&\n            (xi - pt[0]) * (xj - pt[0]) <= 0 &&\n            (yi - pt[1]) * (yj - pt[1]) <= 0;\n        if (onBoundary) {\n            return !ignoreBoundary;\n        }\n        var intersect = yi > pt[1] !== yj > pt[1] &&\n            pt[0] < ((xj - xi) * (pt[1] - yi)) / (yj - yi) + xi;\n        if (intersect) {\n            isInside = !isInside;\n        }\n    }\n    return isInside;\n}\n/**\n * inBBox\n *\n * @private\n * @param {Position} pt point [x,y]\n * @param {BBox} bbox BBox [west, south, east, north]\n * @returns {boolean} true/false if point is inside BBox\n */\nfunction inBBox(pt, bbox) {\n    return (bbox[0] <= pt[0] && bbox[1] <= pt[1] && bbox[2] >= pt[0] && bbox[3] >= pt[1]);\n}\n","import { feature, lineString, isObject, point } from '@turf/helpers';\n\n/**\n * Callback for coordEach\n *\n * @callback coordEachCallback\n * @param {Array<number>} currentCoord The current coordinate being processed.\n * @param {number} coordIndex The current index of the coordinate being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n */\n\n/**\n * Iterate over coordinates in any GeoJSON object, similar to Array.forEach()\n *\n * @name coordEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentCoord, coordIndex, featureIndex, multiFeatureIndex)\n * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.coordEach(features, function (currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=currentCoord\n *   //=coordIndex\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n * });\n */\nfunction coordEach(geojson, callback, excludeWrapCoord) {\n  // Handles null Geometry -- Skips this GeoJSON\n  if (geojson === null) return;\n  var j,\n    k,\n    l,\n    geometry,\n    stopG,\n    coords,\n    geometryMaybeCollection,\n    wrapShrink = 0,\n    coordIndex = 0,\n    isGeometryCollection,\n    type = geojson.type,\n    isFeatureCollection = type === \"FeatureCollection\",\n    isFeature = type === \"Feature\",\n    stop = isFeatureCollection ? geojson.features.length : 1;\n\n  // This logic may look a little weird. The reason why it is that way\n  // is because it's trying to be fast. GeoJSON supports multiple kinds\n  // of objects at its root: FeatureCollection, Features, Geometries.\n  // This function has the responsibility of handling all of them, and that\n  // means that some of the `for` loops you see below actually just don't apply\n  // to certain inputs. For instance, if you give this just a\n  // Point geometry, then both loops are short-circuited and all we do\n  // is gradually rename the input until it's called 'geometry'.\n  //\n  // This also aims to allocate as few resources as possible: just a\n  // few numbers and booleans, rather than any temporary arrays as would\n  // be required with the normalization approach.\n  for (var featureIndex = 0; featureIndex < stop; featureIndex++) {\n    geometryMaybeCollection = isFeatureCollection\n      ? geojson.features[featureIndex].geometry\n      : isFeature\n      ? geojson.geometry\n      : geojson;\n    isGeometryCollection = geometryMaybeCollection\n      ? geometryMaybeCollection.type === \"GeometryCollection\"\n      : false;\n    stopG = isGeometryCollection\n      ? geometryMaybeCollection.geometries.length\n      : 1;\n\n    for (var geomIndex = 0; geomIndex < stopG; geomIndex++) {\n      var multiFeatureIndex = 0;\n      var geometryIndex = 0;\n      geometry = isGeometryCollection\n        ? geometryMaybeCollection.geometries[geomIndex]\n        : geometryMaybeCollection;\n\n      // Handles null Geometry -- Skips this geometry\n      if (geometry === null) continue;\n      coords = geometry.coordinates;\n      var geomType = geometry.type;\n\n      wrapShrink =\n        excludeWrapCoord &&\n        (geomType === \"Polygon\" || geomType === \"MultiPolygon\")\n          ? 1\n          : 0;\n\n      switch (geomType) {\n        case null:\n          break;\n        case \"Point\":\n          if (\n            callback(\n              coords,\n              coordIndex,\n              featureIndex,\n              multiFeatureIndex,\n              geometryIndex\n            ) === false\n          )\n            return false;\n          coordIndex++;\n          multiFeatureIndex++;\n          break;\n        case \"LineString\":\n        case \"MultiPoint\":\n          for (j = 0; j < coords.length; j++) {\n            if (\n              callback(\n                coords[j],\n                coordIndex,\n                featureIndex,\n                multiFeatureIndex,\n                geometryIndex\n              ) === false\n            )\n              return false;\n            coordIndex++;\n            if (geomType === \"MultiPoint\") multiFeatureIndex++;\n          }\n          if (geomType === \"LineString\") multiFeatureIndex++;\n          break;\n        case \"Polygon\":\n        case \"MultiLineString\":\n          for (j = 0; j < coords.length; j++) {\n            for (k = 0; k < coords[j].length - wrapShrink; k++) {\n              if (\n                callback(\n                  coords[j][k],\n                  coordIndex,\n                  featureIndex,\n                  multiFeatureIndex,\n                  geometryIndex\n                ) === false\n              )\n                return false;\n              coordIndex++;\n            }\n            if (geomType === \"MultiLineString\") multiFeatureIndex++;\n            if (geomType === \"Polygon\") geometryIndex++;\n          }\n          if (geomType === \"Polygon\") multiFeatureIndex++;\n          break;\n        case \"MultiPolygon\":\n          for (j = 0; j < coords.length; j++) {\n            geometryIndex = 0;\n            for (k = 0; k < coords[j].length; k++) {\n              for (l = 0; l < coords[j][k].length - wrapShrink; l++) {\n                if (\n                  callback(\n                    coords[j][k][l],\n                    coordIndex,\n                    featureIndex,\n                    multiFeatureIndex,\n                    geometryIndex\n                  ) === false\n                )\n                  return false;\n                coordIndex++;\n              }\n              geometryIndex++;\n            }\n            multiFeatureIndex++;\n          }\n          break;\n        case \"GeometryCollection\":\n          for (j = 0; j < geometry.geometries.length; j++)\n            if (\n              coordEach(geometry.geometries[j], callback, excludeWrapCoord) ===\n              false\n            )\n              return false;\n          break;\n        default:\n          throw new Error(\"Unknown Geometry Type\");\n      }\n    }\n  }\n}\n\n/**\n * Callback for coordReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback coordReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Array<number>} currentCoord The current coordinate being processed.\n * @param {number} coordIndex The current index of the coordinate being processed.\n * Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n */\n\n/**\n * Reduce coordinates in any GeoJSON object, similar to Array.reduce()\n *\n * @name coordReduce\n * @param {FeatureCollection|Geometry|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentCoord, coordIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.coordReduce(features, function (previousValue, currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=previousValue\n *   //=currentCoord\n *   //=coordIndex\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   return currentCoord;\n * });\n */\nfunction coordReduce(geojson, callback, initialValue, excludeWrapCoord) {\n  var previousValue = initialValue;\n  coordEach(\n    geojson,\n    function (\n      currentCoord,\n      coordIndex,\n      featureIndex,\n      multiFeatureIndex,\n      geometryIndex\n    ) {\n      if (coordIndex === 0 && initialValue === undefined)\n        previousValue = currentCoord;\n      else\n        previousValue = callback(\n          previousValue,\n          currentCoord,\n          coordIndex,\n          featureIndex,\n          multiFeatureIndex,\n          geometryIndex\n        );\n    },\n    excludeWrapCoord\n  );\n  return previousValue;\n}\n\n/**\n * Callback for propEach\n *\n * @callback propEachCallback\n * @param {Object} currentProperties The current Properties being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Iterate over properties in any GeoJSON object, similar to Array.forEach()\n *\n * @name propEach\n * @param {FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentProperties, featureIndex)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.propEach(features, function (currentProperties, featureIndex) {\n *   //=currentProperties\n *   //=featureIndex\n * });\n */\nfunction propEach(geojson, callback) {\n  var i;\n  switch (geojson.type) {\n    case \"FeatureCollection\":\n      for (i = 0; i < geojson.features.length; i++) {\n        if (callback(geojson.features[i].properties, i) === false) break;\n      }\n      break;\n    case \"Feature\":\n      callback(geojson.properties, 0);\n      break;\n  }\n}\n\n/**\n * Callback for propReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback propReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {*} currentProperties The current Properties being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Reduce properties in any GeoJSON object into a single value,\n * similar to how Array.reduce works. However, in this case we lazily run\n * the reduction, so an array of all properties is unnecessary.\n *\n * @name propReduce\n * @param {FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentProperties, featureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.propReduce(features, function (previousValue, currentProperties, featureIndex) {\n *   //=previousValue\n *   //=currentProperties\n *   //=featureIndex\n *   return currentProperties\n * });\n */\nfunction propReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  propEach(geojson, function (currentProperties, featureIndex) {\n    if (featureIndex === 0 && initialValue === undefined)\n      previousValue = currentProperties;\n    else\n      previousValue = callback(previousValue, currentProperties, featureIndex);\n  });\n  return previousValue;\n}\n\n/**\n * Callback for featureEach\n *\n * @callback featureEachCallback\n * @param {Feature<any>} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Iterate over features in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @name featureEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentFeature, featureIndex)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {foo: 'bar'}),\n *   turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.featureEach(features, function (currentFeature, featureIndex) {\n *   //=currentFeature\n *   //=featureIndex\n * });\n */\nfunction featureEach(geojson, callback) {\n  if (geojson.type === \"Feature\") {\n    callback(geojson, 0);\n  } else if (geojson.type === \"FeatureCollection\") {\n    for (var i = 0; i < geojson.features.length; i++) {\n      if (callback(geojson.features[i], i) === false) break;\n    }\n  }\n}\n\n/**\n * Callback for featureReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback featureReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Reduce features in any GeoJSON object, similar to Array.reduce().\n *\n * @name featureReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.featureReduce(features, function (previousValue, currentFeature, featureIndex) {\n *   //=previousValue\n *   //=currentFeature\n *   //=featureIndex\n *   return currentFeature\n * });\n */\nfunction featureReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  featureEach(geojson, function (currentFeature, featureIndex) {\n    if (featureIndex === 0 && initialValue === undefined)\n      previousValue = currentFeature;\n    else previousValue = callback(previousValue, currentFeature, featureIndex);\n  });\n  return previousValue;\n}\n\n/**\n * Get all coordinates from any GeoJSON object.\n *\n * @name coordAll\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @returns {Array<Array<number>>} coordinate position array\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {foo: 'bar'}),\n *   turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * var coords = turf.coordAll(features);\n * //= [[26, 37], [36, 53]]\n */\nfunction coordAll(geojson) {\n  var coords = [];\n  coordEach(geojson, function (coord) {\n    coords.push(coord);\n  });\n  return coords;\n}\n\n/**\n * Callback for geomEach\n *\n * @callback geomEachCallback\n * @param {Geometry} currentGeometry The current Geometry being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {Object} featureProperties The current Feature Properties being processed.\n * @param {Array<number>} featureBBox The current Feature BBox being processed.\n * @param {number|string} featureId The current Feature Id being processed.\n */\n\n/**\n * Iterate over each geometry in any GeoJSON object, similar to Array.forEach()\n *\n * @name geomEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.geomEach(features, function (currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n *   //=currentGeometry\n *   //=featureIndex\n *   //=featureProperties\n *   //=featureBBox\n *   //=featureId\n * });\n */\nfunction geomEach(geojson, callback) {\n  var i,\n    j,\n    g,\n    geometry,\n    stopG,\n    geometryMaybeCollection,\n    isGeometryCollection,\n    featureProperties,\n    featureBBox,\n    featureId,\n    featureIndex = 0,\n    isFeatureCollection = geojson.type === \"FeatureCollection\",\n    isFeature = geojson.type === \"Feature\",\n    stop = isFeatureCollection ? geojson.features.length : 1;\n\n  // This logic may look a little weird. The reason why it is that way\n  // is because it's trying to be fast. GeoJSON supports multiple kinds\n  // of objects at its root: FeatureCollection, Features, Geometries.\n  // This function has the responsibility of handling all of them, and that\n  // means that some of the `for` loops you see below actually just don't apply\n  // to certain inputs. For instance, if you give this just a\n  // Point geometry, then both loops are short-circuited and all we do\n  // is gradually rename the input until it's called 'geometry'.\n  //\n  // This also aims to allocate as few resources as possible: just a\n  // few numbers and booleans, rather than any temporary arrays as would\n  // be required with the normalization approach.\n  for (i = 0; i < stop; i++) {\n    geometryMaybeCollection = isFeatureCollection\n      ? geojson.features[i].geometry\n      : isFeature\n      ? geojson.geometry\n      : geojson;\n    featureProperties = isFeatureCollection\n      ? geojson.features[i].properties\n      : isFeature\n      ? geojson.properties\n      : {};\n    featureBBox = isFeatureCollection\n      ? geojson.features[i].bbox\n      : isFeature\n      ? geojson.bbox\n      : undefined;\n    featureId = isFeatureCollection\n      ? geojson.features[i].id\n      : isFeature\n      ? geojson.id\n      : undefined;\n    isGeometryCollection = geometryMaybeCollection\n      ? geometryMaybeCollection.type === \"GeometryCollection\"\n      : false;\n    stopG = isGeometryCollection\n      ? geometryMaybeCollection.geometries.length\n      : 1;\n\n    for (g = 0; g < stopG; g++) {\n      geometry = isGeometryCollection\n        ? geometryMaybeCollection.geometries[g]\n        : geometryMaybeCollection;\n\n      // Handle null Geometry\n      if (geometry === null) {\n        if (\n          callback(\n            null,\n            featureIndex,\n            featureProperties,\n            featureBBox,\n            featureId\n          ) === false\n        )\n          return false;\n        continue;\n      }\n      switch (geometry.type) {\n        case \"Point\":\n        case \"LineString\":\n        case \"MultiPoint\":\n        case \"Polygon\":\n        case \"MultiLineString\":\n        case \"MultiPolygon\": {\n          if (\n            callback(\n              geometry,\n              featureIndex,\n              featureProperties,\n              featureBBox,\n              featureId\n            ) === false\n          )\n            return false;\n          break;\n        }\n        case \"GeometryCollection\": {\n          for (j = 0; j < geometry.geometries.length; j++) {\n            if (\n              callback(\n                geometry.geometries[j],\n                featureIndex,\n                featureProperties,\n                featureBBox,\n                featureId\n              ) === false\n            )\n              return false;\n          }\n          break;\n        }\n        default:\n          throw new Error(\"Unknown Geometry Type\");\n      }\n    }\n    // Only increase `featureIndex` per each feature\n    featureIndex++;\n  }\n}\n\n/**\n * Callback for geomReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback geomReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Geometry} currentGeometry The current Geometry being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {Object} featureProperties The current Feature Properties being processed.\n * @param {Array<number>} featureBBox The current Feature BBox being processed.\n * @param {number|string} featureId The current Feature Id being processed.\n */\n\n/**\n * Reduce geometry in any GeoJSON object, similar to Array.reduce().\n *\n * @name geomReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.geomReduce(features, function (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n *   //=previousValue\n *   //=currentGeometry\n *   //=featureIndex\n *   //=featureProperties\n *   //=featureBBox\n *   //=featureId\n *   return currentGeometry\n * });\n */\nfunction geomReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  geomEach(\n    geojson,\n    function (\n      currentGeometry,\n      featureIndex,\n      featureProperties,\n      featureBBox,\n      featureId\n    ) {\n      if (featureIndex === 0 && initialValue === undefined)\n        previousValue = currentGeometry;\n      else\n        previousValue = callback(\n          previousValue,\n          currentGeometry,\n          featureIndex,\n          featureProperties,\n          featureBBox,\n          featureId\n        );\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Callback for flattenEach\n *\n * @callback flattenEachCallback\n * @param {Feature} currentFeature The current flattened feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n */\n\n/**\n * Iterate over flattened features in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @name flattenEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentFeature, featureIndex, multiFeatureIndex)\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n * ]);\n *\n * turf.flattenEach(features, function (currentFeature, featureIndex, multiFeatureIndex) {\n *   //=currentFeature\n *   //=featureIndex\n *   //=multiFeatureIndex\n * });\n */\nfunction flattenEach(geojson, callback) {\n  geomEach(geojson, function (geometry, featureIndex, properties, bbox, id) {\n    // Callback for single geometry\n    var type = geometry === null ? null : geometry.type;\n    switch (type) {\n      case null:\n      case \"Point\":\n      case \"LineString\":\n      case \"Polygon\":\n        if (\n          callback(\n            feature(geometry, properties, { bbox: bbox, id: id }),\n            featureIndex,\n            0\n          ) === false\n        )\n          return false;\n        return;\n    }\n\n    var geomType;\n\n    // Callback for multi-geometry\n    switch (type) {\n      case \"MultiPoint\":\n        geomType = \"Point\";\n        break;\n      case \"MultiLineString\":\n        geomType = \"LineString\";\n        break;\n      case \"MultiPolygon\":\n        geomType = \"Polygon\";\n        break;\n    }\n\n    for (\n      var multiFeatureIndex = 0;\n      multiFeatureIndex < geometry.coordinates.length;\n      multiFeatureIndex++\n    ) {\n      var coordinate = geometry.coordinates[multiFeatureIndex];\n      var geom = {\n        type: geomType,\n        coordinates: coordinate,\n      };\n      if (\n        callback(feature(geom, properties), featureIndex, multiFeatureIndex) ===\n        false\n      )\n        return false;\n    }\n  });\n}\n\n/**\n * Callback for flattenReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback flattenReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n */\n\n/**\n * Reduce flattened features in any GeoJSON object, similar to Array.reduce().\n *\n * @name flattenReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex, multiFeatureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n * ]);\n *\n * turf.flattenReduce(features, function (previousValue, currentFeature, featureIndex, multiFeatureIndex) {\n *   //=previousValue\n *   //=currentFeature\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   return currentFeature\n * });\n */\nfunction flattenReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  flattenEach(\n    geojson,\n    function (currentFeature, featureIndex, multiFeatureIndex) {\n      if (\n        featureIndex === 0 &&\n        multiFeatureIndex === 0 &&\n        initialValue === undefined\n      )\n        previousValue = currentFeature;\n      else\n        previousValue = callback(\n          previousValue,\n          currentFeature,\n          featureIndex,\n          multiFeatureIndex\n        );\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Callback for segmentEach\n *\n * @callback segmentEachCallback\n * @param {Feature<LineString>} currentSegment The current Segment being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n * @param {number} segmentIndex The current index of the Segment being processed.\n * @returns {void}\n */\n\n/**\n * Iterate over 2-vertex line segment in any GeoJSON object, similar to Array.forEach()\n * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON\n * @param {Function} callback a method that takes (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex)\n * @returns {void}\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n *\n * // Iterate over GeoJSON by 2-vertex segments\n * turf.segmentEach(polygon, function (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n *   //=currentSegment\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   //=segmentIndex\n * });\n *\n * // Calculate the total number of segments\n * var total = 0;\n * turf.segmentEach(polygon, function () {\n *     total++;\n * });\n */\nfunction segmentEach(geojson, callback) {\n  flattenEach(geojson, function (feature, featureIndex, multiFeatureIndex) {\n    var segmentIndex = 0;\n\n    // Exclude null Geometries\n    if (!feature.geometry) return;\n    // (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n    var type = feature.geometry.type;\n    if (type === \"Point\" || type === \"MultiPoint\") return;\n\n    // Generate 2-vertex line segments\n    var previousCoords;\n    var previousFeatureIndex = 0;\n    var previousMultiIndex = 0;\n    var prevGeomIndex = 0;\n    if (\n      coordEach(\n        feature,\n        function (\n          currentCoord,\n          coordIndex,\n          featureIndexCoord,\n          multiPartIndexCoord,\n          geometryIndex\n        ) {\n          // Simulating a meta.coordReduce() since `reduce` operations cannot be stopped by returning `false`\n          if (\n            previousCoords === undefined ||\n            featureIndex > previousFeatureIndex ||\n            multiPartIndexCoord > previousMultiIndex ||\n            geometryIndex > prevGeomIndex\n          ) {\n            previousCoords = currentCoord;\n            previousFeatureIndex = featureIndex;\n            previousMultiIndex = multiPartIndexCoord;\n            prevGeomIndex = geometryIndex;\n            segmentIndex = 0;\n            return;\n          }\n          var currentSegment = lineString(\n            [previousCoords, currentCoord],\n            feature.properties\n          );\n          if (\n            callback(\n              currentSegment,\n              featureIndex,\n              multiFeatureIndex,\n              geometryIndex,\n              segmentIndex\n            ) === false\n          )\n            return false;\n          segmentIndex++;\n          previousCoords = currentCoord;\n        }\n      ) === false\n    )\n      return false;\n  });\n}\n\n/**\n * Callback for segmentReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback segmentReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature<LineString>} currentSegment The current Segment being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n * @param {number} segmentIndex The current index of the Segment being processed.\n */\n\n/**\n * Reduce 2-vertex line segment in any GeoJSON object, similar to Array.reduce()\n * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON\n * @param {Function} callback a method that takes (previousValue, currentSegment, currentIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {void}\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n *\n * // Iterate over GeoJSON by 2-vertex segments\n * turf.segmentReduce(polygon, function (previousSegment, currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n *   //= previousSegment\n *   //= currentSegment\n *   //= featureIndex\n *   //= multiFeatureIndex\n *   //= geometryIndex\n *   //= segmentIndex\n *   return currentSegment\n * });\n *\n * // Calculate the total number of segments\n * var initialValue = 0\n * var total = turf.segmentReduce(polygon, function (previousValue) {\n *     previousValue++;\n *     return previousValue;\n * }, initialValue);\n */\nfunction segmentReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  var started = false;\n  segmentEach(\n    geojson,\n    function (\n      currentSegment,\n      featureIndex,\n      multiFeatureIndex,\n      geometryIndex,\n      segmentIndex\n    ) {\n      if (started === false && initialValue === undefined)\n        previousValue = currentSegment;\n      else\n        previousValue = callback(\n          previousValue,\n          currentSegment,\n          featureIndex,\n          multiFeatureIndex,\n          geometryIndex,\n          segmentIndex\n        );\n      started = true;\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Callback for lineEach\n *\n * @callback lineEachCallback\n * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed\n * @param {number} featureIndex The current index of the Feature being processed\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed\n * @param {number} geometryIndex The current index of the Geometry being processed\n */\n\n/**\n * Iterate over line or ring coordinates in LineString, Polygon, MultiLineString, MultiPolygon Features or Geometries,\n * similar to Array.forEach.\n *\n * @name lineEach\n * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object\n * @param {Function} callback a method that takes (currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n * @example\n * var multiLine = turf.multiLineString([\n *   [[26, 37], [35, 45]],\n *   [[36, 53], [38, 50], [41, 55]]\n * ]);\n *\n * turf.lineEach(multiLine, function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=currentLine\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n * });\n */\nfunction lineEach(geojson, callback) {\n  // validation\n  if (!geojson) throw new Error(\"geojson is required\");\n\n  flattenEach(geojson, function (feature, featureIndex, multiFeatureIndex) {\n    if (feature.geometry === null) return;\n    var type = feature.geometry.type;\n    var coords = feature.geometry.coordinates;\n    switch (type) {\n      case \"LineString\":\n        if (callback(feature, featureIndex, multiFeatureIndex, 0, 0) === false)\n          return false;\n        break;\n      case \"Polygon\":\n        for (\n          var geometryIndex = 0;\n          geometryIndex < coords.length;\n          geometryIndex++\n        ) {\n          if (\n            callback(\n              lineString(coords[geometryIndex], feature.properties),\n              featureIndex,\n              multiFeatureIndex,\n              geometryIndex\n            ) === false\n          )\n            return false;\n        }\n        break;\n    }\n  });\n}\n\n/**\n * Callback for lineReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback lineReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed.\n * @param {number} featureIndex The current index of the Feature being processed\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed\n * @param {number} geometryIndex The current index of the Geometry being processed\n */\n\n/**\n * Reduce features in any GeoJSON object, similar to Array.reduce().\n *\n * @name lineReduce\n * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object\n * @param {Function} callback a method that takes (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var multiPoly = turf.multiPolygon([\n *   turf.polygon([[[12,48],[2,41],[24,38],[12,48]], [[9,44],[13,41],[13,45],[9,44]]]),\n *   turf.polygon([[[5, 5], [0, 0], [2, 2], [4, 4], [5, 5]]])\n * ]);\n *\n * turf.lineReduce(multiPoly, function (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=previousValue\n *   //=currentLine\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   return currentLine\n * });\n */\nfunction lineReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  lineEach(\n    geojson,\n    function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n      if (featureIndex === 0 && initialValue === undefined)\n        previousValue = currentLine;\n      else\n        previousValue = callback(\n          previousValue,\n          currentLine,\n          featureIndex,\n          multiFeatureIndex,\n          geometryIndex\n        );\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Finds a particular 2-vertex LineString Segment from a GeoJSON using `@turf/meta` indexes.\n *\n * Negative indexes are permitted.\n * Point & MultiPoint will always return null.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.featureIndex=0] Feature Index\n * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index\n * @param {number} [options.geometryIndex=0] Geometry Index\n * @param {number} [options.segmentIndex=0] Segment Index\n * @param {Object} [options.properties={}] Translate Properties to output LineString\n * @param {BBox} [options.bbox={}] Translate BBox to output LineString\n * @param {number|string} [options.id={}] Translate Id to output LineString\n * @returns {Feature<LineString>} 2-vertex GeoJSON Feature LineString\n * @example\n * var multiLine = turf.multiLineString([\n *     [[10, 10], [50, 30], [30, 40]],\n *     [[-10, -10], [-50, -30], [-30, -40]]\n * ]);\n *\n * // First Segment (defaults are 0)\n * turf.findSegment(multiLine);\n * // => Feature<LineString<[[10, 10], [50, 30]]>>\n *\n * // First Segment of 2nd Multi Feature\n * turf.findSegment(multiLine, {multiFeatureIndex: 1});\n * // => Feature<LineString<[[-10, -10], [-50, -30]]>>\n *\n * // Last Segment of Last Multi Feature\n * turf.findSegment(multiLine, {multiFeatureIndex: -1, segmentIndex: -1});\n * // => Feature<LineString<[[-50, -30], [-30, -40]]>>\n */\nfunction findSegment(geojson, options) {\n  // Optional Parameters\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  var featureIndex = options.featureIndex || 0;\n  var multiFeatureIndex = options.multiFeatureIndex || 0;\n  var geometryIndex = options.geometryIndex || 0;\n  var segmentIndex = options.segmentIndex || 0;\n\n  // Find FeatureIndex\n  var properties = options.properties;\n  var geometry;\n\n  switch (geojson.type) {\n    case \"FeatureCollection\":\n      if (featureIndex < 0)\n        featureIndex = geojson.features.length + featureIndex;\n      properties = properties || geojson.features[featureIndex].properties;\n      geometry = geojson.features[featureIndex].geometry;\n      break;\n    case \"Feature\":\n      properties = properties || geojson.properties;\n      geometry = geojson.geometry;\n      break;\n    case \"Point\":\n    case \"MultiPoint\":\n      return null;\n    case \"LineString\":\n    case \"Polygon\":\n    case \"MultiLineString\":\n    case \"MultiPolygon\":\n      geometry = geojson;\n      break;\n    default:\n      throw new Error(\"geojson is invalid\");\n  }\n\n  // Find SegmentIndex\n  if (geometry === null) return null;\n  var coords = geometry.coordinates;\n  switch (geometry.type) {\n    case \"Point\":\n    case \"MultiPoint\":\n      return null;\n    case \"LineString\":\n      if (segmentIndex < 0) segmentIndex = coords.length + segmentIndex - 1;\n      return lineString(\n        [coords[segmentIndex], coords[segmentIndex + 1]],\n        properties,\n        options\n      );\n    case \"Polygon\":\n      if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;\n      if (segmentIndex < 0)\n        segmentIndex = coords[geometryIndex].length + segmentIndex - 1;\n      return lineString(\n        [\n          coords[geometryIndex][segmentIndex],\n          coords[geometryIndex][segmentIndex + 1],\n        ],\n        properties,\n        options\n      );\n    case \"MultiLineString\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (segmentIndex < 0)\n        segmentIndex = coords[multiFeatureIndex].length + segmentIndex - 1;\n      return lineString(\n        [\n          coords[multiFeatureIndex][segmentIndex],\n          coords[multiFeatureIndex][segmentIndex + 1],\n        ],\n        properties,\n        options\n      );\n    case \"MultiPolygon\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (geometryIndex < 0)\n        geometryIndex = coords[multiFeatureIndex].length + geometryIndex;\n      if (segmentIndex < 0)\n        segmentIndex =\n          coords[multiFeatureIndex][geometryIndex].length - segmentIndex - 1;\n      return lineString(\n        [\n          coords[multiFeatureIndex][geometryIndex][segmentIndex],\n          coords[multiFeatureIndex][geometryIndex][segmentIndex + 1],\n        ],\n        properties,\n        options\n      );\n  }\n  throw new Error(\"geojson is invalid\");\n}\n\n/**\n * Finds a particular Point from a GeoJSON using `@turf/meta` indexes.\n *\n * Negative indexes are permitted.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.featureIndex=0] Feature Index\n * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index\n * @param {number} [options.geometryIndex=0] Geometry Index\n * @param {number} [options.coordIndex=0] Coord Index\n * @param {Object} [options.properties={}] Translate Properties to output Point\n * @param {BBox} [options.bbox={}] Translate BBox to output Point\n * @param {number|string} [options.id={}] Translate Id to output Point\n * @returns {Feature<Point>} 2-vertex GeoJSON Feature Point\n * @example\n * var multiLine = turf.multiLineString([\n *     [[10, 10], [50, 30], [30, 40]],\n *     [[-10, -10], [-50, -30], [-30, -40]]\n * ]);\n *\n * // First Segment (defaults are 0)\n * turf.findPoint(multiLine);\n * // => Feature<Point<[10, 10]>>\n *\n * // First Segment of the 2nd Multi-Feature\n * turf.findPoint(multiLine, {multiFeatureIndex: 1});\n * // => Feature<Point<[-10, -10]>>\n *\n * // Last Segment of last Multi-Feature\n * turf.findPoint(multiLine, {multiFeatureIndex: -1, coordIndex: -1});\n * // => Feature<Point<[-30, -40]>>\n */\nfunction findPoint(geojson, options) {\n  // Optional Parameters\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  var featureIndex = options.featureIndex || 0;\n  var multiFeatureIndex = options.multiFeatureIndex || 0;\n  var geometryIndex = options.geometryIndex || 0;\n  var coordIndex = options.coordIndex || 0;\n\n  // Find FeatureIndex\n  var properties = options.properties;\n  var geometry;\n\n  switch (geojson.type) {\n    case \"FeatureCollection\":\n      if (featureIndex < 0)\n        featureIndex = geojson.features.length + featureIndex;\n      properties = properties || geojson.features[featureIndex].properties;\n      geometry = geojson.features[featureIndex].geometry;\n      break;\n    case \"Feature\":\n      properties = properties || geojson.properties;\n      geometry = geojson.geometry;\n      break;\n    case \"Point\":\n    case \"MultiPoint\":\n      return null;\n    case \"LineString\":\n    case \"Polygon\":\n    case \"MultiLineString\":\n    case \"MultiPolygon\":\n      geometry = geojson;\n      break;\n    default:\n      throw new Error(\"geojson is invalid\");\n  }\n\n  // Find Coord Index\n  if (geometry === null) return null;\n  var coords = geometry.coordinates;\n  switch (geometry.type) {\n    case \"Point\":\n      return point(coords, properties, options);\n    case \"MultiPoint\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      return point(coords[multiFeatureIndex], properties, options);\n    case \"LineString\":\n      if (coordIndex < 0) coordIndex = coords.length + coordIndex;\n      return point(coords[coordIndex], properties, options);\n    case \"Polygon\":\n      if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;\n      if (coordIndex < 0)\n        coordIndex = coords[geometryIndex].length + coordIndex;\n      return point(coords[geometryIndex][coordIndex], properties, options);\n    case \"MultiLineString\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (coordIndex < 0)\n        coordIndex = coords[multiFeatureIndex].length + coordIndex;\n      return point(coords[multiFeatureIndex][coordIndex], properties, options);\n    case \"MultiPolygon\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (geometryIndex < 0)\n        geometryIndex = coords[multiFeatureIndex].length + geometryIndex;\n      if (coordIndex < 0)\n        coordIndex =\n          coords[multiFeatureIndex][geometryIndex].length - coordIndex;\n      return point(\n        coords[multiFeatureIndex][geometryIndex][coordIndex],\n        properties,\n        options\n      );\n  }\n  throw new Error(\"geojson is invalid\");\n}\n\nexport { coordAll, coordEach, coordReduce, featureEach, featureReduce, findPoint, findSegment, flattenEach, flattenReduce, geomEach, geomReduce, lineEach, lineReduce, propEach, propReduce, segmentEach, segmentReduce };\n","import { featureCollection, lineString, } from \"@turf/helpers\";\nimport { getCoords } from \"@turf/invariant\";\nimport { flattenEach } from \"@turf/meta\";\n/**\n * Creates a {@link FeatureCollection} of 2-vertex {@link LineString} segments from a\n * {@link LineString|(Multi)LineString} or {@link Polygon|(Multi)Polygon}.\n *\n * @name lineSegment\n * @param {GeoJSON} geojson GeoJSON Polygon or LineString\n * @returns {FeatureCollection<LineString>} 2-vertex line segments\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n * var segments = turf.lineSegment(polygon);\n *\n * //addToMap\n * var addToMap = [polygon, segments]\n */\nfunction lineSegment(geojson) {\n    if (!geojson) {\n        throw new Error(\"geojson is required\");\n    }\n    var results = [];\n    flattenEach(geojson, function (feature) {\n        lineSegmentFeature(feature, results);\n    });\n    return featureCollection(results);\n}\n/**\n * Line Segment\n *\n * @private\n * @param {Feature<LineString|Polygon>} geojson Line or polygon feature\n * @param {Array} results push to results\n * @returns {void}\n */\nfunction lineSegmentFeature(geojson, results) {\n    var coords = [];\n    var geometry = geojson.geometry;\n    if (geometry !== null) {\n        switch (geometry.type) {\n            case \"Polygon\":\n                coords = getCoords(geometry);\n                break;\n            case \"LineString\":\n                coords = [getCoords(geometry)];\n        }\n        coords.forEach(function (coord) {\n            var segments = createSegments(coord, geojson.properties);\n            segments.forEach(function (segment) {\n                segment.id = results.length;\n                results.push(segment);\n            });\n        });\n    }\n}\n/**\n * Create Segments from LineString coordinates\n *\n * @private\n * @param {Array<Array<number>>} coords LineString coordinates\n * @param {*} properties GeoJSON properties\n * @returns {Array<Feature<LineString>>} line segments\n */\nfunction createSegments(coords, properties) {\n    var segments = [];\n    coords.reduce(function (previousCoords, currentCoords) {\n        var segment = lineString([previousCoords, currentCoords], properties);\n        segment.bbox = bbox(previousCoords, currentCoords);\n        segments.push(segment);\n        return currentCoords;\n    });\n    return segments;\n}\n/**\n * Create BBox between two coordinates (faster than @turf/bbox)\n *\n * @private\n * @param {Array<number>} coords1 Point coordinate\n * @param {Array<number>} coords2 Point coordinate\n * @returns {BBox} [west, south, east, north]\n */\nfunction bbox(coords1, coords2) {\n    var x1 = coords1[0];\n    var y1 = coords1[1];\n    var x2 = coords2[0];\n    var y2 = coords2[1];\n    var west = x1 < x2 ? x1 : x2;\n    var south = y1 < y2 ? y1 : y2;\n    var east = x1 > x2 ? x1 : x2;\n    var north = y1 > y2 ? y1 : y2;\n    return [west, south, east, north];\n}\nexport default lineSegment;\n","\nexport default function quickselect(arr, k, left, right, compare) {\n    quickselectStep(arr, k, left || 0, right || (arr.length - 1), compare || defaultCompare);\n}\n\nfunction quickselectStep(arr, k, left, right, compare) {\n\n    while (right > left) {\n        if (right - left > 600) {\n            var n = right - left + 1;\n            var m = k - left + 1;\n            var z = Math.log(n);\n            var s = 0.5 * Math.exp(2 * z / 3);\n            var sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);\n            var newLeft = Math.max(left, Math.floor(k - m * s / n + sd));\n            var newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));\n            quickselectStep(arr, k, newLeft, newRight, compare);\n        }\n\n        var t = arr[k];\n        var i = left;\n        var j = right;\n\n        swap(arr, left, k);\n        if (compare(arr[right], t) > 0) swap(arr, left, right);\n\n        while (i < j) {\n            swap(arr, i, j);\n            i++;\n            j--;\n            while (compare(arr[i], t) < 0) i++;\n            while (compare(arr[j], t) > 0) j--;\n        }\n\n        if (compare(arr[left], t) === 0) swap(arr, left, j);\n        else {\n            j++;\n            swap(arr, j, right);\n        }\n\n        if (j <= k) left = j + 1;\n        if (k <= j) right = j - 1;\n    }\n}\n\nfunction swap(arr, i, j) {\n    var tmp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = tmp;\n}\n\nfunction defaultCompare(a, b) {\n    return a < b ? -1 : a > b ? 1 : 0;\n}\n","import quickselect from 'quickselect';\n\nexport default class RBush {\n    constructor(maxEntries = 9) {\n        // max entries in a node is 9 by default; min node fill is 40% for best performance\n        this._maxEntries = Math.max(4, maxEntries);\n        this._minEntries = Math.max(2, Math.ceil(this._maxEntries * 0.4));\n        this.clear();\n    }\n\n    all() {\n        return this._all(this.data, []);\n    }\n\n    search(bbox) {\n        let node = this.data;\n        const result = [];\n\n        if (!intersects(bbox, node)) return result;\n\n        const toBBox = this.toBBox;\n        const nodesToSearch = [];\n\n        while (node) {\n            for (let i = 0; i < node.children.length; i++) {\n                const child = node.children[i];\n                const childBBox = node.leaf ? toBBox(child) : child;\n\n                if (intersects(bbox, childBBox)) {\n                    if (node.leaf) result.push(child);\n                    else if (contains(bbox, childBBox)) this._all(child, result);\n                    else nodesToSearch.push(child);\n                }\n            }\n            node = nodesToSearch.pop();\n        }\n\n        return result;\n    }\n\n    collides(bbox) {\n        let node = this.data;\n\n        if (!intersects(bbox, node)) return false;\n\n        const nodesToSearch = [];\n        while (node) {\n            for (let i = 0; i < node.children.length; i++) {\n                const child = node.children[i];\n                const childBBox = node.leaf ? this.toBBox(child) : child;\n\n                if (intersects(bbox, childBBox)) {\n                    if (node.leaf || contains(bbox, childBBox)) return true;\n                    nodesToSearch.push(child);\n                }\n            }\n            node = nodesToSearch.pop();\n        }\n\n        return false;\n    }\n\n    load(data) {\n        if (!(data && data.length)) return this;\n\n        if (data.length < this._minEntries) {\n            for (let i = 0; i < data.length; i++) {\n                this.insert(data[i]);\n            }\n            return this;\n        }\n\n        // recursively build the tree with the given data from scratch using OMT algorithm\n        let node = this._build(data.slice(), 0, data.length - 1, 0);\n\n        if (!this.data.children.length) {\n            // save as is if tree is empty\n            this.data = node;\n\n        } else if (this.data.height === node.height) {\n            // split root if trees have the same height\n            this._splitRoot(this.data, node);\n\n        } else {\n            if (this.data.height < node.height) {\n                // swap trees if inserted one is bigger\n                const tmpNode = this.data;\n                this.data = node;\n                node = tmpNode;\n            }\n\n            // insert the small tree into the large tree at appropriate level\n            this._insert(node, this.data.height - node.height - 1, true);\n        }\n\n        return this;\n    }\n\n    insert(item) {\n        if (item) this._insert(item, this.data.height - 1);\n        return this;\n    }\n\n    clear() {\n        this.data = createNode([]);\n        return this;\n    }\n\n    remove(item, equalsFn) {\n        if (!item) return this;\n\n        let node = this.data;\n        const bbox = this.toBBox(item);\n        const path = [];\n        const indexes = [];\n        let i, parent, goingUp;\n\n        // depth-first iterative tree traversal\n        while (node || path.length) {\n\n            if (!node) { // go up\n                node = path.pop();\n                parent = path[path.length - 1];\n                i = indexes.pop();\n                goingUp = true;\n            }\n\n            if (node.leaf) { // check current node\n                const index = findItem(item, node.children, equalsFn);\n\n                if (index !== -1) {\n                    // item found, remove the item and condense tree upwards\n                    node.children.splice(index, 1);\n                    path.push(node);\n                    this._condense(path);\n                    return this;\n                }\n            }\n\n            if (!goingUp && !node.leaf && contains(node, bbox)) { // go down\n                path.push(node);\n                indexes.push(i);\n                i = 0;\n                parent = node;\n                node = node.children[0];\n\n            } else if (parent) { // go right\n                i++;\n                node = parent.children[i];\n                goingUp = false;\n\n            } else node = null; // nothing found\n        }\n\n        return this;\n    }\n\n    toBBox(item) { return item; }\n\n    compareMinX(a, b) { return a.minX - b.minX; }\n    compareMinY(a, b) { return a.minY - b.minY; }\n\n    toJSON() { return this.data; }\n\n    fromJSON(data) {\n        this.data = data;\n        return this;\n    }\n\n    _all(node, result) {\n        const nodesToSearch = [];\n        while (node) {\n            if (node.leaf) result.push(...node.children);\n            else nodesToSearch.push(...node.children);\n\n            node = nodesToSearch.pop();\n        }\n        return result;\n    }\n\n    _build(items, left, right, height) {\n\n        const N = right - left + 1;\n        let M = this._maxEntries;\n        let node;\n\n        if (N <= M) {\n            // reached leaf level; return leaf\n            node = createNode(items.slice(left, right + 1));\n            calcBBox(node, this.toBBox);\n            return node;\n        }\n\n        if (!height) {\n            // target height of the bulk-loaded tree\n            height = Math.ceil(Math.log(N) / Math.log(M));\n\n            // target number of root entries to maximize storage utilization\n            M = Math.ceil(N / Math.pow(M, height - 1));\n        }\n\n        node = createNode([]);\n        node.leaf = false;\n        node.height = height;\n\n        // split the items into M mostly square tiles\n\n        const N2 = Math.ceil(N / M);\n        const N1 = N2 * Math.ceil(Math.sqrt(M));\n\n        multiSelect(items, left, right, N1, this.compareMinX);\n\n        for (let i = left; i <= right; i += N1) {\n\n            const right2 = Math.min(i + N1 - 1, right);\n\n            multiSelect(items, i, right2, N2, this.compareMinY);\n\n            for (let j = i; j <= right2; j += N2) {\n\n                const right3 = Math.min(j + N2 - 1, right2);\n\n                // pack each entry recursively\n                node.children.push(this._build(items, j, right3, height - 1));\n            }\n        }\n\n        calcBBox(node, this.toBBox);\n\n        return node;\n    }\n\n    _chooseSubtree(bbox, node, level, path) {\n        while (true) {\n            path.push(node);\n\n            if (node.leaf || path.length - 1 === level) break;\n\n            let minArea = Infinity;\n            let minEnlargement = Infinity;\n            let targetNode;\n\n            for (let i = 0; i < node.children.length; i++) {\n                const child = node.children[i];\n                const area = bboxArea(child);\n                const enlargement = enlargedArea(bbox, child) - area;\n\n                // choose entry with the least area enlargement\n                if (enlargement < minEnlargement) {\n                    minEnlargement = enlargement;\n                    minArea = area < minArea ? area : minArea;\n                    targetNode = child;\n\n                } else if (enlargement === minEnlargement) {\n                    // otherwise choose one with the smallest area\n                    if (area < minArea) {\n                        minArea = area;\n                        targetNode = child;\n                    }\n                }\n            }\n\n            node = targetNode || node.children[0];\n        }\n\n        return node;\n    }\n\n    _insert(item, level, isNode) {\n        const bbox = isNode ? item : this.toBBox(item);\n        const insertPath = [];\n\n        // find the best node for accommodating the item, saving all nodes along the path too\n        const node = this._chooseSubtree(bbox, this.data, level, insertPath);\n\n        // put the item into the node\n        node.children.push(item);\n        extend(node, bbox);\n\n        // split on node overflow; propagate upwards if necessary\n        while (level >= 0) {\n            if (insertPath[level].children.length > this._maxEntries) {\n                this._split(insertPath, level);\n                level--;\n            } else break;\n        }\n\n        // adjust bboxes along the insertion path\n        this._adjustParentBBoxes(bbox, insertPath, level);\n    }\n\n    // split overflowed node into two\n    _split(insertPath, level) {\n        const node = insertPath[level];\n        const M = node.children.length;\n        const m = this._minEntries;\n\n        this._chooseSplitAxis(node, m, M);\n\n        const splitIndex = this._chooseSplitIndex(node, m, M);\n\n        const newNode = createNode(node.children.splice(splitIndex, node.children.length - splitIndex));\n        newNode.height = node.height;\n        newNode.leaf = node.leaf;\n\n        calcBBox(node, this.toBBox);\n        calcBBox(newNode, this.toBBox);\n\n        if (level) insertPath[level - 1].children.push(newNode);\n        else this._splitRoot(node, newNode);\n    }\n\n    _splitRoot(node, newNode) {\n        // split root node\n        this.data = createNode([node, newNode]);\n        this.data.height = node.height + 1;\n        this.data.leaf = false;\n        calcBBox(this.data, this.toBBox);\n    }\n\n    _chooseSplitIndex(node, m, M) {\n        let index;\n        let minOverlap = Infinity;\n        let minArea = Infinity;\n\n        for (let i = m; i <= M - m; i++) {\n            const bbox1 = distBBox(node, 0, i, this.toBBox);\n            const bbox2 = distBBox(node, i, M, this.toBBox);\n\n            const overlap = intersectionArea(bbox1, bbox2);\n            const area = bboxArea(bbox1) + bboxArea(bbox2);\n\n            // choose distribution with minimum overlap\n            if (overlap < minOverlap) {\n                minOverlap = overlap;\n                index = i;\n\n                minArea = area < minArea ? area : minArea;\n\n            } else if (overlap === minOverlap) {\n                // otherwise choose distribution with minimum area\n                if (area < minArea) {\n                    minArea = area;\n                    index = i;\n                }\n            }\n        }\n\n        return index || M - m;\n    }\n\n    // sorts node children by the best axis for split\n    _chooseSplitAxis(node, m, M) {\n        const compareMinX = node.leaf ? this.compareMinX : compareNodeMinX;\n        const compareMinY = node.leaf ? this.compareMinY : compareNodeMinY;\n        const xMargin = this._allDistMargin(node, m, M, compareMinX);\n        const yMargin = this._allDistMargin(node, m, M, compareMinY);\n\n        // if total distributions margin value is minimal for x, sort by minX,\n        // otherwise it's already sorted by minY\n        if (xMargin < yMargin) node.children.sort(compareMinX);\n    }\n\n    // total margin of all possible split distributions where each node is at least m full\n    _allDistMargin(node, m, M, compare) {\n        node.children.sort(compare);\n\n        const toBBox = this.toBBox;\n        const leftBBox = distBBox(node, 0, m, toBBox);\n        const rightBBox = distBBox(node, M - m, M, toBBox);\n        let margin = bboxMargin(leftBBox) + bboxMargin(rightBBox);\n\n        for (let i = m; i < M - m; i++) {\n            const child = node.children[i];\n            extend(leftBBox, node.leaf ? toBBox(child) : child);\n            margin += bboxMargin(leftBBox);\n        }\n\n        for (let i = M - m - 1; i >= m; i--) {\n            const child = node.children[i];\n            extend(rightBBox, node.leaf ? toBBox(child) : child);\n            margin += bboxMargin(rightBBox);\n        }\n\n        return margin;\n    }\n\n    _adjustParentBBoxes(bbox, path, level) {\n        // adjust bboxes along the given tree path\n        for (let i = level; i >= 0; i--) {\n            extend(path[i], bbox);\n        }\n    }\n\n    _condense(path) {\n        // go through the path, removing empty nodes and updating bboxes\n        for (let i = path.length - 1, siblings; i >= 0; i--) {\n            if (path[i].children.length === 0) {\n                if (i > 0) {\n                    siblings = path[i - 1].children;\n                    siblings.splice(siblings.indexOf(path[i]), 1);\n\n                } else this.clear();\n\n            } else calcBBox(path[i], this.toBBox);\n        }\n    }\n}\n\nfunction findItem(item, items, equalsFn) {\n    if (!equalsFn) return items.indexOf(item);\n\n    for (let i = 0; i < items.length; i++) {\n        if (equalsFn(item, items[i])) return i;\n    }\n    return -1;\n}\n\n// calculate node's bbox from bboxes of its children\nfunction calcBBox(node, toBBox) {\n    distBBox(node, 0, node.children.length, toBBox, node);\n}\n\n// min bounding rectangle of node children from k to p-1\nfunction distBBox(node, k, p, toBBox, destNode) {\n    if (!destNode) destNode = createNode(null);\n    destNode.minX = Infinity;\n    destNode.minY = Infinity;\n    destNode.maxX = -Infinity;\n    destNode.maxY = -Infinity;\n\n    for (let i = k; i < p; i++) {\n        const child = node.children[i];\n        extend(destNode, node.leaf ? toBBox(child) : child);\n    }\n\n    return destNode;\n}\n\nfunction extend(a, b) {\n    a.minX = Math.min(a.minX, b.minX);\n    a.minY = Math.min(a.minY, b.minY);\n    a.maxX = Math.max(a.maxX, b.maxX);\n    a.maxY = Math.max(a.maxY, b.maxY);\n    return a;\n}\n\nfunction compareNodeMinX(a, b) { return a.minX - b.minX; }\nfunction compareNodeMinY(a, b) { return a.minY - b.minY; }\n\nfunction bboxArea(a)   { return (a.maxX - a.minX) * (a.maxY - a.minY); }\nfunction bboxMargin(a) { return (a.maxX - a.minX) + (a.maxY - a.minY); }\n\nfunction enlargedArea(a, b) {\n    return (Math.max(b.maxX, a.maxX) - Math.min(b.minX, a.minX)) *\n           (Math.max(b.maxY, a.maxY) - Math.min(b.minY, a.minY));\n}\n\nfunction intersectionArea(a, b) {\n    const minX = Math.max(a.minX, b.minX);\n    const minY = Math.max(a.minY, b.minY);\n    const maxX = Math.min(a.maxX, b.maxX);\n    const maxY = Math.min(a.maxY, b.maxY);\n\n    return Math.max(0, maxX - minX) *\n           Math.max(0, maxY - minY);\n}\n\nfunction contains(a, b) {\n    return a.minX <= b.minX &&\n           a.minY <= b.minY &&\n           b.maxX <= a.maxX &&\n           b.maxY <= a.maxY;\n}\n\nfunction intersects(a, b) {\n    return b.minX <= a.maxX &&\n           b.minY <= a.maxY &&\n           b.maxX >= a.minX &&\n           b.maxY >= a.minY;\n}\n\nfunction createNode(children) {\n    return {\n        children,\n        height: 1,\n        leaf: true,\n        minX: Infinity,\n        minY: Infinity,\n        maxX: -Infinity,\n        maxY: -Infinity\n    };\n}\n\n// sort an array so that items come in groups of n unsorted items, with groups sorted between each other;\n// combines selection algorithm with binary divide & conquer approach\n\nfunction multiSelect(arr, left, right, n, compare) {\n    const stack = [left, right];\n\n    while (stack.length) {\n        right = stack.pop();\n        left = stack.pop();\n\n        if (right - left <= n) continue;\n\n        const mid = left + Math.ceil((right - left) / n / 2) * n;\n        quickselect(arr, mid, left, right, compare);\n\n        stack.push(left, mid, mid, right);\n    }\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @module helpers\n */\n/**\n * Earth Radius used with the Harvesine formula and approximates using a spherical (non-ellipsoid) Earth.\n *\n * @memberof helpers\n * @type {number}\n */\nexports.earthRadius = 6371008.8;\n/**\n * Unit of measurement factors using a spherical (non-ellipsoid) earth radius.\n *\n * @memberof helpers\n * @type {Object}\n */\nexports.factors = {\n    centimeters: exports.earthRadius * 100,\n    centimetres: exports.earthRadius * 100,\n    degrees: exports.earthRadius / 111325,\n    feet: exports.earthRadius * 3.28084,\n    inches: exports.earthRadius * 39.37,\n    kilometers: exports.earthRadius / 1000,\n    kilometres: exports.earthRadius / 1000,\n    meters: exports.earthRadius,\n    metres: exports.earthRadius,\n    miles: exports.earthRadius / 1609.344,\n    millimeters: exports.earthRadius * 1000,\n    millimetres: exports.earthRadius * 1000,\n    nauticalmiles: exports.earthRadius / 1852,\n    radians: 1,\n    yards: exports.earthRadius * 1.0936,\n};\n/**\n * Units of measurement factors based on 1 meter.\n *\n * @memberof helpers\n * @type {Object}\n */\nexports.unitsFactors = {\n    centimeters: 100,\n    centimetres: 100,\n    degrees: 1 / 111325,\n    feet: 3.28084,\n    inches: 39.37,\n    kilometers: 1 / 1000,\n    kilometres: 1 / 1000,\n    meters: 1,\n    metres: 1,\n    miles: 1 / 1609.344,\n    millimeters: 1000,\n    millimetres: 1000,\n    nauticalmiles: 1 / 1852,\n    radians: 1 / exports.earthRadius,\n    yards: 1.0936133,\n};\n/**\n * Area of measurement factors based on 1 square meter.\n *\n * @memberof helpers\n * @type {Object}\n */\nexports.areaFactors = {\n    acres: 0.000247105,\n    centimeters: 10000,\n    centimetres: 10000,\n    feet: 10.763910417,\n    hectares: 0.0001,\n    inches: 1550.003100006,\n    kilometers: 0.000001,\n    kilometres: 0.000001,\n    meters: 1,\n    metres: 1,\n    miles: 3.86e-7,\n    millimeters: 1000000,\n    millimetres: 1000000,\n    yards: 1.195990046,\n};\n/**\n * Wraps a GeoJSON {@link Geometry} in a GeoJSON {@link Feature}.\n *\n * @name feature\n * @param {Geometry} geometry input geometry\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature} a GeoJSON Feature\n * @example\n * var geometry = {\n *   \"type\": \"Point\",\n *   \"coordinates\": [110, 50]\n * };\n *\n * var feature = turf.feature(geometry);\n *\n * //=feature\n */\nfunction feature(geom, properties, options) {\n    if (options === void 0) { options = {}; }\n    var feat = { type: \"Feature\" };\n    if (options.id === 0 || options.id) {\n        feat.id = options.id;\n    }\n    if (options.bbox) {\n        feat.bbox = options.bbox;\n    }\n    feat.properties = properties || {};\n    feat.geometry = geom;\n    return feat;\n}\nexports.feature = feature;\n/**\n * Creates a GeoJSON {@link Geometry} from a Geometry string type & coordinates.\n * For GeometryCollection type use `helpers.geometryCollection`\n *\n * @name geometry\n * @param {string} type Geometry Type\n * @param {Array<any>} coordinates Coordinates\n * @param {Object} [options={}] Optional Parameters\n * @returns {Geometry} a GeoJSON Geometry\n * @example\n * var type = \"Point\";\n * var coordinates = [110, 50];\n * var geometry = turf.geometry(type, coordinates);\n * // => geometry\n */\nfunction geometry(type, coordinates, _options) {\n    if (_options === void 0) { _options = {}; }\n    switch (type) {\n        case \"Point\":\n            return point(coordinates).geometry;\n        case \"LineString\":\n            return lineString(coordinates).geometry;\n        case \"Polygon\":\n            return polygon(coordinates).geometry;\n        case \"MultiPoint\":\n            return multiPoint(coordinates).geometry;\n        case \"MultiLineString\":\n            return multiLineString(coordinates).geometry;\n        case \"MultiPolygon\":\n            return multiPolygon(coordinates).geometry;\n        default:\n            throw new Error(type + \" is invalid\");\n    }\n}\nexports.geometry = geometry;\n/**\n * Creates a {@link Point} {@link Feature} from a Position.\n *\n * @name point\n * @param {Array<number>} coordinates longitude, latitude position (each in decimal degrees)\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Point>} a Point feature\n * @example\n * var point = turf.point([-75.343, 39.984]);\n *\n * //=point\n */\nfunction point(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    if (!coordinates) {\n        throw new Error(\"coordinates is required\");\n    }\n    if (!Array.isArray(coordinates)) {\n        throw new Error(\"coordinates must be an Array\");\n    }\n    if (coordinates.length < 2) {\n        throw new Error(\"coordinates must be at least 2 numbers long\");\n    }\n    if (!isNumber(coordinates[0]) || !isNumber(coordinates[1])) {\n        throw new Error(\"coordinates must contain numbers\");\n    }\n    var geom = {\n        type: \"Point\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.point = point;\n/**\n * Creates a {@link Point} {@link FeatureCollection} from an Array of Point coordinates.\n *\n * @name points\n * @param {Array<Array<number>>} coordinates an array of Points\n * @param {Object} [properties={}] Translate these properties to each Feature\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\n * associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Point>} Point Feature\n * @example\n * var points = turf.points([\n *   [-75, 39],\n *   [-80, 45],\n *   [-78, 50]\n * ]);\n *\n * //=points\n */\nfunction points(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return point(coords, properties);\n    }), options);\n}\nexports.points = points;\n/**\n * Creates a {@link Polygon} {@link Feature} from an Array of LinearRings.\n *\n * @name polygon\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Polygon>} Polygon Feature\n * @example\n * var polygon = turf.polygon([[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]], { name: 'poly1' });\n *\n * //=polygon\n */\nfunction polygon(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    for (var _i = 0, coordinates_1 = coordinates; _i < coordinates_1.length; _i++) {\n        var ring = coordinates_1[_i];\n        if (ring.length < 4) {\n            throw new Error(\"Each LinearRing of a Polygon must have 4 or more Positions.\");\n        }\n        for (var j = 0; j < ring[ring.length - 1].length; j++) {\n            // Check if first point of Polygon contains two numbers\n            if (ring[ring.length - 1][j] !== ring[0][j]) {\n                throw new Error(\"First and last Position are not equivalent.\");\n            }\n        }\n    }\n    var geom = {\n        type: \"Polygon\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.polygon = polygon;\n/**\n * Creates a {@link Polygon} {@link FeatureCollection} from an Array of Polygon coordinates.\n *\n * @name polygons\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygon coordinates\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Polygon>} Polygon FeatureCollection\n * @example\n * var polygons = turf.polygons([\n *   [[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]],\n *   [[[-15, 42], [-14, 46], [-12, 41], [-17, 44], [-15, 42]]],\n * ]);\n *\n * //=polygons\n */\nfunction polygons(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return polygon(coords, properties);\n    }), options);\n}\nexports.polygons = polygons;\n/**\n * Creates a {@link LineString} {@link Feature} from an Array of Positions.\n *\n * @name lineString\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<LineString>} LineString Feature\n * @example\n * var linestring1 = turf.lineString([[-24, 63], [-23, 60], [-25, 65], [-20, 69]], {name: 'line 1'});\n * var linestring2 = turf.lineString([[-14, 43], [-13, 40], [-15, 45], [-10, 49]], {name: 'line 2'});\n *\n * //=linestring1\n * //=linestring2\n */\nfunction lineString(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    if (coordinates.length < 2) {\n        throw new Error(\"coordinates must be an array of two or more positions\");\n    }\n    var geom = {\n        type: \"LineString\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.lineString = lineString;\n/**\n * Creates a {@link LineString} {@link FeatureCollection} from an Array of LineString coordinates.\n *\n * @name lineStrings\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\n * associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<LineString>} LineString FeatureCollection\n * @example\n * var linestrings = turf.lineStrings([\n *   [[-24, 63], [-23, 60], [-25, 65], [-20, 69]],\n *   [[-14, 43], [-13, 40], [-15, 45], [-10, 49]]\n * ]);\n *\n * //=linestrings\n */\nfunction lineStrings(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return lineString(coords, properties);\n    }), options);\n}\nexports.lineStrings = lineStrings;\n/**\n * Takes one or more {@link Feature|Features} and creates a {@link FeatureCollection}.\n *\n * @name featureCollection\n * @param {Feature[]} features input features\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {FeatureCollection} FeatureCollection of Features\n * @example\n * var locationA = turf.point([-75.343, 39.984], {name: 'Location A'});\n * var locationB = turf.point([-75.833, 39.284], {name: 'Location B'});\n * var locationC = turf.point([-75.534, 39.123], {name: 'Location C'});\n *\n * var collection = turf.featureCollection([\n *   locationA,\n *   locationB,\n *   locationC\n * ]);\n *\n * //=collection\n */\nfunction featureCollection(features, options) {\n    if (options === void 0) { options = {}; }\n    var fc = { type: \"FeatureCollection\" };\n    if (options.id) {\n        fc.id = options.id;\n    }\n    if (options.bbox) {\n        fc.bbox = options.bbox;\n    }\n    fc.features = features;\n    return fc;\n}\nexports.featureCollection = featureCollection;\n/**\n * Creates a {@link Feature<MultiLineString>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiLineString\n * @param {Array<Array<Array<number>>>} coordinates an array of LineStrings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiLineString>} a MultiLineString feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiLine = turf.multiLineString([[[0,0],[10,10]]]);\n *\n * //=multiLine\n */\nfunction multiLineString(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiLineString\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.multiLineString = multiLineString;\n/**\n * Creates a {@link Feature<MultiPoint>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPoint\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPoint>} a MultiPoint feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPt = turf.multiPoint([[0,0],[10,10]]);\n *\n * //=multiPt\n */\nfunction multiPoint(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiPoint\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.multiPoint = multiPoint;\n/**\n * Creates a {@link Feature<MultiPolygon>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPolygon\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygons\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPolygon>} a multipolygon feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPoly = turf.multiPolygon([[[[0,0],[0,10],[10,10],[10,0],[0,0]]]]);\n *\n * //=multiPoly\n *\n */\nfunction multiPolygon(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiPolygon\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.multiPolygon = multiPolygon;\n/**\n * Creates a {@link Feature<GeometryCollection>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name geometryCollection\n * @param {Array<Geometry>} geometries an array of GeoJSON Geometries\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<GeometryCollection>} a GeoJSON GeometryCollection Feature\n * @example\n * var pt = turf.geometry(\"Point\", [100, 0]);\n * var line = turf.geometry(\"LineString\", [[101, 0], [102, 1]]);\n * var collection = turf.geometryCollection([pt, line]);\n *\n * // => collection\n */\nfunction geometryCollection(geometries, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"GeometryCollection\",\n        geometries: geometries,\n    };\n    return feature(geom, properties, options);\n}\nexports.geometryCollection = geometryCollection;\n/**\n * Round number to precision\n *\n * @param {number} num Number\n * @param {number} [precision=0] Precision\n * @returns {number} rounded number\n * @example\n * turf.round(120.4321)\n * //=120\n *\n * turf.round(120.4321, 2)\n * //=120.43\n */\nfunction round(num, precision) {\n    if (precision === void 0) { precision = 0; }\n    if (precision && !(precision >= 0)) {\n        throw new Error(\"precision must be a positive number\");\n    }\n    var multiplier = Math.pow(10, precision || 0);\n    return Math.round(num * multiplier) / multiplier;\n}\nexports.round = round;\n/**\n * Convert a distance measurement (assuming a spherical Earth) from radians to a more friendly unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name radiansToLength\n * @param {number} radians in radians across the sphere\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} distance\n */\nfunction radiansToLength(radians, units) {\n    if (units === void 0) { units = \"kilometers\"; }\n    var factor = exports.factors[units];\n    if (!factor) {\n        throw new Error(units + \" units is invalid\");\n    }\n    return radians * factor;\n}\nexports.radiansToLength = radiansToLength;\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into radians\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name lengthToRadians\n * @param {number} distance in real units\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} radians\n */\nfunction lengthToRadians(distance, units) {\n    if (units === void 0) { units = \"kilometers\"; }\n    var factor = exports.factors[units];\n    if (!factor) {\n        throw new Error(units + \" units is invalid\");\n    }\n    return distance / factor;\n}\nexports.lengthToRadians = lengthToRadians;\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into degrees\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, centimeters, kilometres, feet\n *\n * @name lengthToDegrees\n * @param {number} distance in real units\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} degrees\n */\nfunction lengthToDegrees(distance, units) {\n    return radiansToDegrees(lengthToRadians(distance, units));\n}\nexports.lengthToDegrees = lengthToDegrees;\n/**\n * Converts any bearing angle from the north line direction (positive clockwise)\n * and returns an angle between 0-360 degrees (positive clockwise), 0 being the north line\n *\n * @name bearingToAzimuth\n * @param {number} bearing angle, between -180 and +180 degrees\n * @returns {number} angle between 0 and 360 degrees\n */\nfunction bearingToAzimuth(bearing) {\n    var angle = bearing % 360;\n    if (angle < 0) {\n        angle += 360;\n    }\n    return angle;\n}\nexports.bearingToAzimuth = bearingToAzimuth;\n/**\n * Converts an angle in radians to degrees\n *\n * @name radiansToDegrees\n * @param {number} radians angle in radians\n * @returns {number} degrees between 0 and 360 degrees\n */\nfunction radiansToDegrees(radians) {\n    var degrees = radians % (2 * Math.PI);\n    return (degrees * 180) / Math.PI;\n}\nexports.radiansToDegrees = radiansToDegrees;\n/**\n * Converts an angle in degrees to radians\n *\n * @name degreesToRadians\n * @param {number} degrees angle between 0 and 360 degrees\n * @returns {number} angle in radians\n */\nfunction degreesToRadians(degrees) {\n    var radians = degrees % 360;\n    return (radians * Math.PI) / 180;\n}\nexports.degreesToRadians = degreesToRadians;\n/**\n * Converts a length to the requested unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @param {number} length to be converted\n * @param {Units} [originalUnit=\"kilometers\"] of the length\n * @param {Units} [finalUnit=\"kilometers\"] returned unit\n * @returns {number} the converted length\n */\nfunction convertLength(length, originalUnit, finalUnit) {\n    if (originalUnit === void 0) { originalUnit = \"kilometers\"; }\n    if (finalUnit === void 0) { finalUnit = \"kilometers\"; }\n    if (!(length >= 0)) {\n        throw new Error(\"length must be a positive number\");\n    }\n    return radiansToLength(lengthToRadians(length, originalUnit), finalUnit);\n}\nexports.convertLength = convertLength;\n/**\n * Converts a area to the requested unit.\n * Valid units: kilometers, kilometres, meters, metres, centimetres, millimeters, acres, miles, yards, feet, inches, hectares\n * @param {number} area to be converted\n * @param {Units} [originalUnit=\"meters\"] of the distance\n * @param {Units} [finalUnit=\"kilometers\"] returned unit\n * @returns {number} the converted area\n */\nfunction convertArea(area, originalUnit, finalUnit) {\n    if (originalUnit === void 0) { originalUnit = \"meters\"; }\n    if (finalUnit === void 0) { finalUnit = \"kilometers\"; }\n    if (!(area >= 0)) {\n        throw new Error(\"area must be a positive number\");\n    }\n    var startFactor = exports.areaFactors[originalUnit];\n    if (!startFactor) {\n        throw new Error(\"invalid original units\");\n    }\n    var finalFactor = exports.areaFactors[finalUnit];\n    if (!finalFactor) {\n        throw new Error(\"invalid final units\");\n    }\n    return (area / startFactor) * finalFactor;\n}\nexports.convertArea = convertArea;\n/**\n * isNumber\n *\n * @param {*} num Number to validate\n * @returns {boolean} true/false\n * @example\n * turf.isNumber(123)\n * //=true\n * turf.isNumber('foo')\n * //=false\n */\nfunction isNumber(num) {\n    return !isNaN(num) && num !== null && !Array.isArray(num);\n}\nexports.isNumber = isNumber;\n/**\n * isObject\n *\n * @param {*} input variable to validate\n * @returns {boolean} true/false\n * @example\n * turf.isObject({elevation: 10})\n * //=true\n * turf.isObject('foo')\n * //=false\n */\nfunction isObject(input) {\n    return !!input && input.constructor === Object;\n}\nexports.isObject = isObject;\n/**\n * Validate BBox\n *\n * @private\n * @param {Array<number>} bbox BBox to validate\n * @returns {void}\n * @throws Error if BBox is not valid\n * @example\n * validateBBox([-180, -40, 110, 50])\n * //=OK\n * validateBBox([-180, -40])\n * //=Error\n * validateBBox('Foo')\n * //=Error\n * validateBBox(5)\n * //=Error\n * validateBBox(null)\n * //=Error\n * validateBBox(undefined)\n * //=Error\n */\nfunction validateBBox(bbox) {\n    if (!bbox) {\n        throw new Error(\"bbox is required\");\n    }\n    if (!Array.isArray(bbox)) {\n        throw new Error(\"bbox must be an Array\");\n    }\n    if (bbox.length !== 4 && bbox.length !== 6) {\n        throw new Error(\"bbox must be an Array of 4 or 6 numbers\");\n    }\n    bbox.forEach(function (num) {\n        if (!isNumber(num)) {\n            throw new Error(\"bbox must only contain numbers\");\n        }\n    });\n}\nexports.validateBBox = validateBBox;\n/**\n * Validate Id\n *\n * @private\n * @param {string|number} id Id to validate\n * @returns {void}\n * @throws Error if Id is not valid\n * @example\n * validateId([-180, -40, 110, 50])\n * //=Error\n * validateId([-180, -40])\n * //=Error\n * validateId('Foo')\n * //=OK\n * validateId(5)\n * //=OK\n * validateId(null)\n * //=Error\n * validateId(undefined)\n * //=Error\n */\nfunction validateId(id) {\n    if (!id) {\n        throw new Error(\"id is required\");\n    }\n    if ([\"string\", \"number\"].indexOf(typeof id) === -1) {\n        throw new Error(\"id must be a number or a string\");\n    }\n}\nexports.validateId = validateId;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar helpers = require('@turf/helpers');\n\n/**\n * Callback for coordEach\n *\n * @callback coordEachCallback\n * @param {Array<number>} currentCoord The current coordinate being processed.\n * @param {number} coordIndex The current index of the coordinate being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n */\n\n/**\n * Iterate over coordinates in any GeoJSON object, similar to Array.forEach()\n *\n * @name coordEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentCoord, coordIndex, featureIndex, multiFeatureIndex)\n * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.coordEach(features, function (currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=currentCoord\n *   //=coordIndex\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n * });\n */\nfunction coordEach(geojson, callback, excludeWrapCoord) {\n  // Handles null Geometry -- Skips this GeoJSON\n  if (geojson === null) return;\n  var j,\n    k,\n    l,\n    geometry,\n    stopG,\n    coords,\n    geometryMaybeCollection,\n    wrapShrink = 0,\n    coordIndex = 0,\n    isGeometryCollection,\n    type = geojson.type,\n    isFeatureCollection = type === \"FeatureCollection\",\n    isFeature = type === \"Feature\",\n    stop = isFeatureCollection ? geojson.features.length : 1;\n\n  // This logic may look a little weird. The reason why it is that way\n  // is because it's trying to be fast. GeoJSON supports multiple kinds\n  // of objects at its root: FeatureCollection, Features, Geometries.\n  // This function has the responsibility of handling all of them, and that\n  // means that some of the `for` loops you see below actually just don't apply\n  // to certain inputs. For instance, if you give this just a\n  // Point geometry, then both loops are short-circuited and all we do\n  // is gradually rename the input until it's called 'geometry'.\n  //\n  // This also aims to allocate as few resources as possible: just a\n  // few numbers and booleans, rather than any temporary arrays as would\n  // be required with the normalization approach.\n  for (var featureIndex = 0; featureIndex < stop; featureIndex++) {\n    geometryMaybeCollection = isFeatureCollection\n      ? geojson.features[featureIndex].geometry\n      : isFeature\n      ? geojson.geometry\n      : geojson;\n    isGeometryCollection = geometryMaybeCollection\n      ? geometryMaybeCollection.type === \"GeometryCollection\"\n      : false;\n    stopG = isGeometryCollection\n      ? geometryMaybeCollection.geometries.length\n      : 1;\n\n    for (var geomIndex = 0; geomIndex < stopG; geomIndex++) {\n      var multiFeatureIndex = 0;\n      var geometryIndex = 0;\n      geometry = isGeometryCollection\n        ? geometryMaybeCollection.geometries[geomIndex]\n        : geometryMaybeCollection;\n\n      // Handles null Geometry -- Skips this geometry\n      if (geometry === null) continue;\n      coords = geometry.coordinates;\n      var geomType = geometry.type;\n\n      wrapShrink =\n        excludeWrapCoord &&\n        (geomType === \"Polygon\" || geomType === \"MultiPolygon\")\n          ? 1\n          : 0;\n\n      switch (geomType) {\n        case null:\n          break;\n        case \"Point\":\n          if (\n            callback(\n              coords,\n              coordIndex,\n              featureIndex,\n              multiFeatureIndex,\n              geometryIndex\n            ) === false\n          )\n            return false;\n          coordIndex++;\n          multiFeatureIndex++;\n          break;\n        case \"LineString\":\n        case \"MultiPoint\":\n          for (j = 0; j < coords.length; j++) {\n            if (\n              callback(\n                coords[j],\n                coordIndex,\n                featureIndex,\n                multiFeatureIndex,\n                geometryIndex\n              ) === false\n            )\n              return false;\n            coordIndex++;\n            if (geomType === \"MultiPoint\") multiFeatureIndex++;\n          }\n          if (geomType === \"LineString\") multiFeatureIndex++;\n          break;\n        case \"Polygon\":\n        case \"MultiLineString\":\n          for (j = 0; j < coords.length; j++) {\n            for (k = 0; k < coords[j].length - wrapShrink; k++) {\n              if (\n                callback(\n                  coords[j][k],\n                  coordIndex,\n                  featureIndex,\n                  multiFeatureIndex,\n                  geometryIndex\n                ) === false\n              )\n                return false;\n              coordIndex++;\n            }\n            if (geomType === \"MultiLineString\") multiFeatureIndex++;\n            if (geomType === \"Polygon\") geometryIndex++;\n          }\n          if (geomType === \"Polygon\") multiFeatureIndex++;\n          break;\n        case \"MultiPolygon\":\n          for (j = 0; j < coords.length; j++) {\n            geometryIndex = 0;\n            for (k = 0; k < coords[j].length; k++) {\n              for (l = 0; l < coords[j][k].length - wrapShrink; l++) {\n                if (\n                  callback(\n                    coords[j][k][l],\n                    coordIndex,\n                    featureIndex,\n                    multiFeatureIndex,\n                    geometryIndex\n                  ) === false\n                )\n                  return false;\n                coordIndex++;\n              }\n              geometryIndex++;\n            }\n            multiFeatureIndex++;\n          }\n          break;\n        case \"GeometryCollection\":\n          for (j = 0; j < geometry.geometries.length; j++)\n            if (\n              coordEach(geometry.geometries[j], callback, excludeWrapCoord) ===\n              false\n            )\n              return false;\n          break;\n        default:\n          throw new Error(\"Unknown Geometry Type\");\n      }\n    }\n  }\n}\n\n/**\n * Callback for coordReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback coordReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Array<number>} currentCoord The current coordinate being processed.\n * @param {number} coordIndex The current index of the coordinate being processed.\n * Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n */\n\n/**\n * Reduce coordinates in any GeoJSON object, similar to Array.reduce()\n *\n * @name coordReduce\n * @param {FeatureCollection|Geometry|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentCoord, coordIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.coordReduce(features, function (previousValue, currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=previousValue\n *   //=currentCoord\n *   //=coordIndex\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   return currentCoord;\n * });\n */\nfunction coordReduce(geojson, callback, initialValue, excludeWrapCoord) {\n  var previousValue = initialValue;\n  coordEach(\n    geojson,\n    function (\n      currentCoord,\n      coordIndex,\n      featureIndex,\n      multiFeatureIndex,\n      geometryIndex\n    ) {\n      if (coordIndex === 0 && initialValue === undefined)\n        previousValue = currentCoord;\n      else\n        previousValue = callback(\n          previousValue,\n          currentCoord,\n          coordIndex,\n          featureIndex,\n          multiFeatureIndex,\n          geometryIndex\n        );\n    },\n    excludeWrapCoord\n  );\n  return previousValue;\n}\n\n/**\n * Callback for propEach\n *\n * @callback propEachCallback\n * @param {Object} currentProperties The current Properties being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Iterate over properties in any GeoJSON object, similar to Array.forEach()\n *\n * @name propEach\n * @param {FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentProperties, featureIndex)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.propEach(features, function (currentProperties, featureIndex) {\n *   //=currentProperties\n *   //=featureIndex\n * });\n */\nfunction propEach(geojson, callback) {\n  var i;\n  switch (geojson.type) {\n    case \"FeatureCollection\":\n      for (i = 0; i < geojson.features.length; i++) {\n        if (callback(geojson.features[i].properties, i) === false) break;\n      }\n      break;\n    case \"Feature\":\n      callback(geojson.properties, 0);\n      break;\n  }\n}\n\n/**\n * Callback for propReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback propReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {*} currentProperties The current Properties being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Reduce properties in any GeoJSON object into a single value,\n * similar to how Array.reduce works. However, in this case we lazily run\n * the reduction, so an array of all properties is unnecessary.\n *\n * @name propReduce\n * @param {FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentProperties, featureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.propReduce(features, function (previousValue, currentProperties, featureIndex) {\n *   //=previousValue\n *   //=currentProperties\n *   //=featureIndex\n *   return currentProperties\n * });\n */\nfunction propReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  propEach(geojson, function (currentProperties, featureIndex) {\n    if (featureIndex === 0 && initialValue === undefined)\n      previousValue = currentProperties;\n    else\n      previousValue = callback(previousValue, currentProperties, featureIndex);\n  });\n  return previousValue;\n}\n\n/**\n * Callback for featureEach\n *\n * @callback featureEachCallback\n * @param {Feature<any>} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Iterate over features in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @name featureEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentFeature, featureIndex)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {foo: 'bar'}),\n *   turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.featureEach(features, function (currentFeature, featureIndex) {\n *   //=currentFeature\n *   //=featureIndex\n * });\n */\nfunction featureEach(geojson, callback) {\n  if (geojson.type === \"Feature\") {\n    callback(geojson, 0);\n  } else if (geojson.type === \"FeatureCollection\") {\n    for (var i = 0; i < geojson.features.length; i++) {\n      if (callback(geojson.features[i], i) === false) break;\n    }\n  }\n}\n\n/**\n * Callback for featureReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback featureReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Reduce features in any GeoJSON object, similar to Array.reduce().\n *\n * @name featureReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.featureReduce(features, function (previousValue, currentFeature, featureIndex) {\n *   //=previousValue\n *   //=currentFeature\n *   //=featureIndex\n *   return currentFeature\n * });\n */\nfunction featureReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  featureEach(geojson, function (currentFeature, featureIndex) {\n    if (featureIndex === 0 && initialValue === undefined)\n      previousValue = currentFeature;\n    else previousValue = callback(previousValue, currentFeature, featureIndex);\n  });\n  return previousValue;\n}\n\n/**\n * Get all coordinates from any GeoJSON object.\n *\n * @name coordAll\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @returns {Array<Array<number>>} coordinate position array\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {foo: 'bar'}),\n *   turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * var coords = turf.coordAll(features);\n * //= [[26, 37], [36, 53]]\n */\nfunction coordAll(geojson) {\n  var coords = [];\n  coordEach(geojson, function (coord) {\n    coords.push(coord);\n  });\n  return coords;\n}\n\n/**\n * Callback for geomEach\n *\n * @callback geomEachCallback\n * @param {Geometry} currentGeometry The current Geometry being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {Object} featureProperties The current Feature Properties being processed.\n * @param {Array<number>} featureBBox The current Feature BBox being processed.\n * @param {number|string} featureId The current Feature Id being processed.\n */\n\n/**\n * Iterate over each geometry in any GeoJSON object, similar to Array.forEach()\n *\n * @name geomEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.geomEach(features, function (currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n *   //=currentGeometry\n *   //=featureIndex\n *   //=featureProperties\n *   //=featureBBox\n *   //=featureId\n * });\n */\nfunction geomEach(geojson, callback) {\n  var i,\n    j,\n    g,\n    geometry,\n    stopG,\n    geometryMaybeCollection,\n    isGeometryCollection,\n    featureProperties,\n    featureBBox,\n    featureId,\n    featureIndex = 0,\n    isFeatureCollection = geojson.type === \"FeatureCollection\",\n    isFeature = geojson.type === \"Feature\",\n    stop = isFeatureCollection ? geojson.features.length : 1;\n\n  // This logic may look a little weird. The reason why it is that way\n  // is because it's trying to be fast. GeoJSON supports multiple kinds\n  // of objects at its root: FeatureCollection, Features, Geometries.\n  // This function has the responsibility of handling all of them, and that\n  // means that some of the `for` loops you see below actually just don't apply\n  // to certain inputs. For instance, if you give this just a\n  // Point geometry, then both loops are short-circuited and all we do\n  // is gradually rename the input until it's called 'geometry'.\n  //\n  // This also aims to allocate as few resources as possible: just a\n  // few numbers and booleans, rather than any temporary arrays as would\n  // be required with the normalization approach.\n  for (i = 0; i < stop; i++) {\n    geometryMaybeCollection = isFeatureCollection\n      ? geojson.features[i].geometry\n      : isFeature\n      ? geojson.geometry\n      : geojson;\n    featureProperties = isFeatureCollection\n      ? geojson.features[i].properties\n      : isFeature\n      ? geojson.properties\n      : {};\n    featureBBox = isFeatureCollection\n      ? geojson.features[i].bbox\n      : isFeature\n      ? geojson.bbox\n      : undefined;\n    featureId = isFeatureCollection\n      ? geojson.features[i].id\n      : isFeature\n      ? geojson.id\n      : undefined;\n    isGeometryCollection = geometryMaybeCollection\n      ? geometryMaybeCollection.type === \"GeometryCollection\"\n      : false;\n    stopG = isGeometryCollection\n      ? geometryMaybeCollection.geometries.length\n      : 1;\n\n    for (g = 0; g < stopG; g++) {\n      geometry = isGeometryCollection\n        ? geometryMaybeCollection.geometries[g]\n        : geometryMaybeCollection;\n\n      // Handle null Geometry\n      if (geometry === null) {\n        if (\n          callback(\n            null,\n            featureIndex,\n            featureProperties,\n            featureBBox,\n            featureId\n          ) === false\n        )\n          return false;\n        continue;\n      }\n      switch (geometry.type) {\n        case \"Point\":\n        case \"LineString\":\n        case \"MultiPoint\":\n        case \"Polygon\":\n        case \"MultiLineString\":\n        case \"MultiPolygon\": {\n          if (\n            callback(\n              geometry,\n              featureIndex,\n              featureProperties,\n              featureBBox,\n              featureId\n            ) === false\n          )\n            return false;\n          break;\n        }\n        case \"GeometryCollection\": {\n          for (j = 0; j < geometry.geometries.length; j++) {\n            if (\n              callback(\n                geometry.geometries[j],\n                featureIndex,\n                featureProperties,\n                featureBBox,\n                featureId\n              ) === false\n            )\n              return false;\n          }\n          break;\n        }\n        default:\n          throw new Error(\"Unknown Geometry Type\");\n      }\n    }\n    // Only increase `featureIndex` per each feature\n    featureIndex++;\n  }\n}\n\n/**\n * Callback for geomReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback geomReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Geometry} currentGeometry The current Geometry being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {Object} featureProperties The current Feature Properties being processed.\n * @param {Array<number>} featureBBox The current Feature BBox being processed.\n * @param {number|string} featureId The current Feature Id being processed.\n */\n\n/**\n * Reduce geometry in any GeoJSON object, similar to Array.reduce().\n *\n * @name geomReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.geomReduce(features, function (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n *   //=previousValue\n *   //=currentGeometry\n *   //=featureIndex\n *   //=featureProperties\n *   //=featureBBox\n *   //=featureId\n *   return currentGeometry\n * });\n */\nfunction geomReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  geomEach(\n    geojson,\n    function (\n      currentGeometry,\n      featureIndex,\n      featureProperties,\n      featureBBox,\n      featureId\n    ) {\n      if (featureIndex === 0 && initialValue === undefined)\n        previousValue = currentGeometry;\n      else\n        previousValue = callback(\n          previousValue,\n          currentGeometry,\n          featureIndex,\n          featureProperties,\n          featureBBox,\n          featureId\n        );\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Callback for flattenEach\n *\n * @callback flattenEachCallback\n * @param {Feature} currentFeature The current flattened feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n */\n\n/**\n * Iterate over flattened features in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @name flattenEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentFeature, featureIndex, multiFeatureIndex)\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n * ]);\n *\n * turf.flattenEach(features, function (currentFeature, featureIndex, multiFeatureIndex) {\n *   //=currentFeature\n *   //=featureIndex\n *   //=multiFeatureIndex\n * });\n */\nfunction flattenEach(geojson, callback) {\n  geomEach(geojson, function (geometry, featureIndex, properties, bbox, id) {\n    // Callback for single geometry\n    var type = geometry === null ? null : geometry.type;\n    switch (type) {\n      case null:\n      case \"Point\":\n      case \"LineString\":\n      case \"Polygon\":\n        if (\n          callback(\n            helpers.feature(geometry, properties, { bbox: bbox, id: id }),\n            featureIndex,\n            0\n          ) === false\n        )\n          return false;\n        return;\n    }\n\n    var geomType;\n\n    // Callback for multi-geometry\n    switch (type) {\n      case \"MultiPoint\":\n        geomType = \"Point\";\n        break;\n      case \"MultiLineString\":\n        geomType = \"LineString\";\n        break;\n      case \"MultiPolygon\":\n        geomType = \"Polygon\";\n        break;\n    }\n\n    for (\n      var multiFeatureIndex = 0;\n      multiFeatureIndex < geometry.coordinates.length;\n      multiFeatureIndex++\n    ) {\n      var coordinate = geometry.coordinates[multiFeatureIndex];\n      var geom = {\n        type: geomType,\n        coordinates: coordinate,\n      };\n      if (\n        callback(helpers.feature(geom, properties), featureIndex, multiFeatureIndex) ===\n        false\n      )\n        return false;\n    }\n  });\n}\n\n/**\n * Callback for flattenReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback flattenReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n */\n\n/**\n * Reduce flattened features in any GeoJSON object, similar to Array.reduce().\n *\n * @name flattenReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex, multiFeatureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n * ]);\n *\n * turf.flattenReduce(features, function (previousValue, currentFeature, featureIndex, multiFeatureIndex) {\n *   //=previousValue\n *   //=currentFeature\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   return currentFeature\n * });\n */\nfunction flattenReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  flattenEach(\n    geojson,\n    function (currentFeature, featureIndex, multiFeatureIndex) {\n      if (\n        featureIndex === 0 &&\n        multiFeatureIndex === 0 &&\n        initialValue === undefined\n      )\n        previousValue = currentFeature;\n      else\n        previousValue = callback(\n          previousValue,\n          currentFeature,\n          featureIndex,\n          multiFeatureIndex\n        );\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Callback for segmentEach\n *\n * @callback segmentEachCallback\n * @param {Feature<LineString>} currentSegment The current Segment being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n * @param {number} segmentIndex The current index of the Segment being processed.\n * @returns {void}\n */\n\n/**\n * Iterate over 2-vertex line segment in any GeoJSON object, similar to Array.forEach()\n * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON\n * @param {Function} callback a method that takes (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex)\n * @returns {void}\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n *\n * // Iterate over GeoJSON by 2-vertex segments\n * turf.segmentEach(polygon, function (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n *   //=currentSegment\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   //=segmentIndex\n * });\n *\n * // Calculate the total number of segments\n * var total = 0;\n * turf.segmentEach(polygon, function () {\n *     total++;\n * });\n */\nfunction segmentEach(geojson, callback) {\n  flattenEach(geojson, function (feature, featureIndex, multiFeatureIndex) {\n    var segmentIndex = 0;\n\n    // Exclude null Geometries\n    if (!feature.geometry) return;\n    // (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n    var type = feature.geometry.type;\n    if (type === \"Point\" || type === \"MultiPoint\") return;\n\n    // Generate 2-vertex line segments\n    var previousCoords;\n    var previousFeatureIndex = 0;\n    var previousMultiIndex = 0;\n    var prevGeomIndex = 0;\n    if (\n      coordEach(\n        feature,\n        function (\n          currentCoord,\n          coordIndex,\n          featureIndexCoord,\n          multiPartIndexCoord,\n          geometryIndex\n        ) {\n          // Simulating a meta.coordReduce() since `reduce` operations cannot be stopped by returning `false`\n          if (\n            previousCoords === undefined ||\n            featureIndex > previousFeatureIndex ||\n            multiPartIndexCoord > previousMultiIndex ||\n            geometryIndex > prevGeomIndex\n          ) {\n            previousCoords = currentCoord;\n            previousFeatureIndex = featureIndex;\n            previousMultiIndex = multiPartIndexCoord;\n            prevGeomIndex = geometryIndex;\n            segmentIndex = 0;\n            return;\n          }\n          var currentSegment = helpers.lineString(\n            [previousCoords, currentCoord],\n            feature.properties\n          );\n          if (\n            callback(\n              currentSegment,\n              featureIndex,\n              multiFeatureIndex,\n              geometryIndex,\n              segmentIndex\n            ) === false\n          )\n            return false;\n          segmentIndex++;\n          previousCoords = currentCoord;\n        }\n      ) === false\n    )\n      return false;\n  });\n}\n\n/**\n * Callback for segmentReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback segmentReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature<LineString>} currentSegment The current Segment being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n * @param {number} segmentIndex The current index of the Segment being processed.\n */\n\n/**\n * Reduce 2-vertex line segment in any GeoJSON object, similar to Array.reduce()\n * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON\n * @param {Function} callback a method that takes (previousValue, currentSegment, currentIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {void}\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n *\n * // Iterate over GeoJSON by 2-vertex segments\n * turf.segmentReduce(polygon, function (previousSegment, currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n *   //= previousSegment\n *   //= currentSegment\n *   //= featureIndex\n *   //= multiFeatureIndex\n *   //= geometryIndex\n *   //= segmentIndex\n *   return currentSegment\n * });\n *\n * // Calculate the total number of segments\n * var initialValue = 0\n * var total = turf.segmentReduce(polygon, function (previousValue) {\n *     previousValue++;\n *     return previousValue;\n * }, initialValue);\n */\nfunction segmentReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  var started = false;\n  segmentEach(\n    geojson,\n    function (\n      currentSegment,\n      featureIndex,\n      multiFeatureIndex,\n      geometryIndex,\n      segmentIndex\n    ) {\n      if (started === false && initialValue === undefined)\n        previousValue = currentSegment;\n      else\n        previousValue = callback(\n          previousValue,\n          currentSegment,\n          featureIndex,\n          multiFeatureIndex,\n          geometryIndex,\n          segmentIndex\n        );\n      started = true;\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Callback for lineEach\n *\n * @callback lineEachCallback\n * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed\n * @param {number} featureIndex The current index of the Feature being processed\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed\n * @param {number} geometryIndex The current index of the Geometry being processed\n */\n\n/**\n * Iterate over line or ring coordinates in LineString, Polygon, MultiLineString, MultiPolygon Features or Geometries,\n * similar to Array.forEach.\n *\n * @name lineEach\n * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object\n * @param {Function} callback a method that takes (currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n * @example\n * var multiLine = turf.multiLineString([\n *   [[26, 37], [35, 45]],\n *   [[36, 53], [38, 50], [41, 55]]\n * ]);\n *\n * turf.lineEach(multiLine, function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=currentLine\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n * });\n */\nfunction lineEach(geojson, callback) {\n  // validation\n  if (!geojson) throw new Error(\"geojson is required\");\n\n  flattenEach(geojson, function (feature, featureIndex, multiFeatureIndex) {\n    if (feature.geometry === null) return;\n    var type = feature.geometry.type;\n    var coords = feature.geometry.coordinates;\n    switch (type) {\n      case \"LineString\":\n        if (callback(feature, featureIndex, multiFeatureIndex, 0, 0) === false)\n          return false;\n        break;\n      case \"Polygon\":\n        for (\n          var geometryIndex = 0;\n          geometryIndex < coords.length;\n          geometryIndex++\n        ) {\n          if (\n            callback(\n              helpers.lineString(coords[geometryIndex], feature.properties),\n              featureIndex,\n              multiFeatureIndex,\n              geometryIndex\n            ) === false\n          )\n            return false;\n        }\n        break;\n    }\n  });\n}\n\n/**\n * Callback for lineReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback lineReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed.\n * @param {number} featureIndex The current index of the Feature being processed\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed\n * @param {number} geometryIndex The current index of the Geometry being processed\n */\n\n/**\n * Reduce features in any GeoJSON object, similar to Array.reduce().\n *\n * @name lineReduce\n * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object\n * @param {Function} callback a method that takes (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var multiPoly = turf.multiPolygon([\n *   turf.polygon([[[12,48],[2,41],[24,38],[12,48]], [[9,44],[13,41],[13,45],[9,44]]]),\n *   turf.polygon([[[5, 5], [0, 0], [2, 2], [4, 4], [5, 5]]])\n * ]);\n *\n * turf.lineReduce(multiPoly, function (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=previousValue\n *   //=currentLine\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   return currentLine\n * });\n */\nfunction lineReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  lineEach(\n    geojson,\n    function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n      if (featureIndex === 0 && initialValue === undefined)\n        previousValue = currentLine;\n      else\n        previousValue = callback(\n          previousValue,\n          currentLine,\n          featureIndex,\n          multiFeatureIndex,\n          geometryIndex\n        );\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Finds a particular 2-vertex LineString Segment from a GeoJSON using `@turf/meta` indexes.\n *\n * Negative indexes are permitted.\n * Point & MultiPoint will always return null.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.featureIndex=0] Feature Index\n * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index\n * @param {number} [options.geometryIndex=0] Geometry Index\n * @param {number} [options.segmentIndex=0] Segment Index\n * @param {Object} [options.properties={}] Translate Properties to output LineString\n * @param {BBox} [options.bbox={}] Translate BBox to output LineString\n * @param {number|string} [options.id={}] Translate Id to output LineString\n * @returns {Feature<LineString>} 2-vertex GeoJSON Feature LineString\n * @example\n * var multiLine = turf.multiLineString([\n *     [[10, 10], [50, 30], [30, 40]],\n *     [[-10, -10], [-50, -30], [-30, -40]]\n * ]);\n *\n * // First Segment (defaults are 0)\n * turf.findSegment(multiLine);\n * // => Feature<LineString<[[10, 10], [50, 30]]>>\n *\n * // First Segment of 2nd Multi Feature\n * turf.findSegment(multiLine, {multiFeatureIndex: 1});\n * // => Feature<LineString<[[-10, -10], [-50, -30]]>>\n *\n * // Last Segment of Last Multi Feature\n * turf.findSegment(multiLine, {multiFeatureIndex: -1, segmentIndex: -1});\n * // => Feature<LineString<[[-50, -30], [-30, -40]]>>\n */\nfunction findSegment(geojson, options) {\n  // Optional Parameters\n  options = options || {};\n  if (!helpers.isObject(options)) throw new Error(\"options is invalid\");\n  var featureIndex = options.featureIndex || 0;\n  var multiFeatureIndex = options.multiFeatureIndex || 0;\n  var geometryIndex = options.geometryIndex || 0;\n  var segmentIndex = options.segmentIndex || 0;\n\n  // Find FeatureIndex\n  var properties = options.properties;\n  var geometry;\n\n  switch (geojson.type) {\n    case \"FeatureCollection\":\n      if (featureIndex < 0)\n        featureIndex = geojson.features.length + featureIndex;\n      properties = properties || geojson.features[featureIndex].properties;\n      geometry = geojson.features[featureIndex].geometry;\n      break;\n    case \"Feature\":\n      properties = properties || geojson.properties;\n      geometry = geojson.geometry;\n      break;\n    case \"Point\":\n    case \"MultiPoint\":\n      return null;\n    case \"LineString\":\n    case \"Polygon\":\n    case \"MultiLineString\":\n    case \"MultiPolygon\":\n      geometry = geojson;\n      break;\n    default:\n      throw new Error(\"geojson is invalid\");\n  }\n\n  // Find SegmentIndex\n  if (geometry === null) return null;\n  var coords = geometry.coordinates;\n  switch (geometry.type) {\n    case \"Point\":\n    case \"MultiPoint\":\n      return null;\n    case \"LineString\":\n      if (segmentIndex < 0) segmentIndex = coords.length + segmentIndex - 1;\n      return helpers.lineString(\n        [coords[segmentIndex], coords[segmentIndex + 1]],\n        properties,\n        options\n      );\n    case \"Polygon\":\n      if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;\n      if (segmentIndex < 0)\n        segmentIndex = coords[geometryIndex].length + segmentIndex - 1;\n      return helpers.lineString(\n        [\n          coords[geometryIndex][segmentIndex],\n          coords[geometryIndex][segmentIndex + 1],\n        ],\n        properties,\n        options\n      );\n    case \"MultiLineString\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (segmentIndex < 0)\n        segmentIndex = coords[multiFeatureIndex].length + segmentIndex - 1;\n      return helpers.lineString(\n        [\n          coords[multiFeatureIndex][segmentIndex],\n          coords[multiFeatureIndex][segmentIndex + 1],\n        ],\n        properties,\n        options\n      );\n    case \"MultiPolygon\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (geometryIndex < 0)\n        geometryIndex = coords[multiFeatureIndex].length + geometryIndex;\n      if (segmentIndex < 0)\n        segmentIndex =\n          coords[multiFeatureIndex][geometryIndex].length - segmentIndex - 1;\n      return helpers.lineString(\n        [\n          coords[multiFeatureIndex][geometryIndex][segmentIndex],\n          coords[multiFeatureIndex][geometryIndex][segmentIndex + 1],\n        ],\n        properties,\n        options\n      );\n  }\n  throw new Error(\"geojson is invalid\");\n}\n\n/**\n * Finds a particular Point from a GeoJSON using `@turf/meta` indexes.\n *\n * Negative indexes are permitted.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.featureIndex=0] Feature Index\n * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index\n * @param {number} [options.geometryIndex=0] Geometry Index\n * @param {number} [options.coordIndex=0] Coord Index\n * @param {Object} [options.properties={}] Translate Properties to output Point\n * @param {BBox} [options.bbox={}] Translate BBox to output Point\n * @param {number|string} [options.id={}] Translate Id to output Point\n * @returns {Feature<Point>} 2-vertex GeoJSON Feature Point\n * @example\n * var multiLine = turf.multiLineString([\n *     [[10, 10], [50, 30], [30, 40]],\n *     [[-10, -10], [-50, -30], [-30, -40]]\n * ]);\n *\n * // First Segment (defaults are 0)\n * turf.findPoint(multiLine);\n * // => Feature<Point<[10, 10]>>\n *\n * // First Segment of the 2nd Multi-Feature\n * turf.findPoint(multiLine, {multiFeatureIndex: 1});\n * // => Feature<Point<[-10, -10]>>\n *\n * // Last Segment of last Multi-Feature\n * turf.findPoint(multiLine, {multiFeatureIndex: -1, coordIndex: -1});\n * // => Feature<Point<[-30, -40]>>\n */\nfunction findPoint(geojson, options) {\n  // Optional Parameters\n  options = options || {};\n  if (!helpers.isObject(options)) throw new Error(\"options is invalid\");\n  var featureIndex = options.featureIndex || 0;\n  var multiFeatureIndex = options.multiFeatureIndex || 0;\n  var geometryIndex = options.geometryIndex || 0;\n  var coordIndex = options.coordIndex || 0;\n\n  // Find FeatureIndex\n  var properties = options.properties;\n  var geometry;\n\n  switch (geojson.type) {\n    case \"FeatureCollection\":\n      if (featureIndex < 0)\n        featureIndex = geojson.features.length + featureIndex;\n      properties = properties || geojson.features[featureIndex].properties;\n      geometry = geojson.features[featureIndex].geometry;\n      break;\n    case \"Feature\":\n      properties = properties || geojson.properties;\n      geometry = geojson.geometry;\n      break;\n    case \"Point\":\n    case \"MultiPoint\":\n      return null;\n    case \"LineString\":\n    case \"Polygon\":\n    case \"MultiLineString\":\n    case \"MultiPolygon\":\n      geometry = geojson;\n      break;\n    default:\n      throw new Error(\"geojson is invalid\");\n  }\n\n  // Find Coord Index\n  if (geometry === null) return null;\n  var coords = geometry.coordinates;\n  switch (geometry.type) {\n    case \"Point\":\n      return helpers.point(coords, properties, options);\n    case \"MultiPoint\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      return helpers.point(coords[multiFeatureIndex], properties, options);\n    case \"LineString\":\n      if (coordIndex < 0) coordIndex = coords.length + coordIndex;\n      return helpers.point(coords[coordIndex], properties, options);\n    case \"Polygon\":\n      if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;\n      if (coordIndex < 0)\n        coordIndex = coords[geometryIndex].length + coordIndex;\n      return helpers.point(coords[geometryIndex][coordIndex], properties, options);\n    case \"MultiLineString\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (coordIndex < 0)\n        coordIndex = coords[multiFeatureIndex].length + coordIndex;\n      return helpers.point(coords[multiFeatureIndex][coordIndex], properties, options);\n    case \"MultiPolygon\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (geometryIndex < 0)\n        geometryIndex = coords[multiFeatureIndex].length + geometryIndex;\n      if (coordIndex < 0)\n        coordIndex =\n          coords[multiFeatureIndex][geometryIndex].length - coordIndex;\n      return helpers.point(\n        coords[multiFeatureIndex][geometryIndex][coordIndex],\n        properties,\n        options\n      );\n  }\n  throw new Error(\"geojson is invalid\");\n}\n\nexports.coordAll = coordAll;\nexports.coordEach = coordEach;\nexports.coordReduce = coordReduce;\nexports.featureEach = featureEach;\nexports.featureReduce = featureReduce;\nexports.findPoint = findPoint;\nexports.findSegment = findSegment;\nexports.flattenEach = flattenEach;\nexports.flattenReduce = flattenReduce;\nexports.geomEach = geomEach;\nexports.geomReduce = geomReduce;\nexports.lineEach = lineEach;\nexports.lineReduce = lineReduce;\nexports.propEach = propEach;\nexports.propReduce = propReduce;\nexports.segmentEach = segmentEach;\nexports.segmentReduce = segmentReduce;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar meta_1 = require(\"@turf/meta\");\n/**\n * Takes a set of features, calculates the bbox of all input features, and returns a bounding box.\n *\n * @name bbox\n * @param {GeoJSON} geojson any GeoJSON object\n * @returns {BBox} bbox extent in [minX, minY, maxX, maxY] order\n * @example\n * var line = turf.lineString([[-74, 40], [-78, 42], [-82, 35]]);\n * var bbox = turf.bbox(line);\n * var bboxPolygon = turf.bboxPolygon(bbox);\n *\n * //addToMap\n * var addToMap = [line, bboxPolygon]\n */\nfunction bbox(geojson) {\n    var result = [Infinity, Infinity, -Infinity, -Infinity];\n    meta_1.coordEach(geojson, function (coord) {\n        if (result[0] > coord[0]) {\n            result[0] = coord[0];\n        }\n        if (result[1] > coord[1]) {\n            result[1] = coord[1];\n        }\n        if (result[2] < coord[0]) {\n            result[2] = coord[0];\n        }\n        if (result[3] < coord[1]) {\n            result[3] = coord[1];\n        }\n    });\n    return result;\n}\nbbox[\"default\"] = bbox;\nexports.default = bbox;\n","var rbush = require('rbush');\nvar helpers = require('@turf/helpers');\nvar meta = require('@turf/meta');\nvar turfBBox = require('@turf/bbox').default;\nvar featureEach = meta.featureEach;\nvar coordEach = meta.coordEach;\nvar polygon = helpers.polygon;\nvar featureCollection = helpers.featureCollection;\n\n/**\n * GeoJSON implementation of [RBush](https://github.com/mourner/rbush#rbush) spatial index.\n *\n * @name rbush\n * @param {number} [maxEntries=9] defines the maximum number of entries in a tree node. 9 (used by default) is a\n * reasonable choice for most applications. Higher value means faster insertion and slower search, and vice versa.\n * @returns {RBush} GeoJSON RBush\n * @example\n * var geojsonRbush = require('geojson-rbush').default;\n * var tree = geojsonRbush();\n */\nfunction geojsonRbush(maxEntries) {\n    var tree = new rbush(maxEntries);\n    /**\n     * [insert](https://github.com/mourner/rbush#data-format)\n     *\n     * @param {Feature} feature insert single GeoJSON Feature\n     * @returns {RBush} GeoJSON RBush\n     * @example\n     * var poly = turf.polygon([[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]]);\n     * tree.insert(poly)\n     */\n    tree.insert = function (feature) {\n        if (feature.type !== 'Feature') throw new Error('invalid feature');\n        feature.bbox = feature.bbox ? feature.bbox : turfBBox(feature);\n        return rbush.prototype.insert.call(this, feature);\n    };\n\n    /**\n     * [load](https://github.com/mourner/rbush#bulk-inserting-data)\n     *\n     * @param {FeatureCollection|Array<Feature>} features load entire GeoJSON FeatureCollection\n     * @returns {RBush} GeoJSON RBush\n     * @example\n     * var polys = turf.polygons([\n     *     [[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]],\n     *     [[[-93, 32], [-83, 32], [-83, 39], [-93, 39], [-93, 32]]]\n     * ]);\n     * tree.load(polys);\n     */\n    tree.load = function (features) {\n        var load = [];\n        // Load an Array of Features\n        if (Array.isArray(features)) {\n            features.forEach(function (feature) {\n                if (feature.type !== 'Feature') throw new Error('invalid features');\n                feature.bbox = feature.bbox ? feature.bbox : turfBBox(feature);\n                load.push(feature);\n            });\n        } else {\n            // Load a FeatureCollection\n            featureEach(features, function (feature) {\n                if (feature.type !== 'Feature') throw new Error('invalid features');\n                feature.bbox = feature.bbox ? feature.bbox : turfBBox(feature);\n                load.push(feature);\n            });\n        }\n        return rbush.prototype.load.call(this, load);\n    };\n\n    /**\n     * [remove](https://github.com/mourner/rbush#removing-data)\n     *\n     * @param {Feature} feature remove single GeoJSON Feature\n     * @param {Function} equals Pass a custom equals function to compare by value for removal.\n     * @returns {RBush} GeoJSON RBush\n     * @example\n     * var poly = turf.polygon([[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]]);\n     *\n     * tree.remove(poly);\n     */\n    tree.remove = function (feature, equals) {\n        if (feature.type !== 'Feature') throw new Error('invalid feature');\n        feature.bbox = feature.bbox ? feature.bbox : turfBBox(feature);\n        return rbush.prototype.remove.call(this, feature, equals);\n    };\n\n    /**\n     * [clear](https://github.com/mourner/rbush#removing-data)\n     *\n     * @returns {RBush} GeoJSON Rbush\n     * @example\n     * tree.clear()\n     */\n    tree.clear = function () {\n        return rbush.prototype.clear.call(this);\n    };\n\n    /**\n     * [search](https://github.com/mourner/rbush#search)\n     *\n     * @param {BBox|FeatureCollection|Feature} geojson search with GeoJSON\n     * @returns {FeatureCollection} all features that intersects with the given GeoJSON.\n     * @example\n     * var poly = turf.polygon([[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]]);\n     *\n     * tree.search(poly);\n     */\n    tree.search = function (geojson) {\n        var features = rbush.prototype.search.call(this, this.toBBox(geojson));\n        return featureCollection(features);\n    };\n\n    /**\n     * [collides](https://github.com/mourner/rbush#collisions)\n     *\n     * @param {BBox|FeatureCollection|Feature} geojson collides with GeoJSON\n     * @returns {boolean} true if there are any items intersecting the given GeoJSON, otherwise false.\n     * @example\n     * var poly = turf.polygon([[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]]);\n     *\n     * tree.collides(poly);\n     */\n    tree.collides = function (geojson) {\n        return rbush.prototype.collides.call(this, this.toBBox(geojson));\n    };\n\n    /**\n     * [all](https://github.com/mourner/rbush#search)\n     *\n     * @returns {FeatureCollection} all the features in RBush\n     * @example\n     * tree.all()\n     */\n    tree.all = function () {\n        var features = rbush.prototype.all.call(this);\n        return featureCollection(features);\n    };\n\n    /**\n     * [toJSON](https://github.com/mourner/rbush#export-and-import)\n     *\n     * @returns {any} export data as JSON object\n     * @example\n     * var exported = tree.toJSON()\n     */\n    tree.toJSON = function () {\n        return rbush.prototype.toJSON.call(this);\n    };\n\n    /**\n     * [fromJSON](https://github.com/mourner/rbush#export-and-import)\n     *\n     * @param {any} json import previously exported data\n     * @returns {RBush} GeoJSON RBush\n     * @example\n     * var exported = {\n     *   \"children\": [\n     *     {\n     *       \"type\": \"Feature\",\n     *       \"geometry\": {\n     *         \"type\": \"Point\",\n     *         \"coordinates\": [110, 50]\n     *       },\n     *       \"properties\": {},\n     *       \"bbox\": [110, 50, 110, 50]\n     *     }\n     *   ],\n     *   \"height\": 1,\n     *   \"leaf\": true,\n     *   \"minX\": 110,\n     *   \"minY\": 50,\n     *   \"maxX\": 110,\n     *   \"maxY\": 50\n     * }\n     * tree.fromJSON(exported)\n     */\n    tree.fromJSON = function (json) {\n        return rbush.prototype.fromJSON.call(this, json);\n    };\n\n    /**\n     * Converts GeoJSON to {minX, minY, maxX, maxY} schema\n     *\n     * @private\n     * @param {BBox|FeatureCollection|Feature} geojson feature(s) to retrieve BBox from\n     * @returns {Object} converted to {minX, minY, maxX, maxY}\n     */\n    tree.toBBox = function (geojson) {\n        var bbox;\n        if (geojson.bbox) bbox = geojson.bbox;\n        else if (Array.isArray(geojson) && geojson.length === 4) bbox = geojson;\n        else if (Array.isArray(geojson) && geojson.length === 6) bbox = [geojson[0], geojson[1], geojson[3], geojson[4]];\n        else if (geojson.type === 'Feature') bbox = turfBBox(geojson);\n        else if (geojson.type === 'FeatureCollection') bbox = turfBBox(geojson);\n        else throw new Error('invalid geojson')\n\n        return {\n            minX: bbox[0],\n            minY: bbox[1],\n            maxX: bbox[2],\n            maxY: bbox[3]\n        };\n    };\n    return tree;\n}\n\nmodule.exports = geojsonRbush;\nmodule.exports.default = geojsonRbush;\n","import { feature, featureCollection, point, } from \"@turf/helpers\";\nimport { getCoords } from \"@turf/invariant\";\nimport lineSegment from \"@turf/line-segment\";\nimport { featureEach } from \"@turf/meta\";\nimport rbush from \"geojson-rbush\";\n/**\n * Takes any LineString or Polygon GeoJSON and returns the intersecting point(s).\n *\n * @name lineIntersect\n * @param {GeoJSON} line1 any LineString or Polygon\n * @param {GeoJSON} line2 any LineString or Polygon\n * @returns {FeatureCollection<Point>} point(s) that intersect both\n * @example\n * var line1 = turf.lineString([[126, -11], [129, -21]]);\n * var line2 = turf.lineString([[123, -18], [131, -14]]);\n * var intersects = turf.lineIntersect(line1, line2);\n *\n * //addToMap\n * var addToMap = [line1, line2, intersects]\n */\nfunction lineIntersect(line1, line2) {\n    var unique = {};\n    var results = [];\n    // First, normalize geometries to features\n    // Then, handle simple 2-vertex segments\n    if (line1.type === \"LineString\") {\n        line1 = feature(line1);\n    }\n    if (line2.type === \"LineString\") {\n        line2 = feature(line2);\n    }\n    if (line1.type === \"Feature\" &&\n        line2.type === \"Feature\" &&\n        line1.geometry !== null &&\n        line2.geometry !== null &&\n        line1.geometry.type === \"LineString\" &&\n        line2.geometry.type === \"LineString\" &&\n        line1.geometry.coordinates.length === 2 &&\n        line2.geometry.coordinates.length === 2) {\n        var intersect = intersects(line1, line2);\n        if (intersect) {\n            results.push(intersect);\n        }\n        return featureCollection(results);\n    }\n    // Handles complex GeoJSON Geometries\n    var tree = rbush();\n    tree.load(lineSegment(line2));\n    featureEach(lineSegment(line1), function (segment) {\n        featureEach(tree.search(segment), function (match) {\n            var intersect = intersects(segment, match);\n            if (intersect) {\n                // prevent duplicate points https://github.com/Turfjs/turf/issues/688\n                var key = getCoords(intersect).join(\",\");\n                if (!unique[key]) {\n                    unique[key] = true;\n                    results.push(intersect);\n                }\n            }\n        });\n    });\n    return featureCollection(results);\n}\n/**\n * Find a point that intersects LineStrings with two coordinates each\n *\n * @private\n * @param {Feature<LineString>} line1 GeoJSON LineString (Must only contain 2 coordinates)\n * @param {Feature<LineString>} line2 GeoJSON LineString (Must only contain 2 coordinates)\n * @returns {Feature<Point>} intersecting GeoJSON Point\n */\nfunction intersects(line1, line2) {\n    var coords1 = getCoords(line1);\n    var coords2 = getCoords(line2);\n    if (coords1.length !== 2) {\n        throw new Error(\"<intersects> line1 must only contain 2 coordinates\");\n    }\n    if (coords2.length !== 2) {\n        throw new Error(\"<intersects> line2 must only contain 2 coordinates\");\n    }\n    var x1 = coords1[0][0];\n    var y1 = coords1[0][1];\n    var x2 = coords1[1][0];\n    var y2 = coords1[1][1];\n    var x3 = coords2[0][0];\n    var y3 = coords2[0][1];\n    var x4 = coords2[1][0];\n    var y4 = coords2[1][1];\n    var denom = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);\n    var numeA = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);\n    var numeB = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);\n    if (denom === 0) {\n        if (numeA === 0 && numeB === 0) {\n            return null;\n        }\n        return null;\n    }\n    var uA = numeA / denom;\n    var uB = numeB / denom;\n    if (uA >= 0 && uA <= 1 && uB >= 0 && uB <= 1) {\n        var x = x1 + uA * (x2 - x1);\n        var y = y1 + uA * (y2 - y1);\n        return point([x, y]);\n    }\n    return null;\n}\nexport default lineIntersect;\n","import { featureCollection, lineString, multiLineString } from \"@turf/helpers\";\nimport { getGeom } from \"@turf/invariant\";\n/**\n * Converts a {@link Polygon} to {@link LineString|(Multi)LineString} or {@link MultiPolygon} to a\n * {@link FeatureCollection} of {@link LineString|(Multi)LineString}.\n *\n * @name polygonToLine\n * @param {Feature<Polygon|MultiPolygon>} poly Feature to convert\n * @param {Object} [options={}] Optional parameters\n * @param {Object} [options.properties={}] translates GeoJSON properties to Feature\n * @returns {FeatureCollection|Feature<LineString|MultiLinestring>} converted (Multi)Polygon to (Multi)LineString\n * @example\n * var poly = turf.polygon([[[125, -30], [145, -30], [145, -20], [125, -20], [125, -30]]]);\n *\n * var line = turf.polygonToLine(poly);\n *\n * //addToMap\n * var addToMap = [line];\n */\nexport default function (poly, options) {\n    if (options === void 0) { options = {}; }\n    var geom = getGeom(poly);\n    if (!options.properties && poly.type === \"Feature\") {\n        options.properties = poly.properties;\n    }\n    switch (geom.type) {\n        case \"Polygon\":\n            return polygonToLine(geom, options);\n        case \"MultiPolygon\":\n            return multiPolygonToLine(geom, options);\n        default:\n            throw new Error(\"invalid poly\");\n    }\n}\n/**\n * @private\n */\nexport function polygonToLine(poly, options) {\n    if (options === void 0) { options = {}; }\n    var geom = getGeom(poly);\n    var coords = geom.coordinates;\n    var properties = options.properties\n        ? options.properties\n        : poly.type === \"Feature\"\n            ? poly.properties\n            : {};\n    return coordsToLine(coords, properties);\n}\n/**\n * @private\n */\nexport function multiPolygonToLine(multiPoly, options) {\n    if (options === void 0) { options = {}; }\n    var geom = getGeom(multiPoly);\n    var coords = geom.coordinates;\n    var properties = options.properties\n        ? options.properties\n        : multiPoly.type === \"Feature\"\n            ? multiPoly.properties\n            : {};\n    var lines = [];\n    coords.forEach(function (coord) {\n        lines.push(coordsToLine(coord, properties));\n    });\n    return featureCollection(lines);\n}\n/**\n * @private\n */\nexport function coordsToLine(coords, properties) {\n    if (coords.length > 1) {\n        return multiLineString(coords, properties);\n    }\n    return lineString(coords[0], properties);\n}\n","import booleanPointInPolygon from \"@turf/boolean-point-in-polygon\";\nimport lineIntersect from \"@turf/line-intersect\";\nimport { flattenEach } from \"@turf/meta\";\nimport polygonToLine from \"@turf/polygon-to-line\";\n/**\n * Boolean-disjoint returns (TRUE) if the intersection of the two geometries is an empty set.\n *\n * @name booleanDisjoint\n * @param {Geometry|Feature<any>} feature1 GeoJSON Feature or Geometry\n * @param {Geometry|Feature<any>} feature2 GeoJSON Feature or Geometry\n * @returns {boolean} true/false\n * @example\n * var point = turf.point([2, 2]);\n * var line = turf.lineString([[1, 1], [1, 2], [1, 3], [1, 4]]);\n *\n * turf.booleanDisjoint(line, point);\n * //=true\n */\nfunction booleanDisjoint(feature1, feature2) {\n    var bool = true;\n    flattenEach(feature1, function (flatten1) {\n        flattenEach(feature2, function (flatten2) {\n            if (bool === false) {\n                return false;\n            }\n            bool = disjoint(flatten1.geometry, flatten2.geometry);\n        });\n    });\n    return bool;\n}\n/**\n * Disjoint operation for simple Geometries (Point/LineString/Polygon)\n *\n * @private\n * @param {Geometry<any>} geom1 GeoJSON Geometry\n * @param {Geometry<any>} geom2 GeoJSON Geometry\n * @returns {boolean} true/false\n */\nfunction disjoint(geom1, geom2) {\n    switch (geom1.type) {\n        case \"Point\":\n            switch (geom2.type) {\n                case \"Point\":\n                    return !compareCoords(geom1.coordinates, geom2.coordinates);\n                case \"LineString\":\n                    return !isPointOnLine(geom2, geom1);\n                case \"Polygon\":\n                    return !booleanPointInPolygon(geom1, geom2);\n            }\n            /* istanbul ignore next */\n            break;\n        case \"LineString\":\n            switch (geom2.type) {\n                case \"Point\":\n                    return !isPointOnLine(geom1, geom2);\n                case \"LineString\":\n                    return !isLineOnLine(geom1, geom2);\n                case \"Polygon\":\n                    return !isLineInPoly(geom2, geom1);\n            }\n            /* istanbul ignore next */\n            break;\n        case \"Polygon\":\n            switch (geom2.type) {\n                case \"Point\":\n                    return !booleanPointInPolygon(geom2, geom1);\n                case \"LineString\":\n                    return !isLineInPoly(geom1, geom2);\n                case \"Polygon\":\n                    return !isPolyInPoly(geom2, geom1);\n            }\n    }\n    return false;\n}\n// http://stackoverflow.com/a/11908158/1979085\nfunction isPointOnLine(lineString, pt) {\n    for (var i = 0; i < lineString.coordinates.length - 1; i++) {\n        if (isPointOnLineSegment(lineString.coordinates[i], lineString.coordinates[i + 1], pt.coordinates)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction isLineOnLine(lineString1, lineString2) {\n    var doLinesIntersect = lineIntersect(lineString1, lineString2);\n    if (doLinesIntersect.features.length > 0) {\n        return true;\n    }\n    return false;\n}\nfunction isLineInPoly(polygon, lineString) {\n    for (var _i = 0, _a = lineString.coordinates; _i < _a.length; _i++) {\n        var coord = _a[_i];\n        if (booleanPointInPolygon(coord, polygon)) {\n            return true;\n        }\n    }\n    var doLinesIntersect = lineIntersect(lineString, polygonToLine(polygon));\n    if (doLinesIntersect.features.length > 0) {\n        return true;\n    }\n    return false;\n}\n/**\n * Is Polygon (geom1) in Polygon (geom2)\n * Only takes into account outer rings\n * See http://stackoverflow.com/a/4833823/1979085\n *\n * @private\n * @param {Geometry|Feature<Polygon>} feature1 Polygon1\n * @param {Geometry|Feature<Polygon>} feature2 Polygon2\n * @returns {boolean} true/false\n */\nfunction isPolyInPoly(feature1, feature2) {\n    for (var _i = 0, _a = feature1.coordinates[0]; _i < _a.length; _i++) {\n        var coord1 = _a[_i];\n        if (booleanPointInPolygon(coord1, feature2)) {\n            return true;\n        }\n    }\n    for (var _b = 0, _c = feature2.coordinates[0]; _b < _c.length; _b++) {\n        var coord2 = _c[_b];\n        if (booleanPointInPolygon(coord2, feature1)) {\n            return true;\n        }\n    }\n    var doLinesIntersect = lineIntersect(polygonToLine(feature1), polygonToLine(feature2));\n    if (doLinesIntersect.features.length > 0) {\n        return true;\n    }\n    return false;\n}\nfunction isPointOnLineSegment(lineSegmentStart, lineSegmentEnd, pt) {\n    var dxc = pt[0] - lineSegmentStart[0];\n    var dyc = pt[1] - lineSegmentStart[1];\n    var dxl = lineSegmentEnd[0] - lineSegmentStart[0];\n    var dyl = lineSegmentEnd[1] - lineSegmentStart[1];\n    var cross = dxc * dyl - dyc * dxl;\n    if (cross !== 0) {\n        return false;\n    }\n    if (Math.abs(dxl) >= Math.abs(dyl)) {\n        if (dxl > 0) {\n            return lineSegmentStart[0] <= pt[0] && pt[0] <= lineSegmentEnd[0];\n        }\n        else {\n            return lineSegmentEnd[0] <= pt[0] && pt[0] <= lineSegmentStart[0];\n        }\n    }\n    else if (dyl > 0) {\n        return lineSegmentStart[1] <= pt[1] && pt[1] <= lineSegmentEnd[1];\n    }\n    else {\n        return lineSegmentEnd[1] <= pt[1] && pt[1] <= lineSegmentStart[1];\n    }\n}\n/**\n * compareCoords\n *\n * @private\n * @param {Position} pair1 point [x,y]\n * @param {Position} pair2 point [x,y]\n * @returns {boolean} true/false if coord pairs match\n */\nfunction compareCoords(pair1, pair2) {\n    return pair1[0] === pair2[0] && pair1[1] === pair2[1];\n}\nexport default booleanDisjoint;\n","import booleanDisjoint from \"@turf/boolean-disjoint\";\nimport { flattenEach } from \"@turf/meta\";\n/**\n * Boolean-intersects returns (TRUE) two geometries intersect.\n *\n * @name booleanIntersects\n * @param {Geometry|Feature<any>} feature1 GeoJSON Feature or Geometry\n * @param {Geometry|Feature<any>} feature2 GeoJSON Feature or Geometry\n * @returns {boolean} true/false\n * @example\n * var point = turf.point([2, 2]);\n * var line = turf.lineString([[1, 1], [1, 2], [1, 3], [1, 4]]);\n *\n * turf.booleanIntersects(line, point);\n * //=true\n */\nexport default function booleanIntersects(feature1, feature2) {\n    var bool = false;\n    flattenEach(feature1, function (flatten1) {\n        flattenEach(feature2, function (flatten2) {\n            if (bool === true) {\n                return true;\n            }\n            bool = !booleanDisjoint(flatten1.geometry, flatten2.geometry);\n        });\n    });\n    return bool;\n}\n","import { Space } from \"@spatial-id/javascript-sdk\";\nimport origFetch from \"cross-fetch\";\n\nimport { VectorTile } from \"@mapbox/vector-tile\";\nimport Protobuf from \"pbf\";\nimport turfBooleanIntersect from '@turf/boolean-intersects';\n\nimport type GeoJSON from \"geojson\";\n\nconst fetch: typeof origFetch = origFetch.bind(undefined);\n\n// A subset of the TileJSON specification\nexport type RequestSource = {\n  type: \"vector\";\n  tiles: string[];\n  minzoom?: number;\n  maxzoom?: number;\n} | {\n  type: \"vector\";\n  url: string;\n  minzoom?: number;\n  maxzoom?: number;\n};\n\nconst createTileUrl = (template: string, id: Space) => (\n  template\n    .replace('{z}', id.zfxy.z.toString())\n    .replace('{f}', id.zfxy.f.toString())\n    .replace('{x}', id.zfxy.x.toString())\n    .replace('{y}', id.zfxy.y.toString())\n)\n\ntype RequestToGeoJSON = (source: RequestSource, id: Space) => Promise<GeoJSON.FeatureCollection>;\n\nexport const requestToGeoJSON: RequestToGeoJSON = async (source, id) => {\n  let tilejson = source;\n  if (\"url\" in source) {\n    const response = await fetch(source.url);\n    if (!response.ok) {\n      throw new Error(`TileJSON request to ${source.url} failed: ${response.status} ${response.statusText}`);\n    }\n    tilejson = {\n      ...(await response.json()),\n      ...tilejson,\n    };\n  }\n  if (!(\"tiles\" in tilejson)) {\n    throw new Error(\"TileJSON must contain a 'tiles' property\");\n  }\n\n  const { tiles, minzoom: rawMinzoom, maxzoom } = tilejson;\n  const minzoom = rawMinzoom || 0;\n  if (minzoom !== undefined && id.zoom < minzoom) {\n    throw new Error(`Not implemented: zoom level of requested Spatial ID (${id.zoom}) is below minimum zoom ${minzoom}`);\n  }\n  const requestZoom = Math.min(maxzoom || 25, id.zoom);\n  let requestTile: Space;\n  if (requestZoom < id.zfxy.z) {\n    requestTile = id.parent(requestZoom);\n  } else {\n    requestTile = id;\n  }\n  const tileUrl = createTileUrl(tiles[0], requestTile);\n\n  const response = await fetch(tileUrl);\n  if (!response.ok) {\n    throw new Error(`Tile request to ${tileUrl} failed: ${response.status} ${response.statusText}`);\n  }\n\n  const data = await response.arrayBuffer();\n\n  // decode vector tile, transform to GeoJSON\n  const tile = new VectorTile(new Protobuf(data));\n  const out: GeoJSON.FeatureCollection = {\n    type: \"FeatureCollection\",\n    features: [],\n  };\n\n  const zfxyGeom = id.toGeoJSON();\n\n  for (const layerName in tile.layers) {\n    const layer = tile.layers[layerName];\n    for (let i = 0; i < layer.length; i++) {\n      const feature = layer.feature(i).toGeoJSON(requestTile.zfxy.x, requestTile.zfxy.y, requestTile.zfxy.z);\n      if (turfBooleanIntersect(zfxyGeom, feature)) {\n        out.features.push(feature);\n      }\n    }\n  }\n\n  return out;\n};\n"],"names":["pointGeometry","Point","x","y","this","Point$1","prototype","clone","add","p","_add","sub","_sub","multByPoint","_multByPoint","divByPoint","_divByPoint","mult","k","_mult","div","_div","rotate","a","_rotate","rotateAround","_rotateAround","matMult","m","_matMult","unit","_unit","perp","_perp","round","_round","mag","Math","sqrt","equals","other","dist","distSqr","dx","dy","angle","atan2","angleTo","b","angleWith","angleWithSep","cos","sin","convert","Array","isArray","require$$0","vectortilefeature","VectorTileFeature","pbf","end","extent","keys","values","properties","type","_pbf","_geometry","_keys","_values","readFields","readFeature","tag","feature","id","readVarint","pos","key","value","readTag","signedArea","ring","p1","p2","sum","i","len","length","j","types","loadGeometry","line","cmd","lines","cmdLen","readSVarint","push","Error","bbox","x1","Infinity","x2","y1","y2","VectorTileFeature$1","toGeoJSON","z","size","pow","x0","y0","coords","project","PI","atan","exp","points","rings","polygon","ccw","polygons","area","undefined","classifyRings","result","geometry","coordinates","vectortilelayer","VectorTileLayer","version","name","_features","readLayer","layer","readString","readFloat","readDouble","readVarint64","readBoolean","readValueMessage","vectortile","layers","readTile","VectorTile","ieee754","buffer","offset","isLE","mLen","nBytes","e","eLen","eMax","eBias","nBits","d","s","NaN","c","rt","abs","isNaN","floor","log","LN2","Pbf","buf","ArrayBuffer","isView","Uint8Array","Varint","Fixed64","Bytes","Fixed32","SHIFT_LEFT_32","SHIFT_RIGHT_32","utf8TextDecoder","TextDecoder","readPackedEnd","toNum","low","high","isSigned","makeRoomForExtraLength","startPos","extraLen","realloc","writePackedVarint","arr","writeVarint","writePackedSVarint","writeSVarint","writePackedFloat","writeFloat","writePackedDouble","writeDouble","writePackedBoolean","writeBoolean","writePackedFixed32","writeFixed32","writePackedSFixed32","writeSFixed32","writePackedFixed64","writeFixed64","writePackedSFixed64","writeSFixed64","readUInt32","writeInt32","val","readInt32","geom","options","feat","lineString","featureCollection","features","fc","isNumber","num","getCoords","getGeom","geojson","booleanPointInPolygon","point","pt","coord","getCoord","polys","inBBox","insidePoly","inRing","ignoreBoundary","inHole","isInside","slice","xi","yi","xj","yj","featureEach","callback","flattenEach","g","stopG","geometryMaybeCollection","isGeometryCollection","featureProperties","featureBBox","featureId","featureIndex","isFeatureCollection","isFeature","stop","geometries","geomEach","geomType","multiFeatureIndex","coordinate","lineSegment","results","forEach","segments","reduce","previousCoords","currentCoords","coords1","coords2","segment","createSegments","lineSegmentFeature","destroy","readField","skip","readMessage","readFixed32","readSFixed32","readFixed64","readSFixed64","read","l","h","readVarintRemainder","Boolean","decode","subarray","readUtf8TextDecoder","str","b1","b2","b3","b0","bytesPerSequence","String","fromCharCode","readUtf8","readBytes","readPackedVarint","readPackedSVarint","readPackedBoolean","readPackedFloat","readPackedDouble","readPackedFixed32","readPackedSFixed32","readPackedFixed64","readPackedSFixed64","writeTag","min","set","finish","writeBigVarintLow","lsb","writeBigVarintHigh","writeBigVarint","writeString","lead","charCodeAt","writeUtf8","write","writeBytes","writeRawMessage","fn","obj","writeMessage","writeBytesField","writeFixed32Field","writeSFixed32Field","writeFixed64Field","writeSFixed64Field","writeVarintField","writeSVarintField","writeStringField","writeFloatField","writeDoubleField","writeBooleanField","quickselect","left","right","compare","quickselectStep","defaultCompare","n","sd","max","t","swap","tmp","findItem","item","items","equalsFn","indexOf","calcBBox","node","toBBox","distBBox","children","destNode","createNode","minX","minY","maxX","maxY","child","extend","leaf","compareNodeMinX","compareNodeMinY","bboxArea","bboxMargin","intersectionArea","contains","intersects","height","multiSelect","stack","pop","mid","ceil","constructor","maxEntries","_maxEntries","_minEntries","clear","all","_all","data","search","nodesToSearch","childBBox","collides","load","insert","_build","_splitRoot","tmpNode","_insert","remove","path","indexes","parent","goingUp","index","splice","_condense","compareMinX","compareMinY","toJSON","fromJSON","N","M","N2","N1","right2","right3","_chooseSubtree","level","targetNode","minArea","minEnlargement","enlargement","isNode","insertPath","_split","_adjustParentBBoxes","_chooseSplitAxis","splitIndex","_chooseSplitIndex","newNode","minOverlap","bbox1","bbox2","overlap","_allDistMargin","sort","leftBBox","rightBBox","margin","siblings","_i","coordinates_1","multiLineString","multiPoint","multiPolygon","radiansToLength","radians","units","factor","exports","factors","lengthToRadians","distance","radiansToDegrees","Object","defineProperty","earthRadius","centimeters","centimetres","degrees","feet","inches","kilometers","kilometres","meters","metres","miles","millimeters","millimetres","nauticalmiles","yards","unitsFactors","areaFactors","acres","hectares","_options","map","lineStrings","geometryCollection","precision","multiplier","lengthToDegrees","bearingToAzimuth","bearing","degreesToRadians","convertLength","originalUnit","finalUnit","convertArea","startFactor","finalFactor","isObject","input","validateBBox","validateId","js","helpers","coordEach","excludeWrapCoord","wrapShrink","coordIndex","geomIndex","geometryIndex","propEach","segmentEach","segmentIndex","previousFeatureIndex","previousMultiIndex","prevGeomIndex","currentCoord","featureIndexCoord","multiPartIndexCoord","currentSegment","lineEach","js$1","coordAll","coordReduce","initialValue","previousValue","featureReduce","currentFeature","findPoint","findSegment","flattenReduce","geomReduce","currentGeometry","lineReduce","currentLine","propReduce","currentProperties","segmentReduce","started","meta_1","default","rbush","require$$1","meta","require$$2","turfBBox","require$$3","geojsonRbush","tree","call","json","lineIntersect","line1","line2","unique","intersect","match","join","x3","y3","x4","y4","denom","numeA","numeB","uA","uB","polygonToLine","poly","coordsToLine","multiPoly","multiPolygonToLine","booleanDisjoint","feature1","feature2","bool","flatten1","flatten2","geom1","geom2","pair1","pair2","isPointOnLine","lineString1","lineString2","isLineOnLine","isLineInPoly","_a","_b","_c","isPolyInPoly","disjoint","isPointOnLineSegment","lineSegmentStart","lineSegmentEnd","dxc","dyc","dxl","dyl","booleanIntersects","geojsonRbushModule","geojsonRbush$1","fetch","origFetch","bind","source","__awaiter","tilejson","url","response_1","sent","ok","concat","status","statusText","tiles","rawMinzoom","minzoom","maxzoom","zoom","requestZoom","requestTile","zfxy","tileUrl","template","replace","toString","f","createTileUrl","response","arrayBuffer","layerName","tile","Protobuf","out","zfxyGeom","turfBooleanIntersect"],"mappings":"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"}